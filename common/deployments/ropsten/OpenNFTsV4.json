{
  "address": "0x36239316DC6db822C7671691CFE56B384AD2fE70",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetTokenPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fraction",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fraction",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "defaultPrice_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee_",
          "type": "uint96"
        },
        {
          "internalType": "bool[]",
          "name": "options",
          "type": "bool[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee_",
          "type": "uint96"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parent",
      "outputs": [
        {
          "internalType": "address",
          "name": "parent_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDefaultPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5f8e85d081a9437c88bee2d598692c0af7aafaaed5a3238d08f1ed6dd4873d85",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x36239316DC6db822C7671691CFE56B384AD2fE70",
    "transactionIndex": 23,
    "gasUsed": "2785404",
    "logsBloom": "0x
    "blockHash": "0xf330452134a9deabf75ff1d75dc7e925614e6b33b6e6555add9fcff4da8f2865",
    "transactionHash": "0x5f8e85d081a9437c88bee2d598692c0af7aafaaed5a3238d08f1ed6dd4873d85",
    "logs": [],
    "blockNumber": 12902621,
    "cumulativeGasUsed": "3999545",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "019455b5fd7972570049df7a9316d202",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDefaultPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee_\",\"type\":\"uint96\"},{\"internalType\":\"bool[]\",\"name\":\"options\",\"type\":\"bool[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee_\",\"type\":\"uint96\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId to test\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty configuration\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty configuration\"},\"supportsInterface(bytes4)\":{\"notice\":\"test if this interface is supported\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"},\"withdraw(address)\":{\"notice\":\"withdraw token otherwise eth\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/OpenNFTsV4.sol\":\"OpenNFTsV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1fb41a62bc8627d22290d66995c9f4c3dffbea73b6d91a68b9c3ed15fb270c81\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-2981: NFT Royalty Standard\\n// https://eips.ethereum.org/EIPS/eip-2981\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/common/ERC2981.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC2981 \\u2014\\u2014 IERC2981\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nabstract contract OpenERC2981 is IERC2981, OpenERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 fraction;\\n    }\\n\\n    RoyaltyInfo internal _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) internal _tokenRoyaltyInfo;\\n\\n    uint96 private constant _MAX_FEE = 10000;\\n\\n    modifier notTooExpensive(uint256 price) {\\n        /// otherwise may overflow\\n        require(price < 2 ** 128, \\\"Too expensive\\\");\\n        _;\\n    }\\n\\n    modifier lessThanMaxFee(uint256 fee) {\\n        require(fee <= _MAX_FEE, \\\"Royalty fee exceed price\\\");\\n        _;\\n    }\\n\\n    function royaltyInfo(uint256 tokenID, uint256 price)\\n        public\\n        view\\n        override (IERC2981)\\n        notTooExpensive(price)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenID];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        royaltyAmount = (price * royalty.fraction) / _MAX_FEE;\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x76b72123e59bae71d4ec986109b3d655be4cb786f1887944523a99f67f34dab0\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    function approve(address spender, uint256 tokenID) external override (IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override (IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenID) external payable override (IERC721) {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _transferFrom(from, to, tokenID);\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID) public payable override (IERC721) {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == 0x80ac58cd // = type(IERC721).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override (IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID) public view override (IERC721) returns (address owner) {\\n        require((owner = _owners[tokenID]) != address(0), \\\"Invalid token ID\\\");\\n    }\\n\\n    function getApproved(uint256 tokenID) public view override (IERC721) returns (address) {\\n        require(_exists(tokenID), \\\"Invalid token ID\\\");\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override (IERC721) returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(address to, string memory, uint256 tokenID) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(!_exists(tokenID), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual {}\\n\\n    function _exists(uint256 tokenID) internal view returns (bool exists) {\\n        exists = _owners[tokenID] != address(0);\\n    }\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (bool ownerOrOperator)\\n    {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data) private {\\n        _transferFrom(from, to, tokenID);\\n\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 tokenID) private onlyTokenOwnerOrApproved(tokenID) {\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _isERC721Receiver(address from, address to, uint256 tokenID, bytes memory data) private returns (bool) {\\n        return to.code.length == 0\\n            || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data)\\n                == IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID) private view returns (bool ownerOrApproved) {\\n        ownerOrApproved = (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n}\\n\",\"keccak256\":\"0x4ee93f23e138b2f4ed5c6a37010a4e112607e5517a5c1d7447e6fe845b3ce1db\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//      OpenERC165\\n//           |\\n//      OpenERC721\\n//           |\\n//  OpenERC721Enumerable \\u2014\\u2014 IERC721Enumerable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override (IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index) external view override (IERC721Enumerable) returns (uint256) {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC721) returns (bool) {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID) internal virtual override (OpenERC721) {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual override (OpenERC721) {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0xc76d4fa56fcc70dfa0a4bb5d308deac680360a9c29a1a7d44cfa10ee42ab45d7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//     OpenERC165\\n//          |\\n//     OpenERC721\\n//          |\\n//  OpenERC721Metadata \\u2014\\u2014 IERC721Metadata\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID) external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC721) returns (bool) {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Only once!\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mint(address to, string memory newTokenURI, uint256 tokenID) internal virtual override (OpenERC721) {\\n        _tokenURIs[tokenID] = newTokenURI;\\n\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenURIs[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x4ed70d32cdf2c8fea270fdb3533db9a00f801fbad0c10dd3a35e3beb26183638\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool public initialized;\\n    string public template;\\n    uint256 public version;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(initialized == false, \\\"Only once!\\\");\\n        initialized = true;\\n\\n        template = template_;\\n        version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0x3bff3260b6020f106db9ac32b7622fb6de576a63402ee19bfcdabf34eba358fd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |            |             |\\n//   OpenERC721    OpenERC173   OpenERC2981\\n//      (NFT)      (Ownable)   (RoyaltyInfo)\\n//        |            |             |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenMarketable \\u2014\\u2014 IOpenMarketable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\n\\nabstract contract OpenMarketable is IOpenMarketable, OpenERC721, OpenERC173, OpenERC2981 {\\n    mapping(uint256 => uint256) public tokenPrice;\\n    uint256 public defaultPrice;\\n\\n    receive() external payable override (IOpenMarketable) {}\\n\\n    function setTokenPrice(uint256 tokenID) external override (IOpenMarketable) {\\n        setTokenPrice(tokenID, defaultPrice);\\n    }\\n\\n    /// @notice SET default royalty configuration\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setDefaultRoyalty(address receiver, uint96 fee) public override (IOpenMarketable) onlyOwner {\\n        _setDefaultRoyalty(receiver, fee);\\n    }\\n\\n    function setDefaultPrice(uint256 price) public override (IOpenMarketable) onlyOwner {\\n        _setDefaultPrice(price);\\n    }\\n\\n    /// @notice SET token royalty configuration\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenPrice(tokenID, price);\\n    }\\n\\n    function getDefaultRoyaltyInfo()\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (address receiver, uint96 fraction)\\n    {\\n        receiver = _defaultRoyaltyInfo.receiver;\\n        fraction = _defaultRoyaltyInfo.fraction;\\n    }\\n\\n    function getTokenRoyaltyInfo(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (address receiver, uint96 fraction)\\n    {\\n        receiver = _tokenRoyaltyInfo[tokenID].receiver;\\n        fraction = _tokenRoyaltyInfo[tokenID].fraction;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721, OpenERC173, OpenERC2981)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenMarketable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID) internal virtual override (OpenERC721) {\\n        super._mint(to, tokenURI, tokenID);\\n\\n        _pay(tokenID, defaultPrice, to, owner());\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenRoyaltyInfo[tokenID];\\n        delete tokenPrice[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual override (OpenERC721) {\\n        /// Transfer: pay token price (including royalties) to previous token owner (and royalty receiver)\\n        _pay(tokenID, tokenPrice[tokenID], to, ownerOf(tokenID));\\n        delete tokenPrice[tokenID];\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _setDefaultRoyalty(address receiver, uint96 fee) internal lessThanMaxFee(fee) {\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, fee);\\n\\n        emit SetDefaultRoyalty(receiver, fee);\\n    }\\n\\n    function _setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) internal lessThanMaxFee(fee) {\\n        _tokenRoyaltyInfo[tokenID] = RoyaltyInfo(receiver, fee);\\n\\n        emit SetTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function _setTokenPrice(uint256 tokenID, uint256 price) internal notTooExpensive(price) {\\n        tokenPrice[tokenID] = price;\\n\\n        emit SetTokenPrice(tokenID, price);\\n    }\\n\\n    function _setDefaultPrice(uint256 price) internal notTooExpensive(price) {\\n        defaultPrice = price;\\n\\n        emit SetDefaultPrice(price);\\n    }\\n\\n    function _pay(uint256 tokenID, uint256 price, address payer, address payee) private {\\n        uint256 unspent = msg.value;\\n\\n        if (price > 0) {\\n            /// Require enough value sent\\n            require(unspent >= price, \\\"Not enough funds\\\");\\n\\n            (address receiver, uint256 royalties) = royaltyInfo(tokenID, price);\\n\\n            require(royalties <= price, \\\"Invalid royalties\\\");\\n            uint256 paid = price - royalties;\\n\\n            /// Transfer amount to previous payee\\n            if (paid > 0) {\\n                payable(payee).transfer(paid);\\n                unspent = unspent - paid;\\n            }\\n\\n            /// Transfer royalties to receiver\\n            if (royalties > 0) {\\n                payable(receiver).transfer(royalties);\\n                unspent = unspent - royalties;\\n            }\\n\\n            emit Pay(tokenID, price, payer, payee);\\n        }\\n\\n        /// Transfer back unspent funds to payer\\n        if (unspent > 0) {\\n            payable(payer).transfer(unspent);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa13a13208ae5fb84b585b565d745fda944774830bc42c6902e24bfae07997199\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                       |             |              |\\n//   OpenERC721                            OpenERC2981    OpenERC173    OpenCloneable\\n//     (NFT)                              (RoyaltyInfo)    (ownable)          |\\n//       |                                        |            |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014   |     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014              |\\n//       |                        |           |   |     |      |              |\\n//  OpenERC721Metadata  OpenERC721Enumerable  |   \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |              |\\n//       |                        |           |   |            |              |\\n//       |                        |      OpenMarketable   OpenPauseable       |\\n//       |                        |             |              |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs \\u2014\\u2014 IOpenNFTs\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenCloneable.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenNFTs is IOpenNFTs, OpenERC721Metadata, OpenERC721Enumerable, OpenMarketable, OpenPauseable, OpenCloneable {\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext = 1;\\n\\n    /// @notice onlyMinter, by default only owner can mint, can be overriden\\n    modifier onlyMinter() virtual {\\n        require(msg.sender == owner(), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID) external override (IOpenNFTs) onlyTokenOwnerOrApproved(tokenID) {\\n        _burn(tokenID);\\n    }\\n\\n    /// @notice withdraw token otherwise eth\\n    function withdraw(address token) external override (IOpenNFTs) onlyOwner {\\n        if ((token.code.length != 0) && (IERC165(token).supportsInterface(type(IERC20).interfaceId))) {\\n            require(IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this))), \\\"Withdraw failed\\\");\\n        } else {\\n            payable(msg.sender).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function mint(address minter, string memory tokenURI)\\n        public\\n        override (IOpenNFTs)\\n        onlyMinter\\n        returns (uint256 tokenID)\\n    {\\n        tokenID = tokenIdNext++;\\n        _mint(minter, tokenURI, tokenID);\\n    }\\n\\n    /// @notice test if this interface is supported\\n    /// @param interfaceId interfaceId to test\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenMarketable, OpenERC721Metadata, OpenERC721Enumerable, OpenCloneable, OpenPauseable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenNFTs).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice _initialize\\n    /// @param name_ name of the NFT Collection\\n    /// @param symbol_ symbol of the NFT Collection\\n    /// @param owner_ owner of the NFT Collection\\n    // solhint-disable-next-line comprehensive-interface\\n    function _initialize(string memory name_, string memory symbol_, address owner_) internal {\\n        OpenCloneable._initialize(\\\"OpenNFTs\\\", 4);\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n    }\\n\\n    /// @notice _mint\\n    /// @param minter minter address\\n    /// @param tokenURI token metdata URI\\n    /// @param tokenID token ID\\n    function _mint(address minter, string memory tokenURI, uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable) {\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        override (OpenERC721, OpenMarketable, OpenERC721Enumerable)\\n    {\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x6ee7d2aea2e7433f36dea3687b161791dc724d6800e82e5be815ef0a0e411ade\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenPauseable \\u2013\\u2013 IOpenPauseable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override (IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override (IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x71fb04f889726f053bde9ee895700d9cc1a733d92fed1b9f16f7ca489d62f42b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8e9873d8f917c23b44f5f9deeee491e6065f85e027c521dccdb4d45b77bd35a3\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xfc768e62494276e5b66e370450ffd3f49e2fe59ff574110358b053187b48e2d1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb4b1f394404b2829e612e30e8104fe178e45c3f474d1ce295608a79a8e4b6505\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcbf9ae5850881b6d045567efd715fde56b64d2b5fc1e7055b5468eae00e2b4e9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60960fce3f83de59f194ea6c52cf1328df07f00bb26ef5e8046de87d1b07e69f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(uint256 tokenID, uint256 price, address payer, address payee);\\n\\n    receive() external payable;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function defaultPrice() external view returns (uint256 defPrice);\\n\\n    function tokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getDefaultRoyaltyInfo() external view returns (address receiver, uint96 fraction);\\n\\n    function getTokenRoyaltyInfo(uint256 tokenID) external view returns (address receiver, uint96 fraction);\\n}\\n\",\"keccak256\":\"0x0cc924127626eeab1de8169e364084d243b312583429eec9fedb3e66dabcb741\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function withdraw(address token) external;\\n}\\n\",\"keccak256\":\"0xd6db9618029d25ceb6fe3d8d2fa5823502c336b25316f148b912c3f716a67a53\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.old.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 defaultPrice,\\n        address receiver,\\n        uint96 fee,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function parent() external view returns (address);\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e43e18f3338f0e49664e6cff3dd76476c1a9437fdb8fc72506212931dbce5e6\",\"license\":\"MIT\"},\"contracts/next/OpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                                         |               |\\n//   OpenERC721                                               OpenERC173     OpenCloneable\\n//     (NFT)                                                   (ownable)           |\\n//       |                                                         |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014               |\\n//       |                        |                  |      |      |               |\\n//  OpenERC721Metadata  OpenERC721Enumerable   OpenERC2981  |      |               |\\n//       |                        |           (RoyaltyInfo) |      |               |\\n//       |                        |                  |      |      |               |\\n//       |                        |                  \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |               |\\n//       |                        |                  |             |               |\\n//       |                        |            OpenMarketable OpenPauseable        |\\n//       |                        |                  |             |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs\\n//       |\\n//   OpenNFTsV4 \\u2014\\u2014 IOpenNFTsV4\\n//\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV4.sol\\\";\\nimport {IOpenNFTs as IOpenNFTsOld} from \\\"../interfaces/IOpenNFTs.old.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenNFTsV4 is IOpenNFTsV4, OpenNFTs {\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyMinter() override(OpenNFTs) {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    function buy(uint256 tokenID) external payable override(IOpenNFTsV4) {\\n        require(_exists(tokenID), \\\"NFT doesn't exists\\\");\\n\\n        /// Get token price\\n        uint256 price = tokenPrice[tokenID];\\n\\n        /// Require price defined\\n        require(price > 0, \\\"Not to sell\\\");\\n\\n        /// Require enough value sent\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n\\n        /// Get previous token owner\\n        address from = ownerOf(tokenID);\\n        assert(from != address(0));\\n        require(from != msg.sender, \\\"Already token owner!\\\");\\n\\n        /// Transfer token\\n        this.safeTransferFrom{value: msg.value}(from, msg.sender, tokenID, \\\"\\\");\\n\\n        /// Reset token price (to be eventualy defined by new owner)\\n        delete tokenPrice[tokenID];\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 defaultPrice_,\\n        address receiver_,\\n        uint96 fee_,\\n        bool[] memory options\\n    ) external override(IOpenNFTsV4) {\\n        OpenNFTs._initialize(name_, symbol_, owner_);\\n        open = options[0];\\n\\n        OpenMarketable._setDefaultPrice(defaultPrice_);\\n        OpenMarketable._setDefaultRoyalty(receiver_, fee_);\\n    }\\n\\n    function mint(string memory tokenURI) external override(IOpenNFTsV4) returns (uint256 tokenID) {\\n        tokenID = mint(msg.sender, tokenURI, 0, address(0), 0);\\n    }\\n\\n    function parent() external view override(IOpenNFTsV4) returns (address parent_) {\\n        // eip1167 deployed code = 45 bytes = 10 bytes + 20 bytes address + 15 bytes\\n        // extract bytes 10 to 30: shift 2 bytes (16 bits) then truncate to address 20 bytes (uint160)\\n        return\\n            (address(this).code.length == 45)\\n                ? address(uint160(uint256(bytes32(address(this).code)) >> 16))\\n                : address(0);\\n    }\\n\\n    function mint(\\n        address minter_,\\n        string memory tokenURI_,\\n        uint256 tokenPrice_,\\n        address receiver_,\\n        uint96 fee_\\n    ) public payable override(IOpenNFTsV4) onlyMinter onlyWhenNotPaused returns (uint256 tokenID) {\\n        tokenID = OpenNFTs.mint(minter_, tokenURI_);\\n\\n        OpenMarketable._setTokenPrice(tokenID, tokenPrice_);\\n        OpenMarketable._setTokenRoyalty(tokenID, receiver_, fee_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenNFTs) returns (bool) {\\n        return\\n            interfaceId == type(IOpenNFTsV4).interfaceId ||\\n            interfaceId == type(IOpenNFTsOld).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5c546a66eaf2eff649e32d371ee65ae9436bde41982a120d3ac4c58be16261e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160145534801561001557600080fd5b50613107806100256000396000f3fe6080604052600436106102605760003560e01c80636d3c7ec511610144578063c87b56dd116100b6578063e69e04b31161007a578063e69e04b314610741578063e97186ef14610757578063e985e9c514610777578063eb685c47146107c0578063f2fde38b146107e0578063fcfff16f1461080057600080fd5b8063c87b56dd146106a1578063d0def521146106c1578063d4ddce8a146106e1578063d85d3d271461070e578063d96a094a1461072e57600080fd5b80638da5cb5b116101085780638da5cb5b146105f157806395d89b4114610614578063a22cb46514610629578063b24f2d3914610649578063b88d4fde14610679578063c4ae31681461068c57600080fd5b80636d3c7ec5146105165780636d3ed2aa146105365780636f2ddd93146105a657806370a08231146105bb5780638bbf58b3146105db57600080fd5b806342842e0e116101dd57806354fd4d50116101a157806354fd4d50146104735780635944c753146104895780635c975abb146104a957806360f96a8f146104c15780636352211e146104d65780636a61e5fc146104f657600080fd5b806342842e0e146103ed57806342966c68146104005780634472167b146104205780634f6ccce71461043357806351cff8d91461045357600080fd5b8063158ef93e11610224578063158ef93e1461033d57806318160ddd1461035c57806323b872dd1461037b5780632a55205a1461038e5780632f745c59146103cd57600080fd5b806301ffc9a71461026c57806304634d8d146102a157806306fdde03146102c3578063081812fc146102e5578063095ea7b31461031d57600080fd5b3661026757005b600080fd5b34801561027857600080fd5b5061028c6102873660046128cd565b61081a565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004612918565b61085f565b005b3480156102cf57600080fd5b506102d86108a5565b6040516102989190612998565b3480156102f157600080fd5b506103056103003660046129ab565b610937565b6040516001600160a01b039091168152602001610298565b34801561032957600080fd5b506102c16103383660046129c4565b6109aa565b34801561034957600080fd5b5060115461028c90610100900460ff1681565b34801561036857600080fd5b506008545b604051908152602001610298565b6102c16103893660046129ee565b610a6e565b34801561039a57600080fd5b506103ae6103a9366004612a2a565b610a7e565b604080516001600160a01b039093168352602083019190915201610298565b3480156103d957600080fd5b5061036d6103e83660046129c4565b610b4c565b6102c16103fb3660046129ee565b610bd3565b34801561040c57600080fd5b506102c161041b3660046129ab565b610bee565b61036d61042e366004612b0b565b610c1e565b34801561043f57600080fd5b5061036d61044e3660046129ab565b610ce2565b34801561045f57600080fd5b506102c161046e366004612b84565b610d4c565b34801561047f57600080fd5b5061036d60135481565b34801561049557600080fd5b506102c16104a4366004612b9f565b610f7e565b3480156104b557600080fd5b5060115460ff1661028c565b3480156104cd57600080fd5b50610305610fb6565b3480156104e257600080fd5b506103056104f13660046129ab565b610fff565b34801561050257600080fd5b506102c16105113660046129ab565b61105c565b34801561052257600080fd5b506102c16105313660046129ab565b611068565b34801561054257600080fd5b5061057f6105513660046129ab565b6000908152600e60205260409020546001600160a01b03811691600160a01b9091046001600160601b031690565b604080516001600160a01b0390931683526001600160601b03909116602083015201610298565b3480156105b257600080fd5b506102d86110a0565b3480156105c757600080fd5b5061036d6105d6366004612b84565b61112e565b3480156105e757600080fd5b5061036d60145481565b3480156105fd57600080fd5b50600c5461010090046001600160a01b0316610305565b34801561062057600080fd5b506102d8611199565b34801561063557600080fd5b506102c1610644366004612be9565b6111a8565b34801561065557600080fd5b50600d546001600160a01b03811690600160a01b90046001600160601b031661057f565b6102c1610687366004612c20565b611214565b34801561069857600080fd5b506102c161126c565b3480156106ad57600080fd5b506102d86106bc3660046129ab565b6112ad565b3480156106cd57600080fd5b5061036d6106dc366004612c9c565b61134f565b3480156106ed57600080fd5b5061036d6106fc3660046129ab565b600f6020526000908152604090205481565b34801561071a57600080fd5b5061036d610729366004612cea565b6113cd565b6102c161073c3660046129ab565b6113de565b34801561074d57600080fd5b5061036d60105481565b34801561076357600080fd5b506102c1610772366004612d1f565b6115c0565b34801561078357600080fd5b5061028c610792366004612e54565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b3480156107cc57600080fd5b506102c16107db366004612a2a565b61161b565b3480156107ec57600080fd5b506102c16107fb366004612b84565b61164c565b34801561080c57600080fd5b5060155461028c9060ff1681565b60006001600160e01b031982166330323f1960e01b148061084a57506001600160e01b0319821662f7235960e21b145b80610859575061085982611684565b92915050565b600c5461010090046001600160a01b031633146108975760405162461bcd60e51b815260040161088e90612e7e565b60405180910390fd5b6108a182826116a9565b5050565b6060600580546108b490612ea1565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090612ea1565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b5050505050905090565b6000818152602081905260408120546001600160a01b031661098e5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b604482015260640161088e565b506000908152600260205260409020546001600160a01b031690565b6109b43382611771565b610a005760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f7200000000604482015260640161088e565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a3582610fff565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610a798383836117cc565b505050565b60008082600160801b8110610aa55760405162461bcd60e51b815260040161088e90612edc565b6000858152600e60209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610b19575060408051808201909152600d546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015161271090610b35906001600160601b031687612f19565b610b3f9190612f38565b9051969095509350505050565b6000610b578361112e565b8210610b965760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161088e565b6001600160a01b0383166000908152600960205260409020805483908110610bc057610bc0612f5a565b9060005260206000200154905092915050565b610a7983838360405180602001604052806000815250611a02565b80610bf93382611a5a565b610c155760405162461bcd60e51b815260040161088e90612f70565b6108a182611a91565b60155460009060ff1680610c425750600c546001600160a01b036101009091041633145b610c7b5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b604482015260640161088e565b60115460ff1615610cb85760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b604482015260640161088e565b610cc2868661134f565b9050610cce8185611a9a565b610cd9818484611b06565b95945050505050565b6008546000908210610d275760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161088e565b60088281548110610d3a57610d3a612f5a565b90600052602060002001549050919050565b600c5461010090046001600160a01b03163314610d7b5760405162461bcd60e51b815260040161088e90612e7e565b6001600160a01b0381163b15801590610e0d57506040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190612fa7565b15610f52576040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190612fc4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190612fa7565b610f4f5760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b604482015260640161088e565b50565b60405133904780156108fc02916000818181858888f193505050501580156108a1573d6000803e3d6000fd5b82610f893382611a5a565b610fa55760405162461bcd60e51b815260040161088e90612f70565b610fb0848484611b06565b50505050565b6000602d303b14610fc75750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c610ff890612fdd565b901c905090565b6000818152602081905260409020546001600160a01b0316806110575760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b604482015260640161088e565b919050565b610f4f8160105461161b565b600c5461010090046001600160a01b031633146110975760405162461bcd60e51b815260040161088e90612e7e565b610f4f81611beb565b601280546110ad90612ea1565b80601f01602080910402602001604051908101604052809291908181526020018280546110d990612ea1565b80156111265780601f106110fb57610100808354040283529160200191611126565b820191906000526020600020905b81548152906001019060200180831161110957829003601f168201915b505050505081565b60006001600160a01b03821661117d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b604482015260640161088e565b506001600160a01b031660009081526001602052604090205490565b6060600680546108b490612ea1565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61121f8484846117cc565b61122b84848484611c4b565b610fb05760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b604482015260640161088e565b600c5461010090046001600160a01b0316331461129b5760405162461bcd60e51b815260040161088e90612e7e565b6011546112ab9060ff1615611cf9565b565b60008181526007602052604090208054606091906112ca90612ea1565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690612ea1565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b50505050509050919050565b60155460009060ff16806113735750600c546001600160a01b036101009091041633145b6113ac5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b604482015260640161088e565b601480549060006113bc83613001565b919050559050610859838383611d3e565b600061085933836000806000610c1e565b6000818152602081905260409020546001600160a01b03166114375760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b604482015260640161088e565b6000818152600f6020526040902054806114815760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b604482015260640161088e565b803410156114c45760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b604482015260640161088e565b60006114cf83610fff565b90506001600160a01b0381166114e7576114e761301c565b6001600160a01b0381163314156115375760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b604482015260640161088e565b604051635c46a7ef60e11b81526001600160a01b0382166004820152336024820152604481018490526080606482015260006084820152309063b88d4fde90349060a4016000604051808303818588803b15801561159457600080fd5b505af11580156115a8573d6000803e3d6000fd5b50505060009485525050600f60205250506040812055565b6115cb878787611d49565b806000815181106115de576115de612f5a565b6020026020010151601560006101000a81548160ff02191690831515021790555061160884611beb565b61161283836116a9565b50505050505050565b816116263382611a5a565b6116425760405162461bcd60e51b815260040161088e90612f70565b610a798383611a9a565b600c5461010090046001600160a01b0316331461167b5760405162461bcd60e51b815260040161088e90612e7e565b610f4f81611d87565b60006001600160e01b03198216630c38761960e41b1480610859575061085982611de1565b6001600160601b0381166127108111156117005760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b604482015260640161088e565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b81028217600d558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b60008061177d83610fff565b9050836001600160a01b0316816001600160a01b031614806117c457506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b806117d73382611a5a565b6117f35760405162461bcd60e51b815260040161088e90612f70565b6117fc82610fff565b6001600160a01b0316846001600160a01b03161461184d5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b604482015260640161088e565b6001600160a01b0384166118a35760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f2061646472657373000000000000604482015260640161088e565b6001600160a01b0383166118f95760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f20616464726573730000000000000000604482015260640161088e565b611904848484611e06565b600082815260026020526040902080546001600160a01b03191690556001600160a01b03848116908416146119bb576001600160a01b0384166000908152600160208190526040822080549192909161195e908490613032565b90915550506001600160a01b0383166000908152600160208190526040822080549192909161198e908490613049565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b611a0d8484846117cc565b611a1984848484611c4b565b610fb05760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b604482015260640161088e565b6000611a668383611771565b80611a8a5750826001600160a01b0316611a7f83610937565b6001600160a01b0316145b9392505050565b610f4f81611e11565b80600160801b8110611abe5760405162461bcd60e51b815260040161088e90612edc565b6000838152600f602090815260409182902084905581518581529081018490527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b9101611764565b6001600160601b038116612710811115611b5d5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b604482015260640161088e565b6040805180820182526001600160a01b038581168083526001600160601b03868116602080860182815260008c8152600e835288902096519051909316600160a01b029290941691909117909355835188815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600160405180910390a150505050565b80600160801b8110611c0f5760405162461bcd60e51b815260040161088e90612edc565b60108290556040518281527f9f7a6492db3843bc01c0adb23cd27be964155c1d45c566f2ee32f28faf4eb6059060200160405180910390a15050565b60006001600160a01b0384163b1580610cd95750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611c939033908a9089908990600401613061565b602060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce5919061309e565b6001600160e01b0319161495945050505050565b6011805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610a79838383611e36565b611d74604051806040016040528060088152602001674f70656e4e46547360c01b8152506004611e66565b611d7e8383611ed4565b610a7981611f48565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b03198216632e5e69fd60e01b1480610859575061085982611fa5565b610a79838383611fca565b6000818152600e60209081526040808320839055600f909152812055610f4f81612003565b611e418383836120d5565b610a798160105485611e61600c546001600160a01b036101009091041690565b61212e565b601154610100900460ff1615611eab5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b604482015260640161088e565b6011805461ff0019166101001790558151611ecd9060129060208501906127e8565b5060135550565b60045460ff1615611f145760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b604482015260640161088e565b6004805460ff191660011790558151611f349060059060208501906127e8565b508051610a799060069060208401906127e8565b600c5460ff1615611f8f5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b604482015260640161088e565b600c805460ff19166001179055610f4f81611d87565b60006001600160e01b031982166398396bd360e01b1480610859575061085982612307565b6000818152600f6020526040902054611fe990829084611e6183610fff565b6000818152600f6020526040812055610a7983838361232c565b600061200e82610fff565b905061201a8183612340565b6000828152600b602052604081205460085490919061203b90600190613032565b905060006008828154811061205257612052612f5a565b6000918252602080832090910154808352600b90915260408083208690558783528220919091556008805491925082918590811061209257612092612f5a565b60009182526020909120015560088054806120af576120af6130bb565b600190038181906000526020600020016000905590556120ce8561244e565b5050505050565b6120df838261246e565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610a798383836124ac565b3483156122c357838110156121785760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b604482015260640161088e565b6000806121858787610a7e565b91509150858111156121cd5760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420726f79616c7469657360781b604482015260640161088e565b60006121d98288613032565b90508015612225576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015612217573d6000803e3d6000fd5b506122228185613032565b93505b811561226f576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015612261573d6000803e3d6000fd5b5061226c8285613032565b93505b60408051898152602081018990526001600160a01b03888116828401528716606082015290517f3914c8962f5e7241220aedc853d15ae456e87f9f156489c7d0d1f682e69f98ce9181900360800190a15050505b80156120ce576040516001600160a01b0384169082156108fc029083906000818181858888f193505050501580156122ff573d6000803e3d6000fd5b505050505050565b60006001600160e01b03198216632e103c0560e11b14806108595750610859826124d7565b6123368382612340565b610a79828261246e565b6000818152600a602052604081205490600161235b8561112e565b6123659190613032565b90508082146123fc576001600160a01b038416600090815260096020526040812080548390811061239857612398612f5a565b906000526020600020015490508060096000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106123dc576123dc612f5a565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b038716835260099091529020805480612432576124326130bb565b6001900381819060005260206000200160009055905550505050565b60008181526007602052604081206124659161286c565b610f4f816124fc565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b600081815260076020908152604090912083516124cb928501906127e8565b50610a798383836125c8565b600063152a902d60e11b6001600160e01b031983161480610859575061085982612753565b600061250782610fff565b6001600160a01b03811660009081526001602052604090205490915061252f5761252f61301c565b6001600160a01b0381166000908152600160208190526040822080549192909161255a908490613032565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166126155760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b604482015260640161088e565b6000818152602081905260409020546001600160a01b0316156126715760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b604482015260640161088e565b6001600160a01b0383166000908152600160208190526040822080549192909161269c908490613049565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46127126000848360405180602001604052806000815250611c4b565b610a795760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b604482015260640161088e565b60006307f5828d60e41b6001600160e01b031983161480610859575061085982600063780e9d6360e01b6001600160e01b0319831614806108595750610859826000635b5e139f60e01b6001600160e01b03198316148061085957506108598260006380ac58cd60e01b6001600160e01b03198316148061085957506001600160e01b031982166301ffc9a760e01b14610859565b8280546127f490612ea1565b90600052602060002090601f016020900481019282612816576000855561285c565b82601f1061282f57805160ff191683800117855561285c565b8280016001018555821561285c579182015b8281111561285c578251825591602001919060010190612841565b506128689291506128a2565b5090565b50805461287890612ea1565b6000825580601f10612888575050565b601f016020900490600052602060002090810190610f4f91905b5b8082111561286857600081556001016128a3565b6001600160e01b031981168114610f4f57600080fd5b6000602082840312156128df57600080fd5b8135611a8a816128b7565b80356001600160a01b038116811461105757600080fd5b80356001600160601b038116811461105757600080fd5b6000806040838503121561292b57600080fd5b612934836128ea565b915061294260208401612901565b90509250929050565b6000815180845260005b8181101561297157602081850181015186830182015201612955565b81811115612983576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611a8a602083018461294b565b6000602082840312156129bd57600080fd5b5035919050565b600080604083850312156129d757600080fd5b6129e0836128ea565b946020939093013593505050565b600080600060608486031215612a0357600080fd5b612a0c846128ea565b9250612a1a602085016128ea565b9150604084013590509250925092565b60008060408385031215612a3d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a8b57612a8b612a4c565b604052919050565b600067ffffffffffffffff831115612aad57612aad612a4c565b612ac0601f8401601f1916602001612a62565b9050828152838383011115612ad457600080fd5b828260208301376000602084830101529392505050565b600082601f830112612afc57600080fd5b611a8a83833560208501612a93565b600080600080600060a08688031215612b2357600080fd5b612b2c866128ea565b9450602086013567ffffffffffffffff811115612b4857600080fd5b612b5488828901612aeb565b94505060408601359250612b6a606087016128ea565b9150612b7860808701612901565b90509295509295909350565b600060208284031215612b9657600080fd5b611a8a826128ea565b600080600060608486031215612bb457600080fd5b83359250612bc4602085016128ea565b9150612bd260408501612901565b90509250925092565b8015158114610f4f57600080fd5b60008060408385031215612bfc57600080fd5b612c05836128ea565b91506020830135612c1581612bdb565b809150509250929050565b60008060008060808587031215612c3657600080fd5b612c3f856128ea565b9350612c4d602086016128ea565b925060408501359150606085013567ffffffffffffffff811115612c7057600080fd5b8501601f81018713612c8157600080fd5b612c9087823560208401612a93565b91505092959194509250565b60008060408385031215612caf57600080fd5b612cb8836128ea565b9150602083013567ffffffffffffffff811115612cd457600080fd5b612ce085828601612aeb565b9150509250929050565b600060208284031215612cfc57600080fd5b813567ffffffffffffffff811115612d1357600080fd5b6117c484828501612aeb565b600080600080600080600060e0888a031215612d3a57600080fd5b873567ffffffffffffffff80821115612d5257600080fd5b612d5e8b838c01612aeb565b985060209150818a013581811115612d7557600080fd5b612d818c828d01612aeb565b985050612d9060408b016128ea565b965060608a01359550612da560808b016128ea565b9450612db360a08b01612901565b935060c08a013581811115612dc757600080fd5b8a01601f81018c13612dd857600080fd5b803582811115612dea57612dea612a4c565b8060051b9250612dfb848401612a62565b818152928201840192848101908e851115612e1557600080fd5b928501925b84841015612e3f5783359250612e2f83612bdb565b8282529285019290850190612e1a565b80965050505050505092959891949750929550565b60008060408385031215612e6757600080fd5b612e70836128ea565b9150612942602084016128ea565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c90821680612eb557607f821691505b60208210811415612ed657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f3357612f33612f03565b500290565b600082612f5557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b600060208284031215612fb957600080fd5b8151611a8a81612bdb565b600060208284031215612fd657600080fd5b5051919050565b80516020808301519190811015612ed65760001960209190910360031b1b16919050565b600060001982141561301557613015612f03565b5060010190565b634e487b7160e01b600052600160045260246000fd5b60008282101561304457613044612f03565b500390565b6000821982111561305c5761305c612f03565b500190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906130949083018461294b565b9695505050505050565b6000602082840312156130b057600080fd5b8151611a8a816128b7565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220cef2ab49b49e9a1de6490c7a35341de85d5f16965fa25cf2a92e9448c1c654e364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102605760003560e01c80636d3c7ec511610144578063c87b56dd116100b6578063e69e04b31161007a578063e69e04b314610741578063e97186ef14610757578063e985e9c514610777578063eb685c47146107c0578063f2fde38b146107e0578063fcfff16f1461080057600080fd5b8063c87b56dd146106a1578063d0def521146106c1578063d4ddce8a146106e1578063d85d3d271461070e578063d96a094a1461072e57600080fd5b80638da5cb5b116101085780638da5cb5b146105f157806395d89b4114610614578063a22cb46514610629578063b24f2d3914610649578063b88d4fde14610679578063c4ae31681461068c57600080fd5b80636d3c7ec5146105165780636d3ed2aa146105365780636f2ddd93146105a657806370a08231146105bb5780638bbf58b3146105db57600080fd5b806342842e0e116101dd57806354fd4d50116101a157806354fd4d50146104735780635944c753146104895780635c975abb146104a957806360f96a8f146104c15780636352211e146104d65780636a61e5fc146104f657600080fd5b806342842e0e146103ed57806342966c68146104005780634472167b146104205780634f6ccce71461043357806351cff8d91461045357600080fd5b8063158ef93e11610224578063158ef93e1461033d57806318160ddd1461035c57806323b872dd1461037b5780632a55205a1461038e5780632f745c59146103cd57600080fd5b806301ffc9a71461026c57806304634d8d146102a157806306fdde03146102c3578063081812fc146102e5578063095ea7b31461031d57600080fd5b3661026757005b600080fd5b34801561027857600080fd5b5061028c6102873660046128cd565b61081a565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004612918565b61085f565b005b3480156102cf57600080fd5b506102d86108a5565b6040516102989190612998565b3480156102f157600080fd5b506103056103003660046129ab565b610937565b6040516001600160a01b039091168152602001610298565b34801561032957600080fd5b506102c16103383660046129c4565b6109aa565b34801561034957600080fd5b5060115461028c90610100900460ff1681565b34801561036857600080fd5b506008545b604051908152602001610298565b6102c16103893660046129ee565b610a6e565b34801561039a57600080fd5b506103ae6103a9366004612a2a565b610a7e565b604080516001600160a01b039093168352602083019190915201610298565b3480156103d957600080fd5b5061036d6103e83660046129c4565b610b4c565b6102c16103fb3660046129ee565b610bd3565b34801561040c57600080fd5b506102c161041b3660046129ab565b610bee565b61036d61042e366004612b0b565b610c1e565b34801561043f57600080fd5b5061036d61044e3660046129ab565b610ce2565b34801561045f57600080fd5b506102c161046e366004612b84565b610d4c565b34801561047f57600080fd5b5061036d60135481565b34801561049557600080fd5b506102c16104a4366004612b9f565b610f7e565b3480156104b557600080fd5b5060115460ff1661028c565b3480156104cd57600080fd5b50610305610fb6565b3480156104e257600080fd5b506103056104f13660046129ab565b610fff565b34801561050257600080fd5b506102c16105113660046129ab565b61105c565b34801561052257600080fd5b506102c16105313660046129ab565b611068565b34801561054257600080fd5b5061057f6105513660046129ab565b6000908152600e60205260409020546001600160a01b03811691600160a01b9091046001600160601b031690565b604080516001600160a01b0390931683526001600160601b03909116602083015201610298565b3480156105b257600080fd5b506102d86110a0565b3480156105c757600080fd5b5061036d6105d6366004612b84565b61112e565b3480156105e757600080fd5b5061036d60145481565b3480156105fd57600080fd5b50600c5461010090046001600160a01b0316610305565b34801561062057600080fd5b506102d8611199565b34801561063557600080fd5b506102c1610644366004612be9565b6111a8565b34801561065557600080fd5b50600d546001600160a01b03811690600160a01b90046001600160601b031661057f565b6102c1610687366004612c20565b611214565b34801561069857600080fd5b506102c161126c565b3480156106ad57600080fd5b506102d86106bc3660046129ab565b6112ad565b3480156106cd57600080fd5b5061036d6106dc366004612c9c565b61134f565b3480156106ed57600080fd5b5061036d6106fc3660046129ab565b600f6020526000908152604090205481565b34801561071a57600080fd5b5061036d610729366004612cea565b6113cd565b6102c161073c3660046129ab565b6113de565b34801561074d57600080fd5b5061036d60105481565b34801561076357600080fd5b506102c1610772366004612d1f565b6115c0565b34801561078357600080fd5b5061028c610792366004612e54565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b3480156107cc57600080fd5b506102c16107db366004612a2a565b61161b565b3480156107ec57600080fd5b506102c16107fb366004612b84565b61164c565b34801561080c57600080fd5b5060155461028c9060ff1681565b60006001600160e01b031982166330323f1960e01b148061084a57506001600160e01b0319821662f7235960e21b145b80610859575061085982611684565b92915050565b600c5461010090046001600160a01b031633146108975760405162461bcd60e51b815260040161088e90612e7e565b60405180910390fd5b6108a182826116a9565b5050565b6060600580546108b490612ea1565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090612ea1565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b5050505050905090565b6000818152602081905260408120546001600160a01b031661098e5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b604482015260640161088e565b506000908152600260205260409020546001600160a01b031690565b6109b43382611771565b610a005760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f7200000000604482015260640161088e565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a3582610fff565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610a798383836117cc565b505050565b60008082600160801b8110610aa55760405162461bcd60e51b815260040161088e90612edc565b6000858152600e60209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610b19575060408051808201909152600d546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015161271090610b35906001600160601b031687612f19565b610b3f9190612f38565b9051969095509350505050565b6000610b578361112e565b8210610b965760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161088e565b6001600160a01b0383166000908152600960205260409020805483908110610bc057610bc0612f5a565b9060005260206000200154905092915050565b610a7983838360405180602001604052806000815250611a02565b80610bf93382611a5a565b610c155760405162461bcd60e51b815260040161088e90612f70565b6108a182611a91565b60155460009060ff1680610c425750600c546001600160a01b036101009091041633145b610c7b5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b604482015260640161088e565b60115460ff1615610cb85760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b604482015260640161088e565b610cc2868661134f565b9050610cce8185611a9a565b610cd9818484611b06565b95945050505050565b6008546000908210610d275760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161088e565b60088281548110610d3a57610d3a612f5a565b90600052602060002001549050919050565b600c5461010090046001600160a01b03163314610d7b5760405162461bcd60e51b815260040161088e90612e7e565b6001600160a01b0381163b15801590610e0d57506040516301ffc9a760e01b81526336372b0760e01b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190612fa7565b15610f52576040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b158015610e5b57600080fd5b505afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190612fc4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610ed957600080fd5b505af1158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f119190612fa7565b610f4f5760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b604482015260640161088e565b50565b60405133904780156108fc02916000818181858888f193505050501580156108a1573d6000803e3d6000fd5b82610f893382611a5a565b610fa55760405162461bcd60e51b815260040161088e90612f70565b610fb0848484611b06565b50505050565b6000602d303b14610fc75750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c610ff890612fdd565b901c905090565b6000818152602081905260409020546001600160a01b0316806110575760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b604482015260640161088e565b919050565b610f4f8160105461161b565b600c5461010090046001600160a01b031633146110975760405162461bcd60e51b815260040161088e90612e7e565b610f4f81611beb565b601280546110ad90612ea1565b80601f01602080910402602001604051908101604052809291908181526020018280546110d990612ea1565b80156111265780601f106110fb57610100808354040283529160200191611126565b820191906000526020600020905b81548152906001019060200180831161110957829003601f168201915b505050505081565b60006001600160a01b03821661117d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b604482015260640161088e565b506001600160a01b031660009081526001602052604090205490565b6060600680546108b490612ea1565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61121f8484846117cc565b61122b84848484611c4b565b610fb05760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b604482015260640161088e565b600c5461010090046001600160a01b0316331461129b5760405162461bcd60e51b815260040161088e90612e7e565b6011546112ab9060ff1615611cf9565b565b60008181526007602052604090208054606091906112ca90612ea1565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690612ea1565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b50505050509050919050565b60155460009060ff16806113735750600c546001600160a01b036101009091041633145b6113ac5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b604482015260640161088e565b601480549060006113bc83613001565b919050559050610859838383611d3e565b600061085933836000806000610c1e565b6000818152602081905260409020546001600160a01b03166114375760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b604482015260640161088e565b6000818152600f6020526040902054806114815760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b604482015260640161088e565b803410156114c45760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b604482015260640161088e565b60006114cf83610fff565b90506001600160a01b0381166114e7576114e761301c565b6001600160a01b0381163314156115375760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b604482015260640161088e565b604051635c46a7ef60e11b81526001600160a01b0382166004820152336024820152604481018490526080606482015260006084820152309063b88d4fde90349060a4016000604051808303818588803b15801561159457600080fd5b505af11580156115a8573d6000803e3d6000fd5b50505060009485525050600f60205250506040812055565b6115cb878787611d49565b806000815181106115de576115de612f5a565b6020026020010151601560006101000a81548160ff02191690831515021790555061160884611beb565b61161283836116a9565b50505050505050565b816116263382611a5a565b6116425760405162461bcd60e51b815260040161088e90612f70565b610a798383611a9a565b600c5461010090046001600160a01b0316331461167b5760405162461bcd60e51b815260040161088e90612e7e565b610f4f81611d87565b60006001600160e01b03198216630c38761960e41b1480610859575061085982611de1565b6001600160601b0381166127108111156117005760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b604482015260640161088e565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b81028217600d558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b60008061177d83610fff565b9050836001600160a01b0316816001600160a01b031614806117c457506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b806117d73382611a5a565b6117f35760405162461bcd60e51b815260040161088e90612f70565b6117fc82610fff565b6001600160a01b0316846001600160a01b03161461184d5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b604482015260640161088e565b6001600160a01b0384166118a35760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f2061646472657373000000000000604482015260640161088e565b6001600160a01b0383166118f95760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f20616464726573730000000000000000604482015260640161088e565b611904848484611e06565b600082815260026020526040902080546001600160a01b03191690556001600160a01b03848116908416146119bb576001600160a01b0384166000908152600160208190526040822080549192909161195e908490613032565b90915550506001600160a01b0383166000908152600160208190526040822080549192909161198e908490613049565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b611a0d8484846117cc565b611a1984848484611c4b565b610fb05760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b604482015260640161088e565b6000611a668383611771565b80611a8a5750826001600160a01b0316611a7f83610937565b6001600160a01b0316145b9392505050565b610f4f81611e11565b80600160801b8110611abe5760405162461bcd60e51b815260040161088e90612edc565b6000838152600f602090815260409182902084905581518581529081018490527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b9101611764565b6001600160601b038116612710811115611b5d5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b604482015260640161088e565b6040805180820182526001600160a01b038581168083526001600160601b03868116602080860182815260008c8152600e835288902096519051909316600160a01b029290941691909117909355835188815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600160405180910390a150505050565b80600160801b8110611c0f5760405162461bcd60e51b815260040161088e90612edc565b60108290556040518281527f9f7a6492db3843bc01c0adb23cd27be964155c1d45c566f2ee32f28faf4eb6059060200160405180910390a15050565b60006001600160a01b0384163b1580610cd95750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611c939033908a9089908990600401613061565b602060405180830381600087803b158015611cad57600080fd5b505af1158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce5919061309e565b6001600160e01b0319161495945050505050565b6011805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610a79838383611e36565b611d74604051806040016040528060088152602001674f70656e4e46547360c01b8152506004611e66565b611d7e8383611ed4565b610a7981611f48565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b03198216632e5e69fd60e01b1480610859575061085982611fa5565b610a79838383611fca565b6000818152600e60209081526040808320839055600f909152812055610f4f81612003565b611e418383836120d5565b610a798160105485611e61600c546001600160a01b036101009091041690565b61212e565b601154610100900460ff1615611eab5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b604482015260640161088e565b6011805461ff0019166101001790558151611ecd9060129060208501906127e8565b5060135550565b60045460ff1615611f145760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b604482015260640161088e565b6004805460ff191660011790558151611f349060059060208501906127e8565b508051610a799060069060208401906127e8565b600c5460ff1615611f8f5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b604482015260640161088e565b600c805460ff19166001179055610f4f81611d87565b60006001600160e01b031982166398396bd360e01b1480610859575061085982612307565b6000818152600f6020526040902054611fe990829084611e6183610fff565b6000818152600f6020526040812055610a7983838361232c565b600061200e82610fff565b905061201a8183612340565b6000828152600b602052604081205460085490919061203b90600190613032565b905060006008828154811061205257612052612f5a565b6000918252602080832090910154808352600b90915260408083208690558783528220919091556008805491925082918590811061209257612092612f5a565b60009182526020909120015560088054806120af576120af6130bb565b600190038181906000526020600020016000905590556120ce8561244e565b5050505050565b6120df838261246e565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610a798383836124ac565b3483156122c357838110156121785760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b604482015260640161088e565b6000806121858787610a7e565b91509150858111156121cd5760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420726f79616c7469657360781b604482015260640161088e565b60006121d98288613032565b90508015612225576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015612217573d6000803e3d6000fd5b506122228185613032565b93505b811561226f576040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015612261573d6000803e3d6000fd5b5061226c8285613032565b93505b60408051898152602081018990526001600160a01b03888116828401528716606082015290517f3914c8962f5e7241220aedc853d15ae456e87f9f156489c7d0d1f682e69f98ce9181900360800190a15050505b80156120ce576040516001600160a01b0384169082156108fc029083906000818181858888f193505050501580156122ff573d6000803e3d6000fd5b505050505050565b60006001600160e01b03198216632e103c0560e11b14806108595750610859826124d7565b6123368382612340565b610a79828261246e565b6000818152600a602052604081205490600161235b8561112e565b6123659190613032565b90508082146123fc576001600160a01b038416600090815260096020526040812080548390811061239857612398612f5a565b906000526020600020015490508060096000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106123dc576123dc612f5a565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b038716835260099091529020805480612432576124326130bb565b6001900381819060005260206000200160009055905550505050565b60008181526007602052604081206124659161286c565b610f4f816124fc565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b600081815260076020908152604090912083516124cb928501906127e8565b50610a798383836125c8565b600063152a902d60e11b6001600160e01b031983161480610859575061085982612753565b600061250782610fff565b6001600160a01b03811660009081526001602052604090205490915061252f5761252f61301c565b6001600160a01b0381166000908152600160208190526040822080549192909161255a908490613032565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166126155760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b604482015260640161088e565b6000818152602081905260409020546001600160a01b0316156126715760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b604482015260640161088e565b6001600160a01b0383166000908152600160208190526040822080549192909161269c908490613049565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46127126000848360405180602001604052806000815250611c4b565b610a795760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b604482015260640161088e565b60006307f5828d60e41b6001600160e01b031983161480610859575061085982600063780e9d6360e01b6001600160e01b0319831614806108595750610859826000635b5e139f60e01b6001600160e01b03198316148061085957506108598260006380ac58cd60e01b6001600160e01b03198316148061085957506001600160e01b031982166301ffc9a760e01b14610859565b8280546127f490612ea1565b90600052602060002090601f016020900481019282612816576000855561285c565b82601f1061282f57805160ff191683800117855561285c565b8280016001018555821561285c579182015b8281111561285c578251825591602001919060010190612841565b506128689291506128a2565b5090565b50805461287890612ea1565b6000825580601f10612888575050565b601f016020900490600052602060002090810190610f4f91905b5b8082111561286857600081556001016128a3565b6001600160e01b031981168114610f4f57600080fd5b6000602082840312156128df57600080fd5b8135611a8a816128b7565b80356001600160a01b038116811461105757600080fd5b80356001600160601b038116811461105757600080fd5b6000806040838503121561292b57600080fd5b612934836128ea565b915061294260208401612901565b90509250929050565b6000815180845260005b8181101561297157602081850181015186830182015201612955565b81811115612983576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611a8a602083018461294b565b6000602082840312156129bd57600080fd5b5035919050565b600080604083850312156129d757600080fd5b6129e0836128ea565b946020939093013593505050565b600080600060608486031215612a0357600080fd5b612a0c846128ea565b9250612a1a602085016128ea565b9150604084013590509250925092565b60008060408385031215612a3d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612a8b57612a8b612a4c565b604052919050565b600067ffffffffffffffff831115612aad57612aad612a4c565b612ac0601f8401601f1916602001612a62565b9050828152838383011115612ad457600080fd5b828260208301376000602084830101529392505050565b600082601f830112612afc57600080fd5b611a8a83833560208501612a93565b600080600080600060a08688031215612b2357600080fd5b612b2c866128ea565b9450602086013567ffffffffffffffff811115612b4857600080fd5b612b5488828901612aeb565b94505060408601359250612b6a606087016128ea565b9150612b7860808701612901565b90509295509295909350565b600060208284031215612b9657600080fd5b611a8a826128ea565b600080600060608486031215612bb457600080fd5b83359250612bc4602085016128ea565b9150612bd260408501612901565b90509250925092565b8015158114610f4f57600080fd5b60008060408385031215612bfc57600080fd5b612c05836128ea565b91506020830135612c1581612bdb565b809150509250929050565b60008060008060808587031215612c3657600080fd5b612c3f856128ea565b9350612c4d602086016128ea565b925060408501359150606085013567ffffffffffffffff811115612c7057600080fd5b8501601f81018713612c8157600080fd5b612c9087823560208401612a93565b91505092959194509250565b60008060408385031215612caf57600080fd5b612cb8836128ea565b9150602083013567ffffffffffffffff811115612cd457600080fd5b612ce085828601612aeb565b9150509250929050565b600060208284031215612cfc57600080fd5b813567ffffffffffffffff811115612d1357600080fd5b6117c484828501612aeb565b600080600080600080600060e0888a031215612d3a57600080fd5b873567ffffffffffffffff80821115612d5257600080fd5b612d5e8b838c01612aeb565b985060209150818a013581811115612d7557600080fd5b612d818c828d01612aeb565b985050612d9060408b016128ea565b965060608a01359550612da560808b016128ea565b9450612db360a08b01612901565b935060c08a013581811115612dc757600080fd5b8a01601f81018c13612dd857600080fd5b803582811115612dea57612dea612a4c565b8060051b9250612dfb848401612a62565b818152928201840192848101908e851115612e1557600080fd5b928501925b84841015612e3f5783359250612e2f83612bdb565b8282529285019290850190612e1a565b80965050505050505092959891949750929550565b60008060408385031215612e6757600080fd5b612e70836128ea565b9150612942602084016128ea565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c90821680612eb557607f821691505b60208210811415612ed657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612f3357612f33612f03565b500290565b600082612f5557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b600060208284031215612fb957600080fd5b8151611a8a81612bdb565b600060208284031215612fd657600080fd5b5051919050565b80516020808301519190811015612ed65760001960209190910360031b1b16919050565b600060001982141561301557613015612f03565b5060010190565b634e487b7160e01b600052600160045260246000fd5b60008282101561304457613044612f03565b500390565b6000821982111561305c5761305c612f03565b500190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906130949083018461294b565b9695505050505050565b6000602082840312156130b057600080fd5b8151611a8a816128b7565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220cef2ab49b49e9a1de6490c7a35341de85d5f16965fa25cf2a92e9448c1c654e364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId to test"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty configuration"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty configuration"
      },
      "supportsInterface(bytes4)": {
        "notice": "test if this interface is supported"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      },
      "withdraw(address)": {
        "notice": "withdraw token otherwise eth"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6766,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6770,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6774,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6780,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7697,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 7699,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 7701,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 7705,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7374,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7379,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7383,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7387,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6531,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 6533,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owner",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 6645,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(RoyaltyInfo)6642_storage"
      },
      {
        "astId": 6650,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)6642_storage)"
      },
      {
        "astId": 7942,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7944,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "defaultPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 8669,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_paused",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 7870,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "initialized",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 7872,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "template",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 7874,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "version",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 8420,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 23215,
        "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "open",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)6642_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)6642_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)6642_storage": {
        "encoding": "inplace",
        "label": "struct OpenERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 6639,
            "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6641,
            "contract": "contracts/next/OpenNFTsV4.sol:OpenNFTsV4",
            "label": "fraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}