{
  "address": "0x3f46967bAa872fb0D03A8C21c95D1D73CB01bb8F",
  "abi": [
    {
      "inputs": [],
      "name": "ids",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "interfacesIds",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d730c5d06ff1c90f137f6af0978dee7f8358a714b0c87496cce9fea94669379",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x3f46967bAa872fb0D03A8C21c95D1D73CB01bb8F",
    "transactionIndex": 0,
    "gasUsed": "347296",
    "logsBloom": "0x
    "blockHash": "0xae1099ff5b92280110f0aa560e152c60edafc0e20530d1b8b95ae51c5a8d6ea0",
    "transactionHash": "0x4d730c5d06ff1c90f137f6af0978dee7f8358a714b0c87496cce9fea94669379",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "347296",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ce6e9f75e1d417c33685d5e5497d1467",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"interfacesIds\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"zapaz.eth\",\"kind\":\"dev\",\"methods\":{\"ids()\":{\"returns\":{\"interfacesIds\":\": Array of all interfaceIds\"}}},\"title\":\"InterfaceIds calculation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ids()\":{\"notice\":\"Main and only function to calculate Interface IdsNo params\"}},\"notice\":\"Calculates various ERC165, ERC721 and ERC1155 interface Idsand Kredeum OpenNFTs interface Ids\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dev/InterfacesIds.sol\":\"InterfacesIds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dev/InterfacesIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport \\\"../interfaces/IERC173.sol\\\";\\nimport \\\"../interfaces/IOpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV0.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV1.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV2.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV3.sol\\\";\\n\\nimport \\\"../interfaces/ICloneFactory.sol\\\";\\nimport \\\"../interfaces/INFTsFactory.sol\\\";\\nimport \\\"../interfaces/ICloneFactoryV2.sol\\\";\\nimport \\\"../interfaces/INFTsFactoryV2.sol\\\";\\n\\nimport \\\"./interfaces/IInterfacesIds.sol\\\";\\n\\n/// @title InterfaceIds calculation\\n/// @author zapaz.eth\\n/// @notice Calculates various ERC165, ERC721 and ERC1155 interface Ids\\n///  @notice and Kredeum OpenNFTs interface Ids\\ncontract InterfacesIds is IInterfacesIds {\\n    /// @notice Main and only function to calculate Interface Ids\\n    /// @notice No params\\n    /// @return interfacesIds : Array of all interfaceIds\\n    function ids() external pure override(IInterfacesIds) returns (bytes4[] memory interfacesIds) {\\n        interfacesIds = new bytes4[](18);\\n        interfacesIds[0] = type(IERC165).interfaceId;\\n\\n        interfacesIds[1] = type(IERC721).interfaceId;\\n\\n        interfacesIds[2] = type(IERC721Receiver).interfaceId;\\n        interfacesIds[3] = type(IERC721Metadata).interfaceId;\\n        interfacesIds[4] = type(IERC721Enumerable).interfaceId;\\n\\n        interfacesIds[5] = type(IERC1155).interfaceId;\\n        interfacesIds[6] = type(IERC1155Receiver).interfaceId;\\n        interfacesIds[7] = type(IERC1155MetadataURI).interfaceId;\\n\\n        interfacesIds[8] = type(IERC173).interfaceId;\\n\\n        interfacesIds[9] = type(IOpenNFTs).interfaceId;\\n        interfacesIds[10] = type(IOpenNFTsV0).interfaceId;\\n        interfacesIds[11] = type(IOpenNFTsV1).interfaceId;\\n        interfacesIds[12] = type(IOpenNFTsV2).interfaceId;\\n        interfacesIds[13] = type(IOpenNFTsV3).interfaceId;\\n\\n        interfacesIds[14] = type(ICloneFactory).interfaceId;\\n        interfacesIds[15] = type(INFTsFactory).interfaceId;\\n        interfacesIds[16] = type(ICloneFactoryV2).interfaceId;\\n        interfacesIds[17] = type(INFTsFactoryV2).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x978b87c03e24853f2df2c0537e0a1f1fd1549ef02642d2303e13f43992e9e8c9\",\"license\":\"MIT\"},\"contracts/dev/interfaces/IInterfacesIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IInterfacesIds {\\n    function ids() external pure returns (bytes4[] memory interfacesIds);\\n}\\n\",\"keccak256\":\"0xc515862bc18125fff66cc23fd97b7539de03d43f47850138a3b7445ccc2f59d5\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactory {\\n    function addImplementation(address implementation) external;\\n\\n    function setDefaultTemplate(address template) external;\\n\\n    function setContractProbe(address probe) external;\\n\\n    function template() external view returns (address);\\n\\n    function implementations(uint256 index) external view returns (address);\\n\\n    function implementationsCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe7eaab28b70571884f82704a7d9fdb0a96e3ce172fbfb646b04d0deb24de4bf0\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    /// @notice New Implementation Event\\n    /// @param implementation Address of the implementation\\n    /// @param creator Address of the creator\\n    /// @return index Index inside implementations array (starts at 0)\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 index);\\n\\n    /// @notice Set Template Event\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    event TemplateSet(string indexed templateName, address indexed template);\\n\\n    /// @notice Set Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    /// @notice Add Implementation\\n    /// @param implementationToAdd Addresses of implementations to add\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n\\n    /// @notice Get Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templates(string calldata templateName) external view returns (address template);\\n\\n    /// @notice Count Implementations\\n    /// @return count Number of implementations\\n    function implementationsCount() external view returns (uint256 count);\\n\\n    /// @notice Get Implementation from Implementations array\\n    /// @param index Index of implementation\\n    /// @return implementation Address of implementation\\n    function implementations(uint256 index) external view returns (address implementation);\\n}\\n\",\"keccak256\":\"0x35d10451fed638bd375b4b1c5ce204672a60bc88c02e2e05bddd1a390fd24dba\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactory {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function withdrawEther() external;\\n\\n    function clone(string memory name, string memory symbol) external returns (address clone);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory nftData);\\n\\n    function balanceOf(address nft, address owner) external view returns (NftData memory nftData);\\n}\\n\",\"keccak256\":\"0x60efe203295ebfe21007226e824cc9792befe0d445d3e8f48aa06c86f684382f\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n}\\n\",\"keccak256\":\"0x47eb8674dd1aca360ae359cfe5352c5d668743c8facb8f014fa86163e8f4b222\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV0 {\\n    function addUser(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xe409f8641290b1e34b3e748b1b83fb35e9a061302332353a8d096d8d20fa8fbe\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV1 {\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xc2298aa6c7becd112e6af3a96913fbfda48ff6fffe8ae938b25070e2e3d1a208\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function owner() external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x0ca6b580e50044c8103a61a0d394c149550f03517c9600dce97ab8c73748790c\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function open() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0a3219e3307cbca3c2cd582c9686517240a634cde3fa77487297766ba5c1005d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610550806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e7657e1514610030575b600080fd5b61003861004e565b60405161004591906104b6565b60405180910390f35b604080516012808252610260820190925260609160208201610240803683370190505090506301ffc9a760e01b8160008151811061008e5761008e610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506380ac58cd60e01b816001815181106100cb576100cb610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050630a85bd0160e11b8160028151811061010857610108610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050635b5e139f60e01b8160038151811061014557610145610504565b60200260200101906001600160e01b03191690816001600160e01b0319168152505063780e9d6360e01b8160048151811061018257610182610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050636cdb3d1360e11b816005815181106101bf576101bf610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050630271189760e51b816006815181106101fc576101fc610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506303a24d0760e21b8160078151811061023957610239610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506307f5828d60e41b8160088151811061027657610276610504565b60200260200101906001600160e01b03191690816001600160e01b0319168152505062f7235960e21b816009815181106102b2576102b2610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050634b68d43160e01b81600a815181106102ef576102ef610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050633ab2af8560e21b81600b8151811061032c5761032c610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050636ca50ed960e11b81600c8151811061036957610369610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050635c838d8b60e01b81600d815181106103a6576103a6610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050633dce988b60e21b81600e815181106103e3576103e3610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050637461834760e01b81600f8151811061042057610420610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506333f1b10d60e21b8160108151811061045d5761045d610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050633c7af2e160e11b8160118151811061049a5761049a610504565b6001600160e01b03199092166020928302919091019091015290565b6020808252825182820181905260009190848201906040850190845b818110156104f85783516001600160e01b031916835292840192918401916001016104d2565b50909695505050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c2b57e98b141d920d563c4a7c598f2c5795c2c2ad2bcc220dfa2883dac52cec864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e7657e1514610030575b600080fd5b61003861004e565b60405161004591906104b6565b60405180910390f35b604080516012808252610260820190925260609160208201610240803683370190505090506301ffc9a760e01b8160008151811061008e5761008e610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506380ac58cd60e01b816001815181106100cb576100cb610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050630a85bd0160e11b8160028151811061010857610108610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050635b5e139f60e01b8160038151811061014557610145610504565b60200260200101906001600160e01b03191690816001600160e01b0319168152505063780e9d6360e01b8160048151811061018257610182610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050636cdb3d1360e11b816005815181106101bf576101bf610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050630271189760e51b816006815181106101fc576101fc610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506303a24d0760e21b8160078151811061023957610239610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506307f5828d60e41b8160088151811061027657610276610504565b60200260200101906001600160e01b03191690816001600160e01b0319168152505062f7235960e21b816009815181106102b2576102b2610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050634b68d43160e01b81600a815181106102ef576102ef610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050633ab2af8560e21b81600b8151811061032c5761032c610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050636ca50ed960e11b81600c8151811061036957610369610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050635c838d8b60e01b81600d815181106103a6576103a6610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050633dce988b60e21b81600e815181106103e3576103e3610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050637461834760e01b81600f8151811061042057610420610504565b60200260200101906001600160e01b03191690816001600160e01b031916815250506333f1b10d60e21b8160108151811061045d5761045d610504565b60200260200101906001600160e01b03191690816001600160e01b03191681525050633c7af2e160e11b8160118151811061049a5761049a610504565b6001600160e01b03199092166020928302919091019091015290565b6020808252825182820181905260009190848201906040850190845b818110156104f85783516001600160e01b031916835292840192918401916001016104d2565b50909695505050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c2b57e98b141d920d563c4a7c598f2c5795c2c2ad2bcc220dfa2883dac52cec864736f6c63430008090033",
  "devdoc": {
    "author": "zapaz.eth",
    "kind": "dev",
    "methods": {
      "ids()": {
        "returns": {
          "interfacesIds": ": Array of all interfaceIds"
        }
      }
    },
    "title": "InterfaceIds calculation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ids()": {
        "notice": "Main and only function to calculate Interface IdsNo params"
      }
    },
    "notice": "Calculates various ERC165, ERC721 and ERC1155 interface Idsand Kredeum OpenNFTs interface Ids",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}