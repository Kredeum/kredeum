{
  "address": "0xa99bDe465f40D9Af9980eED89Ed2940137be1a50",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params_",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parent",
      "outputs": [
        {
          "internalType": "address",
          "name": "parent_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e96be417b0ec325bd8ad902d1e4f9031396dc036711b4ec4b4c264eb6e45cbf",
  "receipt": {
    "to": null,
    "from": "0x62680309dA3Cd77FDeDa85022be3058d373F750d",
    "contractAddress": "0xa99bDe465f40D9Af9980eED89Ed2940137be1a50",
    "transactionIndex": 4,
    "gasUsed": "1894748",
    "logsBloom": "0x
    "blockHash": "0xcc16a0dd06b4f7f801a6ddc1758031146e8496c49bc98cdebc3854094184aa57",
    "transactionHash": "0x9e96be417b0ec325bd8ad902d1e4f9031396dc036711b4ec4b4c264eb6e45cbf",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 34414648,
        "transactionHash": "0x9e96be417b0ec325bd8ad902d1e4f9031396dc036711b4ec4b4c264eb6e45cbf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000062680309da3cd77fdeda85022be3058d373f750d",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d7686cb85becc000000000000000000000000000000000000000000000000029e3b2ca6ed200000000000000000000000000000000000000000000000062e0611540390841ff80000000000000000000000000000000000000000000000000290c4a5db67613400000000000000000000000000000000000000000000062e061eca8a5c09dec4",
        "logIndex": 8,
        "blockHash": "0xcc16a0dd06b4f7f801a6ddc1758031146e8496c49bc98cdebc3854094184aa57"
      }
    ],
    "blockNumber": 34414648,
    "cumulativeGasUsed": "3440540",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "3ce0424c7518890dbcab513fbf6ca417",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params_\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OpenNFTsV4.sol\":\"OpenNFTsV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool public initialized;\\n    string public template;\\n    uint256 public version;\\n\\n    function parent() external view override(IOpenCloneable) returns (address parent_) {\\n        // eip1167 deployed code = 45 bytes = 10 bytes + 20 bytes address + 15 bytes\\n        // extract bytes 10 to 30: shift 2 bytes (16 bits) then truncate to address 20 bytes (uint160)\\n        return (address(this).code.length == 45)\\n            ? address(uint160(uint256(bytes32(address(this).code)) >> 16))\\n            : address(0);\\n    }\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    ) public virtual override(IOpenCloneable);\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        initialized = true;\\n\\n        template = template_;\\n        version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0x9bd557e42148dd317f48913e9c379cd2d9b166eb8c1d190f5c81db6fc15d669f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xd1cd19a5c7736b61bf3b1785ed5552da45967576ac4e86f1cdd47a68fdf9332a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Already initialized\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1a5b3d130042d9e1d31b8ed153d4947cf9f0cce094ca3c2c83243aaecd3082e7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    modifier existsToken(uint256 tokenID) {\\n        require(_owners[tokenID] != address(0), \\\"Invalid token ID\\\");\\n        _;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenID)\\n        external\\n        payable\\n        override(IERC721)\\n    {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        external\\n        payable\\n        override(IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, data);\\n    }\\n\\n    function approve(address spender, uint256 tokenID) public override(IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override(IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID)\\n        public\\n        payable\\n        override(IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x80ac58cd // = type(IERC721).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override(IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID)\\n        public\\n        view\\n        override(IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _owners[tokenID];\\n    }\\n\\n    function getApproved(uint256 tokenID)\\n        public\\n        view\\n        override(IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(IERC721)\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(address to, string memory, uint256 tokenID) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(_owners[tokenID] == address(0), \\\"Token already minted\\\");\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        require(owner != address(0), \\\"Invalid token ID\\\");\\n\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual {}\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (bool ownerOrOperator)\\n    {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n    {\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 tokenID)\\n        private\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _isERC721Receiver(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n        returns (bool)\\n    {\\n        return to.code.length == 0\\n            || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data)\\n                == IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID)\\n        private\\n        view\\n        returns (bool ownerOrApproved)\\n    {\\n        ownerOrApproved =\\n            (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n}\\n\",\"keccak256\":\"0x50983c46812552072b97fc99903dd18f6a22bb76fc430360b3c420ed6a7af5cc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//      OpenERC165\\n//           |\\n//      OpenERC721\\n//           |\\n//  OpenERC721Enumerable \\u2014\\u2014 IERC721Enumerable\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override(IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override(OpenERC721)\\n    {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override(OpenERC721) {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override(OpenERC721)\\n    {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0x9e6f8d4a4cdb56610e833a5d28eafd6eaf6cfcfb601c3dd7145d03df274bdabd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//     OpenERC165\\n//          |\\n//     OpenERC721\\n//          |\\n//  OpenERC721Metadata \\u2014\\u2014 IERC721Metadata\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID)\\n        external\\n        view\\n        virtual\\n        override(IERC721Metadata)\\n        existsToken(tokenID)\\n        returns (string memory)\\n    {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Already initialized\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mint(address to, string memory newTokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override(OpenERC721)\\n    {\\n        _tokenURIs[tokenID] = newTokenURI;\\n\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override(OpenERC721) {\\n        delete _tokenURIs[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0xdfd99389d330b7904e7deda51f8acd56786c4ef01afd8cb34afc48bdcc9582c0\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x58013714c651f0d1771fc666fcf671981f83ed655851ab134096147c60b820ca\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x583df9d1c4ec4e0e2e6f9ada93c240d9b0b8e34db7e588c92b44aca15590aa0d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data)\\n        external\\n        payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0eeba23f32711abca06ec1a3a6c2280853a57d2afc748236ee89e61e3fbacd60\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd04b5e67b7e71e40cc6197df49c279cfa9fb7de3e6e6b2c13a4c1bfd53a077a4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3c399bd3f061c7b2da29e18b01d0b7ea780ac11d0747de3921f1c09d3e491ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0x47c4c29370a130906552a8d76c73ed5a8130591843dfa7357df8af7e19fc00e5\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenCloneable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    ) external;\\n\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function parent() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf6a4650b44aa4f552fdff99b8c89ab231ea479b860733f4bee69257b33489c86\",\"license\":\"MIT\"},\"src/OpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                    |            |\\n//   OpenERC721                          OpenERC173  OpenCloneable\\n//     (NFT)                              (ownable)        |\\n//       |                                    |            |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014           |            |\\n//       |                        |           |            |\\n//  OpenERC721Metadata  OpenERC721Enumerable  |            |\\n//       |                        |           |            |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//   OpenNFTsV4 \\u2014\\u2014 IOpenNFTsV4\\n//\\npragma solidity ^0.8.9;\\n\\nimport {OpenERC721} from \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport {OpenERC721Metadata} from \\\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\\\";\\nimport {OpenERC721Enumerable} from \\\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\\\";\\nimport {OpenERC173} from \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport {OpenCloneable} from \\\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\\\";\\nimport {IOpenNFTsV4} from \\\"src/interfaces/IOpenNFTsV4.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenNFTsV4 is IOpenNFTsV4, OpenERC721Metadata, OpenERC721Enumerable, OpenERC173, OpenCloneable {\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext;\\n\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyMinter() {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    function mint(string memory tokenURI_) external override(IOpenNFTsV4) returns (uint256 tokenID) {\\n        tokenID = _mint(msg.sender, tokenURI_);\\n    }\\n\\n    function mint(address minter, string memory tokenURI_)\\n        external\\n        override(IOpenNFTsV4)\\n        onlyOwner\\n        returns (uint256 tokenID)\\n    {\\n        tokenID = _mint(minter, tokenURI_);\\n    }\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID) external override(IOpenNFTsV4) onlyTokenOwnerOrApproved(tokenID) {\\n        _burn(tokenID);\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_, address owner_, bytes memory params_)\\n        public\\n        override(OpenCloneable)\\n    {\\n        (bytes memory subparams_,,) = abi.decode(params_, (bytes, address, uint96));\\n\\n        (,,, bool[] memory options_) = abi.decode(subparams_, (uint256, address, uint96, bool[]));\\n        open = options_[0];\\n\\n        tokenIdNext = 1;\\n\\n        OpenCloneable._initialize(\\\"OpenNFTsV4\\\", 4);\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC721Metadata, OpenERC721Enumerable, OpenERC173, OpenCloneable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenNFTsV4).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address minter, string memory tokenURI) internal returns (uint256 tokenID) {\\n        tokenID = tokenIdNext++;\\n\\n        _mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _mint(address minter, string memory tokenURI, uint256 tokenID)\\n        internal\\n        override(OpenERC721Enumerable, OpenERC721Metadata)\\n    {\\n        super._mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal override(OpenERC721Enumerable, OpenERC721Metadata) {\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        override(OpenERC721, OpenERC721Enumerable)\\n    {\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0xbaa61a58a8e9e97c6627cd5880ea8e8d75844d99a3291dd0fee0e2e2359f5810\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IOpenNFTsV4 {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd73fee9383c20f40768daac7b698a7d61ce6b79e93513ad25eedfce4e43586fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612152806100206000396000f3fe6080604052600436106101b75760003560e01c80636352211e116100ec578063b88d4fde1161008a578063d85d3d2711610064578063d85d3d2714610494578063e985e9c5146104b4578063f2fde38b146104fd578063fcfff16f1461051d57600080fd5b8063b88d4fde14610441578063c87b56dd14610454578063d0def5211461047457600080fd5b80638bbf58b3116100c65780638bbf58b3146103d35780638da5cb5b146103e957806395d89b411461040c578063a22cb4651461042157600080fd5b80636352211e1461037e5780636f2ddd931461039e57806370a08231146103b357600080fd5b806323b872dd1161015957806342966c681161013357806342966c68146103135780634f6ccce71461033357806354fd4d501461035357806360f96a8f1461036957600080fd5b806323b872dd146102cd5780632f745c59146102e057806342842e0e1461030057600080fd5b8063095ea7b311610195578063095ea7b31461024b578063158ef93e1461026d57806318160ddd1461028e5780631eb40e21146102ad57600080fd5b806301ffc9a7146101bc57806306fdde03146101f1578063081812fc14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046118e6565b610537565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b50610206610562565b6040516101e89190611953565b34801561021f57600080fd5b5061023361022e366004611966565b6105f4565b6040516001600160a01b0390911681526020016101e8565b34801561025757600080fd5b5061026b610266366004611994565b610654565b005b34801561027957600080fd5b50600c546101dc90600160a81b900460ff1681565b34801561029a57600080fd5b506008545b6040519081526020016101e8565b3480156102b957600080fd5b5061026b6102c8366004611a85565b610718565b61026b6102db366004611b22565b6107d1565b3480156102ec57600080fd5b5061029f6102fb366004611994565b6107e1565b61026b61030e366004611b22565b610868565b34801561031f57600080fd5b5061026b61032e366004611966565b610883565b34801561033f57600080fd5b5061029f61034e366004611966565b6108e7565b34801561035f57600080fd5b5061029f600e5481565b34801561037557600080fd5b50610233610951565b34801561038a57600080fd5b50610233610399366004611966565b61099a565b3480156103aa57600080fd5b506102066109ed565b3480156103bf57600080fd5b5061029f6103ce366004611b63565b610a7b565b3480156103df57600080fd5b5061029f600f5481565b3480156103f557600080fd5b50600c5461010090046001600160a01b0316610233565b34801561041857600080fd5b50610206610ae6565b34801561042d57600080fd5b5061026b61043c366004611b8e565b610af5565b61026b61044f366004611bc7565b610b61565b34801561046057600080fd5b5061020661046f366004611966565b610b73565b34801561048057600080fd5b5061029f61048f366004611c27565b610c4b565b3480156104a057600080fd5b5061029f6104af366004611c77565b610caa565b3480156104c057600080fd5b506101dc6104cf366004611cac565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561050957600080fd5b5061026b610518366004611b63565b610cb6565b34801561052957600080fd5b506010546101dc9060ff1681565b60006001600160e01b0319821663b6ea550160e01b148061055c575061055c82610d0d565b92915050565b60606005805461057190611cda565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90611cda565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b03166106335760405162461bcd60e51b815260040161062a90611d0e565b60405180910390fd5b6000838152600260205260409020546001600160a01b031691505b50919050565b61065e3382610d32565b6106aa5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f7200000000604482015260640161062a565b600081815260026020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106df8261099a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008180602001905181019061072e9190611d59565b505090506000818060200190518101906107489190611df5565b93505050508060008151811061076057610760611ed4565b6020026020010151601060006101000a81548160ff0219169083151502179055506001600f819055506107b66040518060400160405280600a81526020016913dc195b9391951cd58d60b21b8152506004610d8d565b6107c08686610ddd565b6107c984610e26565b505050505050565b6107dc838383610e5f565b505050565b60006107ec83610a7b565b821061082b5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161062a565b6001600160a01b038316600090815260096020526040902080548390811061085557610855611ed4565b9060005260206000200154905092915050565b6107dc838383604051806020016040528060008152506110c5565b8061088e338261111d565b6108da5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604482015260640161062a565b6108e382611153565b5050565b600854600090821061092c5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161062a565b6008828154811061093f5761093f611ed4565b90600052602060002001549050919050565b6000602d303b146109625750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c61099390611eea565b901c905090565b60008181526020819052604081205482906001600160a01b03166109d05760405162461bcd60e51b815260040161062a90611d0e565b50506000908152602081905260409020546001600160a01b031690565b600d80546109fa90611cda565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2690611cda565b8015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b505050505081565b60006001600160a01b038216610aca5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b604482015260640161062a565b506001600160a01b031660009081526001602052604090205490565b60606006805461057190611cda565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610b6d848484846110c5565b50505050565b60008181526020819052604090205460609082906001600160a01b0316610bac5760405162461bcd60e51b815260040161062a90611d0e565b60008381526007602052604090208054610bc590611cda565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190611cda565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b5050505050915050919050565b600c5460009061010090046001600160a01b03163314610c995760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b604482015260640161062a565b610ca3838361115c565b9392505050565b600061055c338361115c565b600c5461010090046001600160a01b03163314610d015760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b604482015260640161062a565b610d0a8161117e565b50565b60006001600160e01b031982166350130d5360e01b148061055c575061055c826111d8565b600080610d3e8361099a565b9050836001600160a01b0316816001600160a01b03161480610d8557506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b600c54600160a81b900460ff1615610db75760405162461bcd60e51b815260040161062a90611f0e565b600c805460ff60a81b1916600160a81b179055600d610dd68382611f81565b50600e5550565b60045460ff1615610e005760405162461bcd60e51b815260040161062a90611f0e565b6004805460ff191660011790556005610e198382611f81565b5060066107dc8282611f81565b600c5460ff1615610e495760405162461bcd60e51b815260040161062a90611f0e565b600c805460ff19166001179055610d0a8161117e565b80610e6a338261111d565b610eb65760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604482015260640161062a565b6001600160a01b038416610f0c5760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f2061646472657373000000000000604482015260640161062a565b6001600160a01b038316610f625760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f20616464726573730000000000000000604482015260640161062a565b610f6b8261099a565b6001600160a01b0316846001600160a01b031614610fbc5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b604482015260640161062a565b610fc78484846111fd565b600082815260026020526040902080546001600160a01b03191690556001600160a01b038481169084161461107e576001600160a01b03841660009081526001602081905260408220805491929091611021908490612057565b90915550506001600160a01b0383166000908152600160208190526040822080549192909161105190849061206a565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6110d184848484611208565b6111125760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b604482015260640161062a565b610b6d848484610e5f565b60006111298383610d32565b80610ca35750826001600160a01b0316611142836105f4565b6001600160a01b0316149392505050565b610d0a816112a8565b600f80546000918261116d8361207d565b91905055905061055c83838361137a565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006307f5828d60e41b6001600160e01b03198316148061055c575061055c82611385565b6107dc8383836113aa565b60006001600160a01b0384163b158061129f5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906112509033908a9089908990600401612096565b6020604051808303816000875af115801561126f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129391906120d3565b6001600160e01b031916145b95945050505050565b60006112b38261099a565b90506112bf81836113be565b6000828152600b60205260408120546008549091906112e090600190612057565b90506000600882815481106112f7576112f7611ed4565b6000918252602080832090910154808352600b90915260408083208690558783528220919091556008805491925082918590811061133757611337611ed4565b6000918252602090912001556008805480611354576113546120f0565b60019003818190600052602060002001600090559055611373856114cc565b5050505050565b6107dc8383836114ec565b600063780e9d6360e01b6001600160e01b03198316148061055c575061055c82611545565b6113b483826113be565b6107dc828261156a565b6000818152600a60205260408120549060016113d985610a7b565b6113e39190612057565b905080821461147a576001600160a01b038416600090815260096020526040812080548390811061141657611416611ed4565b906000526020600020015490508060096000876001600160a01b03166001600160a01b03168152602001908152602001600020848154811061145a5761145a611ed4565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b0387168352600990915290208054806114b0576114b06120f0565b6001900381819060005260206000200160009055905550505050565b60008181526007602052604081206114e391611882565b610d0a816115a8565b6114f6838261156a565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018190556107dc838383611699565b6000635b5e139f60e01b6001600160e01b03198316148061055c575061055c826116bd565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b60006115b38261099a565b90506001600160a01b0381166115db5760405162461bcd60e51b815260040161062a90611d0e565b6001600160a01b03811660009081526001602052604090205461160057611600612106565b6001600160a01b0381166000908152600160208190526040822080549192909161162b908490612057565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008181526007602052604090206116b18382611f81565b506107dc8383836116f2565b60006380ac58cd60e01b6001600160e01b03198316148061055c57506001600160e01b031982166301ffc9a760e01b1461055c565b6001600160a01b03831661173f5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b604482015260640161062a565b6000818152602081905260409020546001600160a01b03161561179b5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b604482015260640161062a565b6117b76000848360405180602001604052806000815250611208565b6117f85760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b604482015260640161062a565b6001600160a01b0383166000908152600160208190526040822080549192909161182390849061206a565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b50805461188e90611cda565b6000825580601f1061189e575050565b601f016020900490600052602060002090810190610d0a91905b808211156118cc57600081556001016118b8565b5090565b6001600160e01b031981168114610d0a57600080fd5b6000602082840312156118f857600080fd5b8135610ca3816118d0565b60005b8381101561191e578181015183820152602001611906565b50506000910152565b6000815180845261193f816020860160208601611903565b601f01601f19169290920160200192915050565b602081526000610ca36020830184611927565b60006020828403121561197857600080fd5b5035919050565b6001600160a01b0381168114610d0a57600080fd5b600080604083850312156119a757600080fd5b82356119b28161197f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119ff576119ff6119c0565b604052919050565b600067ffffffffffffffff821115611a2157611a216119c0565b50601f01601f191660200190565b600082601f830112611a4057600080fd5b8135611a53611a4e82611a07565b6119d6565b818152846020838601011115611a6857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611a9b57600080fd5b843567ffffffffffffffff80821115611ab357600080fd5b611abf88838901611a2f565b95506020870135915080821115611ad557600080fd5b611ae188838901611a2f565b945060408701359150611af38261197f565b90925060608601359080821115611b0957600080fd5b50611b1687828801611a2f565b91505092959194509250565b600080600060608486031215611b3757600080fd5b8335611b428161197f565b92506020840135611b528161197f565b929592945050506040919091013590565b600060208284031215611b7557600080fd5b8135610ca38161197f565b8015158114610d0a57600080fd5b60008060408385031215611ba157600080fd5b8235611bac8161197f565b91506020830135611bbc81611b80565b809150509250929050565b60008060008060808587031215611bdd57600080fd5b8435611be88161197f565b93506020850135611bf88161197f565b925060408501359150606085013567ffffffffffffffff811115611c1b57600080fd5b611b1687828801611a2f565b60008060408385031215611c3a57600080fd5b8235611c458161197f565b9150602083013567ffffffffffffffff811115611c6157600080fd5b611c6d85828601611a2f565b9150509250929050565b600060208284031215611c8957600080fd5b813567ffffffffffffffff811115611ca057600080fd5b610d8584828501611a2f565b60008060408385031215611cbf57600080fd5b8235611cca8161197f565b91506020830135611bbc8161197f565b600181811c90821680611cee57607f821691505b60208210810361064e57634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b80516bffffffffffffffffffffffff81168114611d5457600080fd5b919050565b600080600060608486031215611d6e57600080fd5b835167ffffffffffffffff811115611d8557600080fd5b8401601f81018613611d9657600080fd5b8051611da4611a4e82611a07565b818152876020838501011115611db957600080fd5b611dca826020830160208601611903565b8095505050506020840151611dde8161197f565b9150611dec60408501611d38565b90509250925092565b60008060008060808587031215611e0b57600080fd5b84519350602080860151611e1e8161197f565b9350611e2c60408701611d38565b9250606086015167ffffffffffffffff80821115611e4957600080fd5b818801915088601f830112611e5d57600080fd5b815181811115611e6f57611e6f6119c0565b8060051b9150611e808483016119d6565b818152918301840191848101908b841115611e9a57600080fd5b938501935b83851015611ec45784519250611eb483611b80565b8282529385019390850190611e9f565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b8051602080830151919081101561064e5760001960209190910360031b1b16919050565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b601f8211156107dc57600081815260208120601f850160051c81016020861015611f625750805b601f850160051c820191505b818110156107c957828155600101611f6e565b815167ffffffffffffffff811115611f9b57611f9b6119c0565b611faf81611fa98454611cda565b84611f3b565b602080601f831160018114611fe45760008415611fcc5750858301515b600019600386901b1c1916600185901b1785556107c9565b600085815260208120601f198616915b8281101561201357888601518255948401946001909101908401611ff4565b50858210156120315787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561055c5761055c612041565b8082018082111561055c5761055c612041565b60006001820161208f5761208f612041565b5060010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120c990830184611927565b9695505050505050565b6000602082840312156120e557600080fd5b8151610ca3816118d0565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212203e5f3f6d4deff198136a9cf95825bbd2ceef889a628171ba47243bb993b447b064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80636352211e116100ec578063b88d4fde1161008a578063d85d3d2711610064578063d85d3d2714610494578063e985e9c5146104b4578063f2fde38b146104fd578063fcfff16f1461051d57600080fd5b8063b88d4fde14610441578063c87b56dd14610454578063d0def5211461047457600080fd5b80638bbf58b3116100c65780638bbf58b3146103d35780638da5cb5b146103e957806395d89b411461040c578063a22cb4651461042157600080fd5b80636352211e1461037e5780636f2ddd931461039e57806370a08231146103b357600080fd5b806323b872dd1161015957806342966c681161013357806342966c68146103135780634f6ccce71461033357806354fd4d501461035357806360f96a8f1461036957600080fd5b806323b872dd146102cd5780632f745c59146102e057806342842e0e1461030057600080fd5b8063095ea7b311610195578063095ea7b31461024b578063158ef93e1461026d57806318160ddd1461028e5780631eb40e21146102ad57600080fd5b806301ffc9a7146101bc57806306fdde03146101f1578063081812fc14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046118e6565b610537565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b50610206610562565b6040516101e89190611953565b34801561021f57600080fd5b5061023361022e366004611966565b6105f4565b6040516001600160a01b0390911681526020016101e8565b34801561025757600080fd5b5061026b610266366004611994565b610654565b005b34801561027957600080fd5b50600c546101dc90600160a81b900460ff1681565b34801561029a57600080fd5b506008545b6040519081526020016101e8565b3480156102b957600080fd5b5061026b6102c8366004611a85565b610718565b61026b6102db366004611b22565b6107d1565b3480156102ec57600080fd5b5061029f6102fb366004611994565b6107e1565b61026b61030e366004611b22565b610868565b34801561031f57600080fd5b5061026b61032e366004611966565b610883565b34801561033f57600080fd5b5061029f61034e366004611966565b6108e7565b34801561035f57600080fd5b5061029f600e5481565b34801561037557600080fd5b50610233610951565b34801561038a57600080fd5b50610233610399366004611966565b61099a565b3480156103aa57600080fd5b506102066109ed565b3480156103bf57600080fd5b5061029f6103ce366004611b63565b610a7b565b3480156103df57600080fd5b5061029f600f5481565b3480156103f557600080fd5b50600c5461010090046001600160a01b0316610233565b34801561041857600080fd5b50610206610ae6565b34801561042d57600080fd5b5061026b61043c366004611b8e565b610af5565b61026b61044f366004611bc7565b610b61565b34801561046057600080fd5b5061020661046f366004611966565b610b73565b34801561048057600080fd5b5061029f61048f366004611c27565b610c4b565b3480156104a057600080fd5b5061029f6104af366004611c77565b610caa565b3480156104c057600080fd5b506101dc6104cf366004611cac565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561050957600080fd5b5061026b610518366004611b63565b610cb6565b34801561052957600080fd5b506010546101dc9060ff1681565b60006001600160e01b0319821663b6ea550160e01b148061055c575061055c82610d0d565b92915050565b60606005805461057190611cda565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90611cda565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b03166106335760405162461bcd60e51b815260040161062a90611d0e565b60405180910390fd5b6000838152600260205260409020546001600160a01b031691505b50919050565b61065e3382610d32565b6106aa5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f7200000000604482015260640161062a565b600081815260026020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106df8261099a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008180602001905181019061072e9190611d59565b505090506000818060200190518101906107489190611df5565b93505050508060008151811061076057610760611ed4565b6020026020010151601060006101000a81548160ff0219169083151502179055506001600f819055506107b66040518060400160405280600a81526020016913dc195b9391951cd58d60b21b8152506004610d8d565b6107c08686610ddd565b6107c984610e26565b505050505050565b6107dc838383610e5f565b505050565b60006107ec83610a7b565b821061082b5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161062a565b6001600160a01b038316600090815260096020526040902080548390811061085557610855611ed4565b9060005260206000200154905092915050565b6107dc838383604051806020016040528060008152506110c5565b8061088e338261111d565b6108da5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604482015260640161062a565b6108e382611153565b5050565b600854600090821061092c5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b604482015260640161062a565b6008828154811061093f5761093f611ed4565b90600052602060002001549050919050565b6000602d303b146109625750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c61099390611eea565b901c905090565b60008181526020819052604081205482906001600160a01b03166109d05760405162461bcd60e51b815260040161062a90611d0e565b50506000908152602081905260409020546001600160a01b031690565b600d80546109fa90611cda565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2690611cda565b8015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b505050505081565b60006001600160a01b038216610aca5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b604482015260640161062a565b506001600160a01b031660009081526001602052604090205490565b60606006805461057190611cda565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610b6d848484846110c5565b50505050565b60008181526020819052604090205460609082906001600160a01b0316610bac5760405162461bcd60e51b815260040161062a90611d0e565b60008381526007602052604090208054610bc590611cda565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190611cda565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b5050505050915050919050565b600c5460009061010090046001600160a01b03163314610c995760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b604482015260640161062a565b610ca3838361115c565b9392505050565b600061055c338361115c565b600c5461010090046001600160a01b03163314610d015760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b604482015260640161062a565b610d0a8161117e565b50565b60006001600160e01b031982166350130d5360e01b148061055c575061055c826111d8565b600080610d3e8361099a565b9050836001600160a01b0316816001600160a01b03161480610d8557506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b600c54600160a81b900460ff1615610db75760405162461bcd60e51b815260040161062a90611f0e565b600c805460ff60a81b1916600160a81b179055600d610dd68382611f81565b50600e5550565b60045460ff1615610e005760405162461bcd60e51b815260040161062a90611f0e565b6004805460ff191660011790556005610e198382611f81565b5060066107dc8282611f81565b600c5460ff1615610e495760405162461bcd60e51b815260040161062a90611f0e565b600c805460ff19166001179055610d0a8161117e565b80610e6a338261111d565b610eb65760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604482015260640161062a565b6001600160a01b038416610f0c5760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f2061646472657373000000000000604482015260640161062a565b6001600160a01b038316610f625760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f20616464726573730000000000000000604482015260640161062a565b610f6b8261099a565b6001600160a01b0316846001600160a01b031614610fbc5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b604482015260640161062a565b610fc78484846111fd565b600082815260026020526040902080546001600160a01b03191690556001600160a01b038481169084161461107e576001600160a01b03841660009081526001602081905260408220805491929091611021908490612057565b90915550506001600160a01b0383166000908152600160208190526040822080549192909161105190849061206a565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6110d184848484611208565b6111125760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b604482015260640161062a565b610b6d848484610e5f565b60006111298383610d32565b80610ca35750826001600160a01b0316611142836105f4565b6001600160a01b0316149392505050565b610d0a816112a8565b600f80546000918261116d8361207d565b91905055905061055c83838361137a565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006307f5828d60e41b6001600160e01b03198316148061055c575061055c82611385565b6107dc8383836113aa565b60006001600160a01b0384163b158061129f5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906112509033908a9089908990600401612096565b6020604051808303816000875af115801561126f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129391906120d3565b6001600160e01b031916145b95945050505050565b60006112b38261099a565b90506112bf81836113be565b6000828152600b60205260408120546008549091906112e090600190612057565b90506000600882815481106112f7576112f7611ed4565b6000918252602080832090910154808352600b90915260408083208690558783528220919091556008805491925082918590811061133757611337611ed4565b6000918252602090912001556008805480611354576113546120f0565b60019003818190600052602060002001600090559055611373856114cc565b5050505050565b6107dc8383836114ec565b600063780e9d6360e01b6001600160e01b03198316148061055c575061055c82611545565b6113b483826113be565b6107dc828261156a565b6000818152600a60205260408120549060016113d985610a7b565b6113e39190612057565b905080821461147a576001600160a01b038416600090815260096020526040812080548390811061141657611416611ed4565b906000526020600020015490508060096000876001600160a01b03166001600160a01b03168152602001908152602001600020848154811061145a5761145a611ed4565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b0387168352600990915290208054806114b0576114b06120f0565b6001900381819060005260206000200160009055905550505050565b60008181526007602052604081206114e391611882565b610d0a816115a8565b6114f6838261156a565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018190556107dc838383611699565b6000635b5e139f60e01b6001600160e01b03198316148061055c575061055c826116bd565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b60006115b38261099a565b90506001600160a01b0381166115db5760405162461bcd60e51b815260040161062a90611d0e565b6001600160a01b03811660009081526001602052604090205461160057611600612106565b6001600160a01b0381166000908152600160208190526040822080549192909161162b908490612057565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008181526007602052604090206116b18382611f81565b506107dc8383836116f2565b60006380ac58cd60e01b6001600160e01b03198316148061055c57506001600160e01b031982166301ffc9a760e01b1461055c565b6001600160a01b03831661173f5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b604482015260640161062a565b6000818152602081905260409020546001600160a01b03161561179b5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b604482015260640161062a565b6117b76000848360405180602001604052806000815250611208565b6117f85760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b604482015260640161062a565b6001600160a01b0383166000908152600160208190526040822080549192909161182390849061206a565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b50805461188e90611cda565b6000825580601f1061189e575050565b601f016020900490600052602060002090810190610d0a91905b808211156118cc57600081556001016118b8565b5090565b6001600160e01b031981168114610d0a57600080fd5b6000602082840312156118f857600080fd5b8135610ca3816118d0565b60005b8381101561191e578181015183820152602001611906565b50506000910152565b6000815180845261193f816020860160208601611903565b601f01601f19169290920160200192915050565b602081526000610ca36020830184611927565b60006020828403121561197857600080fd5b5035919050565b6001600160a01b0381168114610d0a57600080fd5b600080604083850312156119a757600080fd5b82356119b28161197f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119ff576119ff6119c0565b604052919050565b600067ffffffffffffffff821115611a2157611a216119c0565b50601f01601f191660200190565b600082601f830112611a4057600080fd5b8135611a53611a4e82611a07565b6119d6565b818152846020838601011115611a6857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215611a9b57600080fd5b843567ffffffffffffffff80821115611ab357600080fd5b611abf88838901611a2f565b95506020870135915080821115611ad557600080fd5b611ae188838901611a2f565b945060408701359150611af38261197f565b90925060608601359080821115611b0957600080fd5b50611b1687828801611a2f565b91505092959194509250565b600080600060608486031215611b3757600080fd5b8335611b428161197f565b92506020840135611b528161197f565b929592945050506040919091013590565b600060208284031215611b7557600080fd5b8135610ca38161197f565b8015158114610d0a57600080fd5b60008060408385031215611ba157600080fd5b8235611bac8161197f565b91506020830135611bbc81611b80565b809150509250929050565b60008060008060808587031215611bdd57600080fd5b8435611be88161197f565b93506020850135611bf88161197f565b925060408501359150606085013567ffffffffffffffff811115611c1b57600080fd5b611b1687828801611a2f565b60008060408385031215611c3a57600080fd5b8235611c458161197f565b9150602083013567ffffffffffffffff811115611c6157600080fd5b611c6d85828601611a2f565b9150509250929050565b600060208284031215611c8957600080fd5b813567ffffffffffffffff811115611ca057600080fd5b610d8584828501611a2f565b60008060408385031215611cbf57600080fd5b8235611cca8161197f565b91506020830135611bbc8161197f565b600181811c90821680611cee57607f821691505b60208210810361064e57634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b80516bffffffffffffffffffffffff81168114611d5457600080fd5b919050565b600080600060608486031215611d6e57600080fd5b835167ffffffffffffffff811115611d8557600080fd5b8401601f81018613611d9657600080fd5b8051611da4611a4e82611a07565b818152876020838501011115611db957600080fd5b611dca826020830160208601611903565b8095505050506020840151611dde8161197f565b9150611dec60408501611d38565b90509250925092565b60008060008060808587031215611e0b57600080fd5b84519350602080860151611e1e8161197f565b9350611e2c60408701611d38565b9250606086015167ffffffffffffffff80821115611e4957600080fd5b818801915088601f830112611e5d57600080fd5b815181811115611e6f57611e6f6119c0565b8060051b9150611e808483016119d6565b818152918301840191848101908b841115611e9a57600080fd5b938501935b83851015611ec45784519250611eb483611b80565b8282529385019390850190611e9f565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b8051602080830151919081101561064e5760001960209190910360031b1b16919050565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b601f8211156107dc57600081815260208120601f850160051c81016020861015611f625750805b601f850160051c820191505b818110156107c957828155600101611f6e565b815167ffffffffffffffff811115611f9b57611f9b6119c0565b611faf81611fa98454611cda565b84611f3b565b602080601f831160018114611fe45760008415611fcc5750858301515b600019600386901b1c1916600185901b1785556107c9565b600085815260208120601f198616915b8281101561201357888601518255948401946001909101908401611ff4565b50858210156120315787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561055c5761055c612041565b8082018082111561055c5761055c612041565b60006001820161208f5761208f612041565b5060010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120c990830184611927565b9695505050505050565b6000602082840312156120e557600080fd5b8151610ca3816118d0565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea26469706673582212203e5f3f6d4deff198136a9cf95825bbd2ceef889a628171ba47243bb993b447b064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 481,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 485,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 489,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 495,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1404,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 1406,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1408,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1412,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1081,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1086,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1090,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1094,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 196,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owner",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 9,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "initialized",
        "offset": 21,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 11,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "template",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "version",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6497,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6500,
        "contract": "src/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "open",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}