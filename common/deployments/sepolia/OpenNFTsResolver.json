{
  "address": "0x79F74cB4cE9FA902AC603DfEb7D04b03F3575EBf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "checkErcInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "erc",
          "type": "bool"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos",
          "name": "openNTFscollectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]",
          "name": "openNFTsCollectionsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos",
          "name": "openNTFsNftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos[]",
          "name": "openNTFsNftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getOpenNFTsNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos[]",
          "name": "openNTFsNftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "smartcontracts",
          "type": "address[]"
        }
      ],
      "name": "isCollections",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "checks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "name": "setRegisterer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f5ccbee2f09cf9d01bebb048a30514a38ac8382dbbdca85b3dd0b654969bc34",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x79F74cB4cE9FA902AC603DfEb7D04b03F3575EBf",
    "transactionIndex": 0,
    "gasUsed": "3268399",
    "logsBloom": "0x
    "blockHash": "0x6bd34562587366e1252b62eb80342ab10a5cd693c7080b63414a10945f3ef593",
    "transactionHash": "0x2f5ccbee2f09cf9d01bebb048a30514a38ac8382dbbdca85b3dd0b654969bc34",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1809496,
        "transactionHash": "0x2f5ccbee2f09cf9d01bebb048a30514a38ac8382dbbdca85b3dd0b654969bc34",
        "address": "0x79F74cB4cE9FA902AC603DfEb7D04b03F3575EBf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6bd34562587366e1252b62eb80342ab10a5cd693c7080b63414a10945f3ef593"
      }
    ],
    "blockNumber": 1809496,
    "cumulativeGasUsed": "3268399",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "0x353e747242CD4806Cb18D70a42cEa01512b18A3B"
  ],
  "numDeployments": 1,
  "solcInputHash": "faad117daa1573ae16cfb4b4703b6cc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"checkErcInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"erc\",\"type\":\"bool\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos\",\"name\":\"openNTFscollectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]\",\"name\":\"openNFTsCollectionsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos[]\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getOpenNFTsNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos[]\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"smartcontracts\",\"type\":\"address[]\"}],\"name\":\"isCollections\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"checks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"name\":\"setRegisterer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/OpenNFTsResolver.sol\":\"OpenNFTsResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1fb41a62bc8627d22290d66995c9f4c3dffbea73b6d91a68b9c3ed15fb270c81\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    /// _ercInterfaceIds : ERC interfacesIds\\n    /// 0xffffffff :  O Invalid\\n    /// 0x01ffc9a7 :  1 ERC165\\n    /// 0x80ac58cd :  2 ERC721\\n    /// 0x5b5e139f :  3 ERC721Metadata\\n    /// 0x780e9d63 :  4 ERC721Enumerable\\n    /// 0x150b7a02 :  5 ERC721TokenReceiver\\n    /// 0xd9b67a26 :  6 ERC1155\\n    /// 0x0e89341c :  7 ERC1155MetadataURI\\n    /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n    /// 0x7f5828d0 :  9 ERC173\\n    /// 0x2a55205a : 10 ERC2981\\n    bytes4[] private _ercInterfaceIds = [\\n        bytes4(0xffffffff),\\n        bytes4(0x01ffc9a7),\\n        bytes4(0x80ac58cd),\\n        bytes4(0x5b5e139f),\\n        bytes4(0x780e9d63),\\n        bytes4(0x150b7a02),\\n        bytes4(0xd9b67a26),\\n        bytes4(0x0e89341c),\\n        bytes4(0x4e2312e0),\\n        bytes4(0x7f5828d0),\\n        bytes4(0x2a55205a)\\n    ];\\n\\n    modifier onlyContract(address account) {\\n        require(account.code.length > 0, \\\"Not smartcontract\\\");\\n        _;\\n    }\\n\\n    function isCollections(address[] memory smartcontracts)\\n        public\\n        view\\n        override (IOpenChecker)\\n        returns (bool[] memory checks)\\n    {\\n        checks = new bool[](smartcontracts.length);\\n\\n        for (uint256 i = 0; i < smartcontracts.length; i++) {\\n            checks[i] = isCollection(smartcontracts[i]);\\n        }\\n    }\\n\\n    function isCollection(address smartcontract)\\n        public\\n        view\\n        override (IOpenChecker)\\n        onlyContract(smartcontract)\\n        returns (bool)\\n    {\\n        bool[] memory checks = checkErcInterfaces(smartcontract);\\n\\n        // ERC165 and (ERC721 or ERC1155)\\n        return !checks[0] && checks[1] && (checks[2] || checks[6]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function checkErcInterfaces(address smartcontract) public view override (IOpenChecker) returns (bool[] memory) {\\n        return checkSupportedInterfaces(smartcontract, true, new bytes4[](0));\\n    }\\n\\n    function checkSupportedInterfaces(address smartcontract, bool erc, bytes4[] memory interfaceIds)\\n        public\\n        view\\n        override (IOpenChecker)\\n        onlyContract(smartcontract)\\n        returns (bool[] memory interfaceIdsChecks)\\n    {\\n        uint256 i;\\n        uint256 len = (erc ? _ercInterfaceIds.length : 0) + interfaceIds.length;\\n\\n        interfaceIdsChecks = new bool[](len);\\n\\n        if (erc) {\\n            for (uint256 j = 0; j < _ercInterfaceIds.length; j++) {\\n                interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(_ercInterfaceIds[j]);\\n            }\\n        }\\n        for (uint256 k = 0; k < interfaceIds.length; k++) {\\n            interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(interfaceIds[k]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdaeb09f7da3597ffdeb07cde0a7d6401821bf00eeedb769d96e82027defd97b4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenChecker\\n//        |\\n//  OpenGetter \\u2014\\u2014 IOpenGetter\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenGetter is IOpenGetter, OpenChecker {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenChecker) returns (bool) {\\n        return interfaceId == type(IOpenGetter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionInfos(address collection, address account)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (\\n            // override(IOpenGetter)\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = _getCollectionInfos(collection, account, new bytes4[](0));\\n    }\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos)\\n    {\\n        nftsInfos = new NftInfos[](tokenIDs.length);\\n        for (uint256 i; i < tokenIDs.length; i++) {\\n            nftsInfos[i] = _getNftInfos(collection, tokenIDs[i], account);\\n        }\\n    }\\n\\n    function getNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos, uint256 count, uint256 total)\\n    {\\n        bool[] memory supported = checkErcInterfaces(collection);\\n\\n        // IF ERC721 & ERC721Enumerable supported\\n        if (supported[2] && supported[4]) {\\n            if (account == address(0)) {\\n                total = IERC721Enumerable(collection).totalSupply();\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] =\\n                        _getNftInfos(collection, IERC721Enumerable(collection).tokenByIndex(offset + i), account);\\n                }\\n            } else {\\n                total = IERC721(collection).balanceOf(account);\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = _getNftInfos(\\n                        collection, IERC721Enumerable(collection).tokenOfOwnerByIndex(account, offset + i), account\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getNftInfos(address collection, uint256 tokenID, address account)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (NftInfos memory nftInfos)\\n    {\\n        return _getNftInfos(collection, tokenID, account);\\n    }\\n\\n    function _getNftInfos(address collection, uint256 tokenID, address account)\\n        internal\\n        view\\n        onlyContract(collection)\\n        returns (NftInfos memory nftInfos)\\n    {\\n        nftInfos.tokenID = tokenID;\\n        nftInfos.approved = IERC721(collection).getApproved(tokenID);\\n        nftInfos.owner = IERC721(collection).ownerOf(tokenID);\\n\\n        if (IERC165(collection).supportsInterface(0x5b5e139f)) {\\n            // ERC721Metadata\\n            nftInfos.tokenURI = IERC721Metadata(collection).tokenURI(tokenID);\\n        } else if (IERC165(collection).supportsInterface(0x0e89341c)) {\\n            // ERC1155MetadataURI\\n            nftInfos.tokenURI = IERC1155MetadataURI(collection).uri(tokenID);\\n            nftInfos.balanceOf = IERC1155(collection).balanceOf(account, tokenID);\\n        }\\n    }\\n\\n    function _getCollectionInfos(address collection, address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        onlyContract(collection)\\n        returns (CollectionInfos memory collectionInfos)\\n    {\\n        bool[] memory supported = checkSupportedInterfaces(collection, true, interfaceIds);\\n        collectionInfos.supported = supported;\\n\\n        // ERC165 must be supported\\n        require(!supported[0] && supported[1], \\\"Not ERC165\\\");\\n\\n        // ERC721 or ERC1155 must be supported\\n        require(supported[2] || supported[6], \\\"Not NFT smartcontract\\\");\\n\\n        collectionInfos.collection = collection;\\n\\n        // try ERC173 owner\\n        try IERC173(collection).owner() returns (address owner) {\\n            collectionInfos.owner = owner;\\n        } catch {}\\n\\n        // try ERC721Metadata name\\n        try IERC721Metadata(collection).name() returns (string memory name) {\\n            collectionInfos.name = name;\\n        } catch {}\\n\\n        // try ERC721Metadata symbol\\n        try IERC721Metadata(collection).symbol() returns (string memory symbol) {\\n            collectionInfos.symbol = symbol;\\n        } catch {}\\n\\n        // try ERC721Enumerable totalSupply\\n        try IERC721Enumerable(collection).totalSupply() returns (uint256 totalSupply) {\\n            collectionInfos.totalSupply = totalSupply;\\n        } catch {}\\n\\n        if (account != address(0)) {\\n            try IERC721(collection).balanceOf(account) returns (uint256 balanceOf) {\\n                collectionInfos.balanceOf = balanceOf;\\n            } catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0e85d809436cfa02e880b848075a12bc08ceb9fc221b901c0b218f18d87badd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenRegistry \\u2014\\u2014 IOpenRegistry\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\\\";\\n\\nabstract contract OpenRegistry is IOpenRegistry, OpenERC173 {\\n    mapping(address => uint256) private _numAddress;\\n    address[] private _addresses;\\n    address public registerer;\\n\\n    /// @notice onlyRegisterer, by default owner is registerer and can add addresses, can be overriden\\n    modifier onlyRegisterer() virtual {\\n        require(msg.sender == owner() || msg.sender == registerer, \\\"Not registerer nor owner\\\");\\n        _;\\n    }\\n\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address) virtual {\\n        _;\\n    }\\n\\n    function setRegisterer(address registerer_) external override (IOpenRegistry) onlyOwner {\\n        _setRegisterer(registerer_);\\n    }\\n\\n    function addAddresses(address[] memory addrs) external override (IOpenRegistry) {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            _addAddress(addrs[i]);\\n        }\\n    }\\n\\n    function addAddress(address addr) external override (IOpenRegistry) {\\n        _addAddress(addr);\\n    }\\n\\n    function removeAddress(address addr) external override (IOpenRegistry) {\\n        _removeAddress(addr);\\n    }\\n\\n    function countAddresses() external view override (IOpenRegistry) returns (uint256) {\\n        return _addresses.length;\\n    }\\n\\n    function isRegistered(address addr) public view returns (bool) {\\n        return _numAddress[addr] >= 1;\\n    }\\n\\n    function getAddresses() public view override (IOpenRegistry) returns (address[] memory) {\\n        return _addresses;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenRegistry).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setRegisterer(address registerer_) internal {\\n        registerer = registerer_;\\n    }\\n\\n    function _addAddress(address addr) private onlyRegisterer onlyValid(addr) {\\n        if (!isRegistered(addr)) {\\n            _addresses.push(addr);\\n            _numAddress[addr] = _addresses.length;\\n        }\\n    }\\n\\n    function _removeAddress(address addr) private onlyRegisterer {\\n        require(isRegistered(addr), \\\"Not registered\\\");\\n\\n        uint256 num = _numAddress[addr];\\n        if (num != _addresses.length) {\\n            address addrLast = _addresses[_addresses.length - 1];\\n            _addresses[num - 1] = addrLast;\\n            _numAddress[addrLast] = num;\\n        }\\n\\n        delete (_numAddress[addr]);\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xbe926f08c282f0dbd2656c1346afe7b8f34406a5b1b14e77b3579c3edf687104\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |              |\\n//   OpenChecker     OpenERC173\\n//        |              |\\n//    OpenGetter    OpenRegistry\\n//        |              |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenResolver \\u2014\\u2014 IOpenResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\\\";\\n\\nabstract contract OpenResolver is IOpenResolver, OpenRegistry, OpenGetter {\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address addr) override (OpenRegistry) {\\n        require(isCollection(addr), \\\"Not Collection\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenRegistry, OpenGetter)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionsInfos(address[] memory collections, address account, bytes4[] memory interfaceIds)\\n        public\\n        view\\n        override (IOpenResolver)\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        collectionsInfos = new CollectionInfos[](collections.length);\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            collectionsInfos[i] = _getCollectionInfos(collections[i], account, interfaceIds);\\n        }\\n    }\\n\\n    function _getCollectionsInfos(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, interfaceIds);\\n\\n        uint256 len;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                len++;\\n            }\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](len);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j++] = collectionsInfosAll[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58ede3c63ed02eb372629a63a5fbf7ff5c5682194b70796220a8b1e37f284f81\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC1155 {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    )\\n        external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x586c09a3bb148ba591b3afbb40c663ae3dbab958f1c260b9cc3627009a0b2e7b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155METADATAURI.sol)\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC1155MetadataURI {\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcb0aef2ef470e3546050a51b93d26fa56f62ac4ffe038a3d4d24c54c43aa3fd0\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155TokenReceiver.sol)\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC1155TokenReceiver {\\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata)\\n        external\\n        returns (bytes4);\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdb230beb537fb48e16cad9b218a9d6cadbc15dfbbacbf5d50fbc2dda426f8a31\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd91f944d2ad53e9c795a855167e495d4b533648a349fcb913e631cfe7b4013b7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x82d41cc520f5c9057e7bfc07873e3b9529792141e18dd5983bd882939879b9ef\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x05f823f0200e240d7187bdbe515f72d64e1eadbb137971e5c1e9a3c64ad04cd6\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1b0093a40ef61bbd99626cf148b24308677df0593ff427c3d4aed2fa1253e1a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa2d4f755b98e4e15a9d3996ffa8240879e0b1f2815b0cfd5b77db4929d8fdf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd040488949e399674a34c9b01b34245d76e41ab267620f49f171aae14d07875f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Events {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x11878cede4e6c7981e72dd32070f8cd777abfffbee70cd3dc85d62606a87c8a1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x72918d0b7d703c5cf08686014c2e0127ed56411c72c551232038ebcec4facc4d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa43438f26b96a4a3a488e1e9701ee7291e238498c27bb45a9530fe11dc865896\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// Infos of either ERC721 or ERC1155 NFT\\ninterface IERCNftInfos {\\n    enum NftType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct CollectionInfos {\\n        address collection;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        uint256 balanceOf;\\n        bool[] supported;\\n        NftType erc;\\n    }\\n\\n    struct NftInfos {\\n        uint256 tokenID;\\n        string tokenURI;\\n        address owner;\\n        address approved;\\n        uint256 balanceOf;\\n        NftType erc;\\n    }\\n}\\n\",\"keccak256\":\"0x9c05c703d0f7cacc624ea899821b145f6eee941e937b848b0f0ef97f87f5acf3\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenChecker {\\n    function checkErcInterfaces(address smartcontract) external view returns (bool[] memory interfaceIdsChecks);\\n\\n    function checkSupportedInterfaces(address smartcontract, bool erc, bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (bool[] memory interfaceIdsChecks);\\n\\n    function isCollection(address collection) external view returns (bool check);\\n\\n    function isCollections(address[] memory collection) external view returns (bool[] memory checks);\\n}\\n\",\"keccak256\":\"0x95a9dd70fe950ade213bcc98524cbb771c7f2020e493acdd9574b993453f88ca\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8b341604669286aaff8c18d9ea9c32c7f69f40a02770115a8878414276f3584\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenGetter is IERCNftInfos {\\n    function getCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos);\\n\\n    function getNftInfos(address collection, uint256 tokenID, address account)\\n        external\\n        view\\n        returns (NftInfos memory nftInfos);\\n\\n    function getNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos, uint256 count, uint256 total);\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos);\\n}\\n\",\"keccak256\":\"0xa80d8a6f1c83d9891d9dbf6d3f5558e4ee066366647717958b74385b8731d765\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(uint256 tokenID, uint256 price, address payer, address payee);\\n\\n    receive() external payable;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function defaultPrice() external view returns (uint256 defPrice);\\n\\n    function tokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getDefaultRoyaltyInfo() external view returns (address receiver, uint96 fraction);\\n\\n    function getTokenRoyaltyInfo(uint256 tokenID) external view returns (address receiver, uint96 fraction);\\n}\\n\",\"keccak256\":\"0x0cc924127626eeab1de8169e364084d243b312583429eec9fedb3e66dabcb741\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function withdraw(address token) external;\\n}\\n\",\"keccak256\":\"0xd6db9618029d25ceb6fe3d8d2fa5823502c336b25316f148b912c3f716a67a53\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenRegistry {\\n    function setRegisterer(address registerer) external;\\n\\n    function removeAddress(address addr) external;\\n\\n    function addAddress(address addr) external;\\n\\n    function addAddresses(address[] memory addrs) external;\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function registerer() external view returns (address);\\n\\n    function countAddresses() external view returns (uint256);\\n\\n    function isRegistered(address addr) external view returns (bool registered);\\n}\\n\",\"keccak256\":\"0x79c45f2de6f608b1fed916aa54290f5ba34e67232e50304a16e4ee3a9279f742\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenResolver is IERCNftInfos {\\n    function getCollectionsInfos(address[] memory collections, address account, bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos);\\n}\\n\",\"keccak256\":\"0x407346442056835f93bfffdd21c8bbcf1f1d3f8fa154d842a65543bedfbfa47b\",\"license\":\"MIT\"},\"contracts/interfaces/IAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Events.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nimport \\\"./ICloneFactory.sol\\\";\\nimport \\\"./ICloneFactoryV2.sol\\\";\\nimport \\\"./INFTsFactory.sol\\\";\\nimport \\\"./INFTsFactoryV2.sol\\\";\\nimport \\\"./IOpenNFTsFactoryV3.sol\\\";\\n\\nimport \\\"./IOpenNFTsV0.sol\\\";\\nimport \\\"./IOpenNFTsV1.sol\\\";\\nimport \\\"./IOpenNFTsV2.sol\\\";\\nimport \\\"./IOpenNFTsV3.sol\\\";\\nimport \\\"./IOpenNFTsV4.sol\\\";\\nimport \\\"./IOpenBound.sol\\\";\\n\",\"keccak256\":\"0x03cf99905f06379d55762beff07a58725e2610960f9954e037659d1203a07e7c\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactory {\\n    function addImplementation(address implementation_) external;\\n\\n    function setDefaultTemplate(address defaultTemplate_) external;\\n\\n    function setContractProbe(address contractProbe_) external;\\n\\n    function template() external view returns (address template_);\\n\\n    function implementations(uint256 index) external view returns (address implementation_);\\n\\n    function implementationsCount() external view returns (uint256 implementationsCount_);\\n}\\n\",\"keccak256\":\"0x1e8aa9d32ce6e91ad12269195265637a48bf6608011f878b31acb13f7228d7a8\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    /// @notice New Implementation Event\\n    /// @param implementation Address of the implementation\\n    /// @param creator Address of the creator\\n    /// @return index Index inside implementations array (starts at 0)\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 index);\\n\\n    /// @notice Set Template Event\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    event TemplateSet(string indexed templateName, address indexed template);\\n\\n    /// @notice Set Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    /// @notice Add Implementation\\n    /// @param implementationToAdd Addresses of implementations to add\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n\\n    /// @notice Get Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templates(string calldata templateName) external view returns (address template);\\n\\n    /// @notice Count Implementations\\n    /// @return count Number of implementations\\n    function implementationsCount() external view returns (uint256 count);\\n\\n    /// @notice Get Implementation from Implementations array\\n    /// @param index Index of implementation\\n    /// @return implementation Address of implementation\\n    function implementations(uint256 index) external view returns (address implementation);\\n}\\n\",\"keccak256\":\"0x35d10451fed638bd375b4b1c5ce204672a60bc88c02e2e05bddd1a390fd24dba\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactory {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function withdrawEther() external;\\n\\n    function clone(string memory name, string memory symbol) external returns (address clone_);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory nftDatas_);\\n\\n    function balanceOf(address nft, address owner) external view returns (NftData memory nftData_);\\n}\\n\",\"keccak256\":\"0x46e466f2a11b8c8379abb6b32c4aabe5695d09c2c2c610078af3709c483b5e0a\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n}\\n\",\"keccak256\":\"0x47eb8674dd1aca360ae359cfe5352c5d668743c8facb8f014fa86163e8f4b222\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32589afb6590b5214f04bba67d1ee4b5dba7b83261504067789e2b278fb5f395\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsFactoryV3 {\\n    event Clone(string indexed templateName, address indexed clone, string indexed name, string symbol, bool[] options);\\n\\n    event SetResolver(address indexed resolver);\\n\\n    event SetTemplate(string indexed templateName, address indexed template, uint256 index);\\n\\n    function setResolver(address resolver) external;\\n\\n    function setTemplate(string memory templateName, address template) external;\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function template(string memory templateName) external view returns (address);\\n\\n    function templates(uint256 num) external view returns (address);\\n\\n    function countTemplates() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5723b9a7a4b514e9468c84b5180f3c0921c9db2e636f330bf7b71679d1f61fc6\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenNFTsInfos is IERCNftInfos {\\n    struct OpenNFTsCollectionInfos {\\n        uint256 version;\\n        string template;\\n        bool open;\\n        uint256 price;\\n        address receiver;\\n        uint96 fraction;\\n    }\\n\\n    struct OpenNFTsNftInfos {\\n        uint256 price;\\n        address receiver;\\n        uint96 fraction;\\n    }\\n}\\n\",\"keccak256\":\"0x384b22ff776a9315e92559a893882a27bd9d6b5e9da44296b26cc692964ee48f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IOpenNFTsInfos.sol\\\";\\n\\ninterface IOpenNFTsResolver is IOpenNFTsInfos {\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        address account,\\n        uint256 limit,\\n        uint256 offset\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        uint256[] memory tokenIDs,\\n        address account\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos\\n        );\\n\\n    function getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        address account\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos memory nftInfos,\\n            OpenNFTsNftInfos memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos\\n        );\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        returns (\\n            CollectionInfos[] memory collectionsInfos,\\n            OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos);\\n}\\n\",\"keccak256\":\"0xd915c66414928660b4a6ee13dbb50f6e4bcbd32fba1d52e0672100325e0fd6f6\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV0 {\\n    function addUser(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xe409f8641290b1e34b3e748b1b83fb35e9a061302332353a8d096d8d20fa8fbe\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV1 {\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xc2298aa6c7becd112e6af3a96913fbfda48ff6fffe8ae938b25070e2e3d1a208\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID_);\\n\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x80f5c8bb99040e627368daefd93db5e81fd7c9847121abebe99413136c54bfa2\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n\\n    function open() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9aad4d4b8e93a3fa770afe4d158fa3dd78ba714c964192918c49e3225e3eea28\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 defaultPrice,\\n        address receiver,\\n        uint96 fee,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function parent() external view returns (address);\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e43e18f3338f0e49664e6cff3dd76476c1a9437fdb8fc72506212931dbce5e6\",\"license\":\"MIT\"},\"contracts/next/OpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//    OpenERC165\\n//        |\\n//  OpenResolver\\n//        |\\n//  OpenNFTsResolver \\u2014\\u2014 IOpenNFTsResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsResolver.sol\\\";\\nimport \\\"../interfaces/IAll.sol\\\";\\n\\ncontract OpenNFTsResolver is IOpenNFTsResolver, OpenResolver {\\n    bytes4[] private _interfaceIds = new bytes4[](11);\\n\\n    constructor(address owner_, address registerer_) {\\n        OpenERC173._initialize(owner_);\\n        OpenRegistry._setRegisterer(registerer_);\\n        /// 0xffffffff :  O Invalid\\n        /// 0x01ffc9a7 :  1 ERC165\\n        /// 0x80ac58cd :  2 ERC721\\n        /// 0x5b5e139f :  3 ERC721Metadata\\n        /// 0x780e9d63 :  4 ERC721Enumerable\\n        /// 0x150b7a02 :  5 ERC721TokenReceiver\\n        /// 0xd9b67a26 :  6 ERC1155\\n        /// 0x0e89341c :  7 ERC1155MetadataURI\\n        /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n        /// 0x7f5828d0 :  9 ERC173\\n        /// 0x2a55205a : 10 ERC2981\\n\\n        _interfaceIds[0] = type(IOpenNFTs).interfaceId; //       11+0  = 11\\n        _interfaceIds[1] = type(IOpenChecker).interfaceId; //    11+1  = 12\\n        _interfaceIds[2] = type(IOpenCloneable).interfaceId; //  11+2  = 13\\n        _interfaceIds[3] = type(IOpenMarketable).interfaceId; // 11+3  = 14\\n        _interfaceIds[4] = type(IOpenPauseable).interfaceId; //  11+4  = 15\\n\\n        _interfaceIds[5] = type(IOpenNFTsV0).interfaceId; //     11+5  = 16\\n        _interfaceIds[6] = type(IOpenNFTsV1).interfaceId; //     11+6  = 17\\n        _interfaceIds[7] = type(IOpenNFTsV2).interfaceId; //     11+7  = 18\\n        _interfaceIds[8] = type(IOpenNFTsV3).interfaceId; //     11+8  = 19\\n        _interfaceIds[9] = type(IOpenNFTsV4).interfaceId; //     11+9  = 20\\n        _interfaceIds[10] = type(IOpenBound).interfaceId; //     11+10 = 21\\n    }\\n\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        address account,\\n        uint256 limit,\\n        uint256 offset\\n    )\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n\\n        (nftInfos, count, total) = OpenGetter.getNftsInfos(collection, account, limit, offset);\\n\\n        openNTFsNftInfos = new OpenNFTsNftInfos[](nftInfos.length);\\n        for (uint256 i = 0; i < nftInfos.length; i++) {\\n            openNTFsNftInfos[i] = _getOpenNFTsNftInfos(collection, nftInfos[i].tokenID, collectionInfos.supported);\\n        }\\n    }\\n\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        uint256[] memory tokenIDs,\\n        address account\\n    )\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, address(0), _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftsInfos(collection, tokenIDs, account);\\n        openNTFsNftInfos = new OpenNFTsNftInfos[](tokenIDs.length);\\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\\n            openNTFsNftInfos[i] = _getOpenNFTsNftInfos(collection, tokenIDs[i], collectionInfos.supported);\\n        }\\n    }\\n\\n    function getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        address account\\n    )\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos memory nftInfos,\\n            OpenNFTsNftInfos memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftInfos(collection, tokenID, account);\\n        openNTFsNftInfos = _getOpenNFTsNftInfos(collection, tokenID, collectionInfos.supported);\\n    }\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            CollectionInfos[] memory collectionsInfos,\\n            OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, _interfaceIds);\\n        total = collectionsInfosAll.length;\\n\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                count++;\\n            }\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](count);\\n        openNFTsCollectionsInfos = new OpenNFTsCollectionInfos[](count);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < total; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j] = collectionsInfosAll[i];\\n                openNFTsCollectionsInfos[j] = _getOpenNFTsCollectionInfos(\\n                    collectionsInfosAll[i].collection,\\n                    collectionsInfosAll[i].supported\\n                );\\n                j++;\\n            }\\n        }\\n    }\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos)\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n        openNTFscollectionInfos = _getOpenNFTsCollectionInfos(collection, collectionInfos.supported);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenResolver) returns (bool) {\\n        return interfaceId == type(IOpenNFTsResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        bool[] memory supported\\n    ) internal view returns (OpenNFTsNftInfos memory nftInfos) {\\n        if (supported[10]) {\\n            // ERC2981\\n            uint256 fee;\\n            (nftInfos.receiver, fee) = IERC2981(collection).royaltyInfo(tokenID, 10000);\\n            nftInfos.fraction = uint96(fee);\\n        }\\n        if (supported[14]) {\\n            // OpenMarketable\\n            nftInfos.price = IOpenMarketable(payable(collection)).tokenPrice(tokenID);\\n        }\\n    }\\n\\n    function _getOpenNFTsCollectionInfos(address collection, bool[] memory supported)\\n        internal\\n        view\\n        returns (OpenNFTsCollectionInfos memory collInfos)\\n    {\\n        if (supported[13]) {\\n            // OpenCloneable\\n            collInfos.version = IOpenCloneable(collection).version(); // 4\\n            collInfos.template = IOpenCloneable(collection).template(); // OpenNFTsV4 or OpenBound\\n            collInfos.open = IOpenNFTsV4(collection).open();\\n        } else if (supported[19]) {\\n            // OpenNFTsV3\\n            collInfos.version = 3;\\n            collInfos.template = \\\"OpenNFTsV3\\\";\\n            collInfos.open = IOpenNFTsV3(collection).open();\\n        } else if (supported[18]) {\\n            // OpenNFTsV2\\n            collInfos.version = 2;\\n        } else if (supported[17]) {\\n            // OpenNFTsV1\\n            collInfos.version = 1;\\n        } else if (supported[16]) {\\n            // OpenNFTsV0\\n            collInfos.version = 0;\\n        }\\n\\n        if (supported[14]) {\\n            // OpenMarketable\\n            (collInfos.receiver, collInfos.fraction) = IOpenMarketable(payable(collection)).getDefaultRoyaltyInfo();\\n            collInfos.price = IOpenMarketable(payable(collection)).defaultPrice();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7342d93c5ae0c04b185b0904f31c32f7c1e425cbf6b403129b9723dec6bfee9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5130,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5132,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8276,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_numAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8279,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8281,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "registerer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7443,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_ercInterfaceIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes4)dyn_storage"
      },
      {
        "astId": 20854,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_interfaceIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes4)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}