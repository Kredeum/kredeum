{
  "address": "0x88A9B09B081CA46daEa53f170d8da27490a16b82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "checkErcInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "erc",
          "type": "bool"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "minimal",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos",
          "name": "openNTFscollectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "minimal",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]",
          "name": "openNFTsCollectionsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos",
          "name": "openNTFsNftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos[]",
          "name": "openNTFsNftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getOpenNFTsNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos[]",
          "name": "openNTFsNftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "smartcontracts",
          "type": "address[]"
        }
      ],
      "name": "isCollections",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "checks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "name": "setRegisterer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf11586a84b633a8fa3b19b66d734011290f3ccc4816beb7af7c5b0a0e9d554c8",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x88A9B09B081CA46daEa53f170d8da27490a16b82",
    "transactionIndex": 1,
    "gasUsed": "7664919",
    "logsBloom": "0x
    "blockHash": "0x95eefee0f055733c8cac6610dddb55e1d6a273ff36d0e877839d9e3be31ff9e6",
    "transactionHash": "0xf11586a84b633a8fa3b19b66d734011290f3ccc4816beb7af7c5b0a0e9d554c8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 34407063,
        "transactionHash": "0xf11586a84b633a8fa3b19b66d734011290f3ccc4816beb7af7c5b0a0e9d554c8",
        "address": "0x88A9B09B081CA46daEa53f170d8da27490a16b82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x95eefee0f055733c8cac6610dddb55e1d6a273ff36d0e877839d9e3be31ff9e6"
      }
    ],
    "blockNumber": 34407063,
    "cumulativeGasUsed": "7664919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "0x5E03Acd53d5D3A834278014D91F0AFD36f8147Ce"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e80473bc7bc14006887fc6ef0e30584",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"checkErcInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"erc\",\"type\":\"bool\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"minimal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos\",\"name\":\"openNTFscollectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"minimal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]\",\"name\":\"openNFTsCollectionsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos[]\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getOpenNFTsNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos[]\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"smartcontracts\",\"type\":\"address[]\"}],\"name\":\"isCollections\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"checks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"name\":\"setRegisterer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/OpenNFTsResolver.sol\":\"OpenNFTsResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Already initialized\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xeaa767265a7f2805563fa0830dac552b6c55b5660499fbeba8609fadc4bc2e7e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    /// _ercInterfaceIds : ERC interfacesIds\\n    /// 0xffffffff :  O Invalid\\n    /// 0x01ffc9a7 :  1 ERC165\\n    /// 0x80ac58cd :  2 ERC721\\n    /// 0x5b5e139f :  3 ERC721Metadata\\n    /// 0x780e9d63 :  4 ERC721Enumerable\\n    /// 0x150b7a02 :  5 ERC721TokenReceiver\\n    /// 0xd9b67a26 :  6 ERC1155\\n    /// 0x0e89341c :  7 ERC1155MetadataURI\\n    /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n    /// 0x7f5828d0 :  9 ERC173\\n    /// 0x2a55205a : 10 ERC2981\\n    bytes4[] private _ercInterfaceIds = [\\n        bytes4(0xffffffff),\\n        bytes4(0x01ffc9a7),\\n        bytes4(0x80ac58cd),\\n        bytes4(0x5b5e139f),\\n        bytes4(0x780e9d63),\\n        bytes4(0x150b7a02),\\n        bytes4(0xd9b67a26),\\n        bytes4(0x0e89341c),\\n        bytes4(0x4e2312e0),\\n        bytes4(0x7f5828d0),\\n        bytes4(0x2a55205a)\\n    ];\\n\\n    modifier onlyContract(address account) {\\n        require(account.code.length > 0, \\\"Not smartcontract\\\");\\n        _;\\n    }\\n\\n    function isCollections(address[] memory smartcontracts)\\n        public\\n        view\\n        override (IOpenChecker)\\n        returns (bool[] memory checks)\\n    {\\n        checks = new bool[](smartcontracts.length);\\n\\n        for (uint256 i = 0; i < smartcontracts.length; i++) {\\n            checks[i] = isCollection(smartcontracts[i]);\\n        }\\n    }\\n\\n    // TODO check only 4 interfaces\\n    function isCollection(address smartcontract)\\n        public\\n        view\\n        override (IOpenChecker)\\n        onlyContract(smartcontract)\\n        returns (bool)\\n    {\\n        bool[] memory checks = checkErcInterfaces(smartcontract);\\n\\n        // ERC165 and (ERC721 or ERC1155)\\n        return !checks[0] && checks[1] && (checks[2] || checks[6]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function checkErcInterfaces(address smartcontract)\\n        public\\n        view\\n        override (IOpenChecker)\\n        returns (bool[] memory)\\n    {\\n        return checkSupportedInterfaces(smartcontract, true, new bytes4[](0));\\n    }\\n\\n    function checkSupportedInterfaces(address smartcontract, bool erc, bytes4[] memory interfaceIds)\\n        public\\n        view\\n        override (IOpenChecker)\\n        onlyContract(smartcontract)\\n        returns (bool[] memory interfaceIdsChecks)\\n    {\\n        uint256 i;\\n        uint256 len = (erc ? _ercInterfaceIds.length : 0) + interfaceIds.length;\\n\\n        interfaceIdsChecks = new bool[](len);\\n\\n        if (erc) {\\n            for (uint256 j = 0; j < _ercInterfaceIds.length; j++) {\\n                interfaceIdsChecks[i++] =\\n                    IERC165(smartcontract).supportsInterface(_ercInterfaceIds[j]);\\n            }\\n        }\\n        for (uint256 k = 0; k < interfaceIds.length; k++) {\\n            interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(interfaceIds[k]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b0c000d6f36259e5db26fabd8c6f377c6ca56fca066186b7e3bb353809de2bc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenChecker\\n//        |\\n//  OpenGetter \\u2014\\u2014 IOpenGetter\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenGetter is IOpenGetter, OpenChecker {\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenChecker)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenGetter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionInfos(address collection, address account)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (\\n            // override(IOpenGetter)\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = _getCollectionInfos(collection, account, new bytes4[](0));\\n    }\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos)\\n    {\\n        nftsInfos = new NftInfos[](tokenIDs.length);\\n        for (uint256 i; i < tokenIDs.length; i++) {\\n            nftsInfos[i] = _getNftInfos(collection, tokenIDs[i], account);\\n        }\\n    }\\n\\n    function getNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos, uint256 count, uint256 total)\\n    {\\n        bool[] memory supported = checkErcInterfaces(collection);\\n\\n        // IF ERC721 & ERC721Enumerable supported\\n        if (supported[2] && supported[4]) {\\n            if (account == address(0)) {\\n                total = IERC721Enumerable(collection).totalSupply();\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = _getNftInfos(\\n                        collection, IERC721Enumerable(collection).tokenByIndex(offset + i), account\\n                    );\\n                }\\n            } else {\\n                total = IERC721(collection).balanceOf(account);\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = _getNftInfos(\\n                        collection,\\n                        IERC721Enumerable(collection).tokenOfOwnerByIndex(account, offset + i),\\n                        account\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getNftInfos(address collection, uint256 tokenID, address account)\\n        public\\n        view\\n        override (IOpenGetter)\\n        returns (NftInfos memory nftInfos)\\n    {\\n        return _getNftInfos(collection, tokenID, account);\\n    }\\n\\n    function _getNftInfos(address collection, uint256 tokenID, address account)\\n        internal\\n        view\\n        onlyContract(collection)\\n        returns (NftInfos memory nftInfos)\\n    {\\n        nftInfos.tokenID = tokenID;\\n        nftInfos.approved = IERC721(collection).getApproved(tokenID);\\n        nftInfos.owner = IERC721(collection).ownerOf(tokenID);\\n\\n        if (IERC165(collection).supportsInterface(0x5b5e139f)) {\\n            // ERC721Metadata\\n            nftInfos.tokenURI = IERC721Metadata(collection).tokenURI(tokenID);\\n        } else if (IERC165(collection).supportsInterface(0x0e89341c)) {\\n            // ERC1155MetadataURI\\n            nftInfos.tokenURI = IERC1155MetadataURI(collection).uri(tokenID);\\n            nftInfos.balanceOf = IERC1155(collection).balanceOf(account, tokenID);\\n        }\\n    }\\n\\n    function _getCollectionInfos(address collection, address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        onlyContract(collection)\\n        returns (CollectionInfos memory collectionInfos)\\n    {\\n        bool[] memory supported = checkSupportedInterfaces(collection, true, interfaceIds);\\n        collectionInfos.supported = supported;\\n\\n        // ERC165 must be supported\\n        require(!supported[0] && supported[1], \\\"Not ERC165\\\");\\n\\n        // ERC721 or ERC1155 must be supported\\n        require(supported[2] || supported[6], \\\"Not NFT smartcontract\\\");\\n\\n        collectionInfos.collection = collection;\\n\\n        // try ERC173 owner\\n        try IERC173(collection).owner() returns (address owner) {\\n            collectionInfos.owner = owner;\\n        } catch {}\\n\\n        // try ERC721Metadata name\\n        try IERC721Metadata(collection).name() returns (string memory name) {\\n            collectionInfos.name = name;\\n        } catch {}\\n\\n        // try ERC721Metadata symbol\\n        try IERC721Metadata(collection).symbol() returns (string memory symbol) {\\n            collectionInfos.symbol = symbol;\\n        } catch {}\\n\\n        // try ERC721Enumerable totalSupply\\n        try IERC721Enumerable(collection).totalSupply() returns (uint256 totalSupply) {\\n            collectionInfos.totalSupply = totalSupply;\\n        } catch {}\\n\\n        if (account != address(0)) {\\n            try IERC721(collection).balanceOf(account) returns (uint256 balanceOf) {\\n                collectionInfos.balanceOf = balanceOf;\\n            } catch {}\\n\\n            try IERC721(collection).isApprovedForAll(account, collection) returns (\\n                bool approvedForAll\\n            ) {\\n                collectionInfos.approvedForAll = approvedForAll;\\n            } catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36be0f910b55f8921c28fe99acf99ed573fdf603b528f763993de6e5d40f6ac0\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenRegistry \\u2014\\u2014 IOpenRegistry\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\\\";\\n\\nabstract contract OpenRegistry is IOpenRegistry, OpenERC173 {\\n    mapping(address => uint256) private _numAddress;\\n    address[] private _addresses;\\n    address public registerer;\\n\\n    /// @notice onlyRegisterer, by default owner is registerer and can add addresses, can be overriden\\n    modifier onlyRegisterer() virtual {\\n        require(msg.sender == owner() || msg.sender == registerer, \\\"Not registerer nor owner\\\");\\n        _;\\n    }\\n\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address) virtual {\\n        _;\\n    }\\n\\n    function setRegisterer(address registerer_) external override (IOpenRegistry) onlyOwner {\\n        _setRegisterer(registerer_);\\n    }\\n\\n    function addAddresses(address[] memory addrs) external override (IOpenRegistry) {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            _addAddress(addrs[i]);\\n        }\\n    }\\n\\n    function addAddress(address addr) external override (IOpenRegistry) {\\n        _addAddress(addr);\\n    }\\n\\n    function removeAddress(address addr) external override (IOpenRegistry) {\\n        _removeAddress(addr);\\n    }\\n\\n    function countAddresses() external view override (IOpenRegistry) returns (uint256) {\\n        return _addresses.length;\\n    }\\n\\n    function isRegistered(address addr) public view returns (bool) {\\n        return _numAddress[addr] >= 1;\\n    }\\n\\n    function getAddresses() public view override (IOpenRegistry) returns (address[] memory) {\\n        return _addresses;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC173)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenRegistry).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setRegisterer(address registerer_) internal {\\n        registerer = registerer_;\\n    }\\n\\n    function _addAddress(address addr) private onlyRegisterer onlyValid(addr) {\\n        if (!isRegistered(addr)) {\\n            _addresses.push(addr);\\n            _numAddress[addr] = _addresses.length;\\n        }\\n    }\\n\\n    function _removeAddress(address addr) private onlyRegisterer {\\n        require(isRegistered(addr), \\\"Not registered\\\");\\n\\n        uint256 num = _numAddress[addr];\\n        if (num != _addresses.length) {\\n            address addrLast = _addresses[_addresses.length - 1];\\n            _addresses[num - 1] = addrLast;\\n            _numAddress[addrLast] = num;\\n        }\\n\\n        delete (_numAddress[addr]);\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xbaa84ac674d9e0e04d05ae825b0b9e49ba804de0ad364fe959f5cef3deaa015b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |              |\\n//   OpenChecker     OpenERC173\\n//        |              |\\n//    OpenGetter    OpenRegistry\\n//        |              |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenResolver \\u2014\\u2014 IOpenResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\\\";\\n\\nabstract contract OpenResolver is IOpenResolver, OpenRegistry, OpenGetter {\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address addr) override (OpenRegistry) {\\n        require(isCollection(addr), \\\"Not Collection\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenRegistry, OpenGetter)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenResolver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) public view override (IOpenResolver) returns (CollectionInfos[] memory collectionsInfos) {\\n        collectionsInfos = new CollectionInfos[](collections.length);\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            collectionsInfos[i] = _getCollectionInfos(collections[i], account, interfaceIds);\\n        }\\n    }\\n\\n    function _getCollectionsInfos(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        CollectionInfos[] memory collectionsInfosAll =\\n            getCollectionsInfos(getAddresses(), account, interfaceIds);\\n\\n        uint256 len;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                len++;\\n            }\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](len);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j++] = collectionsInfosAll[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa17b3dea4f2325fe7fe7f4414fa7200c21c0d0d97408aa844cb5d4d40cbe6d2d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC1155 {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xff91d8751efa6e343a4cf1ac5bd1be1c74204a7d4f3e042aaf961d9445bec67f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155METADATAURI.sol)\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC1155MetadataURI {\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcb0aef2ef470e3546050a51b93d26fa56f62ac4ffe038a3d4d24c54c43aa3fd0\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155TokenReceiver.sol)\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC1155TokenReceiver {\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external returns (bytes4);\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8d9a2baf785729b2a1bc3b679a478321a98b90246cfdd590b942b54461abebdd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd91f944d2ad53e9c795a855167e495d4b533648a349fcb913e631cfe7b4013b7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x82d41cc520f5c9057e7bfc07873e3b9529792141e18dd5983bd882939879b9ef\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x05f823f0200e240d7187bdbe515f72d64e1eadbb137971e5c1e9a3c64ad04cd6\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1b0093a40ef61bbd99626cf148b24308677df0593ff427c3d4aed2fa1253e1a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data)\\n        external\\n        payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb17e8fbff5f139c0d2eb98e9841cb8b97e5b003436c3f3412a350503b87f94cb\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd040488949e399674a34c9b01b34245d76e41ab267620f49f171aae14d07875f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Events {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x11878cede4e6c7981e72dd32070f8cd777abfffbee70cd3dc85d62606a87c8a1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x72918d0b7d703c5cf08686014c2e0127ed56411c72c551232038ebcec4facc4d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa43438f26b96a4a3a488e1e9701ee7291e238498c27bb45a9530fe11dc865896\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// Infos of either ERC721 or ERC1155 NFT\\ninterface IERCNftInfos {\\n    enum NftType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct CollectionInfos {\\n        address collection;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        uint256 balanceOf;\\n        bool approvedForAll;\\n        bool[] supported;\\n        NftType erc;\\n    }\\n\\n    struct NftInfos {\\n        uint256 tokenID;\\n        string tokenURI;\\n        address owner;\\n        address approved;\\n        uint256 balanceOf;\\n        NftType erc;\\n    }\\n}\\n\",\"keccak256\":\"0xcdd83b22b05bbcf43d7477cdffad0830ec6e430788dac7063daa71ee53076ecf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenChecker {\\n    function checkErcInterfaces(address smartcontract)\\n        external\\n        view\\n        returns (bool[] memory interfaceIdsChecks);\\n\\n    function checkSupportedInterfaces(address smartcontract, bool erc, bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (bool[] memory interfaceIdsChecks);\\n\\n    function isCollection(address collection) external view returns (bool check);\\n\\n    function isCollections(address[] memory collection)\\n        external\\n        view\\n        returns (bool[] memory checks);\\n}\\n\",\"keccak256\":\"0xb61d39473ba451c4bd87de7c2d83553271423aac3d1e6777fb6e58defa87560c\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    ) external;\\n\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function parent() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfe05d618575b64ab5bfc944249e4a824949f576ee1e4ed8d3036b7a21ebeb62\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenGetter is IERCNftInfos {\\n    function getCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos);\\n\\n    function getNftInfos(address collection, uint256 tokenID, address account)\\n        external\\n        view\\n        returns (NftInfos memory nftInfos);\\n\\n    function getNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos, uint256 count, uint256 total);\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos);\\n}\\n\",\"keccak256\":\"0xa80d8a6f1c83d9891d9dbf6d3f5558e4ee066366647717958b74385b8731d765\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\\\";\\n\\ninterface IOpenMarketable is IOpenReceiverInfos {\\n    enum Approve {\\n        None,\\n        One,\\n        All\\n    }\\n\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetMintPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(\\n        uint256 tokenID,\\n        uint256 price,\\n        address seller,\\n        uint256 paid,\\n        address receiver,\\n        uint256 royalties,\\n        uint256 fee,\\n        address buyer,\\n        uint256 unspent\\n    );\\n\\n    receive() external payable;\\n\\n    function withdraw() external;\\n\\n    function setMintPrice(uint256 price) external;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function minimal() external view returns (bool);\\n\\n    function getMintPrice() external view returns (uint256 price);\\n\\n    function getDefaultRoyalty() external view returns (ReceiverInfos memory receiver);\\n\\n    function getTokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getTokenRoyalty(uint256 tokenID)\\n        external\\n        view\\n        returns (ReceiverInfos memory receiver);\\n}\\n\",\"keccak256\":\"0x5eb0c256c3745f7fb55db4be4e85022f79cdcc964563f3634d1ab84561a44005\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x2acd2b95f34c657d34df488923bfc6d54854dd6bcb989ad38e71d9dad609ab2a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenReceiverInfos {\\n    struct ReceiverInfos {\\n        address account;\\n        uint96 fee;\\n        uint256 minimum;\\n    }\\n}\\n\",\"keccak256\":\"0x793d5e3b6f4570ae955da4950373c74f290b7d4dcf761b2d1b5ecda5f13cb3f8\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenRegistry {\\n    function setRegisterer(address registerer) external;\\n\\n    function removeAddress(address addr) external;\\n\\n    function addAddress(address addr) external;\\n\\n    function addAddresses(address[] memory addrs) external;\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function registerer() external view returns (address);\\n\\n    function countAddresses() external view returns (uint256);\\n\\n    function isRegistered(address addr) external view returns (bool registered);\\n}\\n\",\"keccak256\":\"0x79c45f2de6f608b1fed916aa54290f5ba34e67232e50304a16e4ee3a9279f742\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenResolver is IERCNftInfos {\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) external view returns (CollectionInfos[] memory collectionsInfos);\\n}\\n\",\"keccak256\":\"0x4f8b5116dfe86ce9ffda8cb508dcf43afdcd6a993fa6679332df117d08984915\",\"license\":\"MIT\"},\"contracts/interfaces/IAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Events.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nimport \\\"./ICloneFactoryV2.sol\\\";\\nimport \\\"./INFTsFactoryV2.sol\\\";\\nimport \\\"./IOpenNFTsFactoryV3.sol\\\";\\nimport \\\"./IOpenNFTsV0.sol\\\";\\nimport \\\"./IOpenNFTsV1.sol\\\";\\nimport \\\"./IOpenNFTsV2.sol\\\";\\nimport \\\"./IOpenNFTsV3.sol\\\";\\nimport \\\"./IOpenNFTsV4.sol\\\";\\nimport \\\"./IOpenAutoMarket.sol\\\";\\nimport \\\"./IOpenBound.sol\\\";\\n\",\"keccak256\":\"0x2d5813e73b0149c12cb279140c9a75f5149eeb37c9e2b067c16120502d7d4a54\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    /// @notice New Implementation Event\\n    /// @param implementation Address of the implementation\\n    /// @param creator Address of the creator\\n    /// @return index Index inside implementations array (starts at 0)\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 index);\\n\\n    /// @notice Set Template Event\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    event TemplateSet(string indexed templateName, address indexed template);\\n\\n    /// @notice Set Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    /// @notice Add Implementation\\n    /// @param implementationToAdd Addresses of implementations to add\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n\\n    /// @notice Get Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templates(string calldata templateName) external view returns (address template);\\n\\n    /// @notice Count Implementations\\n    /// @return count Number of implementations\\n    function implementationsCount() external view returns (uint256 count);\\n\\n    /// @notice Get Implementation from Implementations array\\n    /// @param index Index of implementation\\n    /// @return implementation Address of implementation\\n    function implementations(uint256 index) external view returns (address implementation);\\n}\\n\",\"keccak256\":\"0x35d10451fed638bd375b4b1c5ce204672a60bc88c02e2e05bddd1a390fd24dba\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n}\\n\",\"keccak256\":\"0x47eb8674dd1aca360ae359cfe5352c5d668743c8facb8f014fa86163e8f4b222\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenAutoMarket {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function gift(address to, uint256 tokenID) external payable;\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x82f3b8f6daaac6fb199e4b7e7bc67c64c23e6559bc6390cc1c6970833eefc9d4\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9add46ca382a3094261d2491b3248d39a8cb9e6511bc342405bf884e8b3f68de\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsFactoryV3 {\\n    event Clone(string indexed templateName, address indexed clone, string indexed name, string symbol);\\n\\n    event SetResolver(address indexed resolver);\\n\\n    event SetTemplate(string indexed templateName, address indexed template, uint256 index);\\n\\n    function setResolver(address resolver) external;\\n\\n    function setTreasury(address treasury, uint96 treasuryFee) external;\\n\\n    function setTemplate(string memory templateName, address template) external;\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bytes memory params\\n    ) external returns (address);\\n\\n    function template(string memory templateName) external view returns (address);\\n\\n    function templates(uint256 num) external view returns (address);\\n\\n    function countTemplates() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdcdc486fe27a456f8fbf1fa51c1ddb0df5dc5b872359e6fbdd00e985f2e29b6e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\\\";\\n\\ninterface IOpenNFTsInfos is IERCNftInfos, IOpenReceiverInfos {\\n    struct OpenNFTsCollectionInfos {\\n        uint256 version;\\n        string template;\\n        bool open;\\n        bool minimal;\\n        uint256 price;\\n        ReceiverInfos receiver;\\n    }\\n\\n    struct OpenNFTsNftInfos {\\n        uint256 price;\\n        ReceiverInfos receiver;\\n    }\\n}\\n\",\"keccak256\":\"0x8126b17b74b44b33e95c5f07e7934c1d94d7c80c695ad38c760376cee15702df\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IOpenNFTsInfos.sol\\\";\\n\\ninterface IOpenNFTsResolver is IOpenNFTsInfos {\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        address account,\\n        uint256 limit,\\n        uint256 offset\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        uint256[] memory tokenIDs,\\n        address account\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos\\n        );\\n\\n    function getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        address account\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos memory nftInfos,\\n            OpenNFTsNftInfos memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos\\n        );\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        returns (\\n            CollectionInfos[] memory collectionsInfos,\\n            OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos);\\n}\\n\",\"keccak256\":\"0xd915c66414928660b4a6ee13dbb50f6e4bcbd32fba1d52e0672100325e0fd6f6\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV0 {\\n    function addUser(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xe409f8641290b1e34b3e748b1b83fb35e9a061302332353a8d096d8d20fa8fbe\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV1 {\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xc2298aa6c7becd112e6af3a96913fbfda48ff6fffe8ae938b25070e2e3d1a208\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID_);\\n\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x80f5c8bb99040e627368daefd93db5e81fd7c9847121abebe99413136c54bfa2\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function open() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0a3219e3307cbca3c2cd582c9686517240a634cde3fa77487297766ba5c1005d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdfd006aba290d23d098b222b5b8c59d1a98f462e7ac20d2d4aa35b82ff0d3b76\",\"license\":\"MIT\"},\"contracts/next/OpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//    OpenERC165\\n//        |\\n//  OpenResolver\\n//        |\\n//  OpenNFTsResolver \\u2014\\u2014 IOpenNFTsResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsResolver.sol\\\";\\nimport \\\"../interfaces/IAll.sol\\\";\\n\\ncontract OpenNFTsResolver is IOpenNFTsResolver, OpenResolver {\\n    bytes4[] private _interfaceIds = new bytes4[](12);\\n\\n    uint8 private constant _IERC_2981 = 10;\\n    uint8 private constant _IERC_LENGTH = 11;\\n\\n    uint8 private constant _IOPEN_NFTS = _IERC_LENGTH + 0;\\n    uint8 private constant _IOPEN_CHECKER = _IERC_LENGTH + 1;\\n    uint8 private constant _IOPEN_CLONEABLE = _IERC_LENGTH + 2;\\n    uint8 private constant _IOPEN_MARKETABLE = _IERC_LENGTH + 3;\\n    uint8 private constant _IOPEN_PAUSEABLE = _IERC_LENGTH + 4;\\n\\n    uint8 private constant _IOPEN_NFTS_V0 = _IERC_LENGTH + 5;\\n    uint8 private constant _IOPEN_NFTS_V1 = _IERC_LENGTH + 6;\\n    uint8 private constant _IOPEN_NFTS_V2 = _IERC_LENGTH + 7;\\n    uint8 private constant _IOPEN_NFTS_V3 = _IERC_LENGTH + 8;\\n    uint8 private constant _IOPEN_NFTS_V4 = _IERC_LENGTH + 9;\\n    uint8 private constant _IOPEN_AUTOMARKET = _IERC_LENGTH + 10;\\n    uint8 private constant _IOPEN_BOUND = _IERC_LENGTH + 11;\\n\\n    constructor(address owner_, address registerer_) {\\n        OpenERC173._initialize(owner_);\\n        OpenRegistry._setRegisterer(registerer_);\\n\\n        /// 0xffffffff :  O Invalid\\n        /// 0x01ffc9a7 :  1 ERC165\\n        /// 0x80ac58cd :  2 ERC721\\n        /// 0x5b5e139f :  3 ERC721Metadata\\n        /// 0x780e9d63 :  4 ERC721Enumerable\\n        /// 0x150b7a02 :  5 ERC721TokenReceiver\\n        /// 0xd9b67a26 :  6 ERC1155\\n        /// 0x0e89341c :  7 ERC1155MetadataURI\\n        /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n        /// 0x7f5828d0 :  9 ERC173\\n        /// 0x2a55205a : 10 ERC2981\\n\\n        _interfaceIds[_IOPEN_NFTS - _IERC_LENGTH] = type(IOpenNFTs).interfaceId;\\n        _interfaceIds[_IOPEN_CHECKER - _IERC_LENGTH] = type(IOpenChecker).interfaceId;\\n        _interfaceIds[_IOPEN_CLONEABLE - _IERC_LENGTH] = type(IOpenCloneable).interfaceId;\\n        _interfaceIds[_IOPEN_MARKETABLE - _IERC_LENGTH] = type(IOpenMarketable).interfaceId;\\n        _interfaceIds[_IOPEN_PAUSEABLE - _IERC_LENGTH] = type(IOpenPauseable).interfaceId;\\n\\n        _interfaceIds[_IOPEN_NFTS_V0 - _IERC_LENGTH] = type(IOpenNFTsV0).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V1 - _IERC_LENGTH] = type(IOpenNFTsV1).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V2 - _IERC_LENGTH] = type(IOpenNFTsV2).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V3 - _IERC_LENGTH] = type(IOpenNFTsV3).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V4 - _IERC_LENGTH] = type(IOpenNFTsV4).interfaceId;\\n        _interfaceIds[_IOPEN_AUTOMARKET - _IERC_LENGTH] = type(IOpenAutoMarket).interfaceId;\\n        _interfaceIds[_IOPEN_BOUND - _IERC_LENGTH] = type(IOpenBound).interfaceId;\\n    }\\n\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        address account,\\n        uint256 limit,\\n        uint256 offset\\n    )\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n\\n        (nftInfos, count, total) = OpenGetter.getNftsInfos(collection, account, limit, offset);\\n\\n        openNTFsNftInfos = new OpenNFTsNftInfos[](nftInfos.length);\\n        for (uint256 i = 0; i < nftInfos.length; i++) {\\n            openNTFsNftInfos[i] = _getOpenNFTsNftInfos(collection, nftInfos[i].tokenID, collectionInfos.supported);\\n        }\\n    }\\n\\n    function getOpenNFTsNftsInfos(\\n        address collection,\\n        uint256[] memory tokenIDs,\\n        address account\\n    )\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, address(0), _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftsInfos(collection, tokenIDs, account);\\n        openNTFsNftInfos = new OpenNFTsNftInfos[](tokenIDs.length);\\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\\n            openNTFsNftInfos[i] = _getOpenNFTsNftInfos(collection, tokenIDs[i], collectionInfos.supported);\\n        }\\n    }\\n\\n    function getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        address account\\n    )\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos memory nftInfos,\\n            OpenNFTsNftInfos memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftInfos(collection, tokenID, account);\\n        openNTFsNftInfos = _getOpenNFTsNftInfos(collection, tokenID, collectionInfos.supported);\\n    }\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            CollectionInfos[] memory collectionsInfos,\\n            OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, _interfaceIds);\\n        total = collectionsInfosAll.length;\\n\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                count++;\\n            }\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](count);\\n        openNFTsCollectionsInfos = new OpenNFTsCollectionInfos[](count);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < total; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j] = collectionsInfosAll[i];\\n                openNFTsCollectionsInfos[j] = _getOpenNFTsCollectionInfos(\\n                    collectionsInfosAll[i].collection,\\n                    collectionsInfosAll[i].supported\\n                );\\n                j++;\\n            }\\n        }\\n    }\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos)\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n        openNTFscollectionInfos = _getOpenNFTsCollectionInfos(collection, collectionInfos.supported);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenResolver) returns (bool) {\\n        return interfaceId == type(IOpenNFTsResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        bool[] memory supported\\n    ) internal view returns (OpenNFTsNftInfos memory nftInfos) {\\n        if (supported[_IOPEN_MARKETABLE]) {\\n            nftInfos.receiver = IOpenMarketable(payable(collection)).getTokenRoyalty(tokenID);\\n            nftInfos.price = IOpenMarketable(payable(collection)).getTokenPrice(tokenID);\\n        } else if (supported[_IERC_2981]) {\\n            (nftInfos.receiver.account, ) = IERC2981(payable(collection)).royaltyInfo(tokenID, 1);\\n        }\\n    }\\n\\n    function _getOpenNFTsCollectionInfos(address collection, bool[] memory supported)\\n        internal\\n        view\\n        returns (OpenNFTsCollectionInfos memory collInfos)\\n    {\\n        if (supported[_IOPEN_CLONEABLE]) {\\n            collInfos.version = IOpenCloneable(collection).version(); // 4\\n            collInfos.template = IOpenCloneable(collection).template(); // OpenNFTsV4 or OpenBound\\n            collInfos.open = IOpenNFTsV4(collection).open();\\n        } else if (supported[_IOPEN_NFTS_V3]) {\\n            collInfos.version = 3;\\n            collInfos.template = \\\"OpenNFTsV3\\\";\\n            collInfos.open = IOpenNFTsV3(collection).open();\\n        } else if (supported[_IOPEN_NFTS_V2]) {\\n            collInfos.version = 2;\\n        } else if (supported[_IOPEN_NFTS_V1]) {\\n            collInfos.version = 1;\\n        }\\n\\n        if (supported[_IOPEN_MARKETABLE]) {\\n            collInfos.receiver = IOpenMarketable(payable(collection)).getDefaultRoyalty();\\n            collInfos.price = IOpenMarketable(payable(collection)).getMintPrice();\\n            collInfos.minimal = IOpenMarketable(payable(collection)).minimal();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x272aa7f2ae734c51b0d4dfb529036482e3ff43b7267b674f172d39044e85fb22\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040526001600160e01b031960809081526301ffc9a760e01b60a0526380ac58cd60e01b60c052635b5e139f60e01b60e05263780e9d6360e01b61010052630a85bd0160e11b61012052636cdb3d1360e11b610140526303a24d0760e21b61016052630271189760e51b610180526307f5828d60e41b6101a05263152a902d60e11b6101c0526200009890600490600b6200073a565b5060408051600c8082526101a0820190925290602082016101808036833750508151620000cd9260059250602001906200073a565b50348015620000db57600080fd5b506040516200410638038062004106833981016040819052620000fe9162000821565b62000114826200064c60201b620016f01760201c565b6200012a81620006bf60201b6200174f1760201c565b639248994960e01b6005600b620001438160006200086f565b6200014f919062000897565b60ff1681548110620001655762000165620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063118a575f60e01b6005600b806001620001b091906200086f565b620001bc919062000897565b60ff1681548110620001d257620001d2620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506350130d5360e01b6005600b8060026200021d91906200086f565b62000229919062000897565b60ff16815481106200023f576200023f620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506386bbc65360e01b6005600b8060036200028a91906200086f565b62000296919062000897565b60ff1681548110620002ac57620002ac620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506398396bd360e01b6005600b806004620002f791906200086f565b62000303919062000897565b60ff1681548110620003195762000319620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550634b68d43160e01b6005600b8060056200036491906200086f565b62000370919062000897565b60ff1681548110620003865762000386620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550633ab2af8560e21b6005600b806006620003d191906200086f565b620003dd919062000897565b60ff1681548110620003f357620003f3620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550636ca50ed960e11b6005600b8060076200043e91906200086f565b6200044a919062000897565b60ff1681548110620004605762000460620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550635c838d8b60e01b6005600b806008620004ab91906200086f565b620004b7919062000897565b60ff1681548110620004cd57620004cd620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063b6ea550160e01b6005600b8060096200051891906200086f565b62000524919062000897565b60ff16815481106200053a576200053a620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063393a4ff760e11b6005600b80600a6200058591906200086f565b62000591919062000897565b60ff1681548110620005a757620005a7620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063da405d7960e01b6005600b80600b620005f291906200086f565b620005fe919062000897565b60ff1681548110620006145762000614620008bd565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505050620008d3565b60005460ff1615620006a45760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015260640160405180910390fd5b6000805460ff19166001179055620006bc81620006e1565b50565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b82805482825590600052602060002090600701600890048101928215620007db5791602002820160005b83821115620007a757835183826101000a81548163ffffffff021916908360e01c0217905550926020019260040160208160030104928301926001030262000764565b8015620007d95782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620007a7565b505b50620007e9929150620007ed565b5090565b5b80821115620007e95760008155600101620007ee565b80516001600160a01b03811681146200081c57600080fd5b919050565b600080604083850312156200083557600080fd5b620008408362000804565b9150620008506020840162000804565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff038211156200088f576200088f62000859565b019392505050565b600060ff821660ff841680821015620008b457620008b462000859565b90039392505050565b634e487b7160e01b600052603260045260246000fd5b61382380620008e36000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636e228dab116100de578063c3c5a54711610097578063dceba60411610071578063dceba604146103d0578063e47a60f6146103f1578063ec530de614610415578063f2fde38b1461042657600080fd5b8063c3c5a5471461035d578063cdaafcd61461038b578063db668ce0146103ad57600080fd5b80636e228dab146102b65780638da5cb5b146102c9578063a39fac12146102f3578063a8e719ce14610308578063b172cbd11461031b578063c21ba2121461033d57600080fd5b8063490f06eb11610130578063490f06eb1461022a5780634ba79dfe1461024a57806350da677b1461025d5780635ee9a1d21461027d5780635fa15ebb14610290578063690682a4146102a357600080fd5b806301ffc9a7146101785780632eb723a2146101a057806334f8674a146101c05780633628731c146101e257806338eada1c146101f75780633f0faf1d1461020a575b600080fd5b61018b610186366004612b7b565b610439565b60405190151581526020015b60405180910390f35b6101b36101ae366004612bb6565b610464565b6040516101979190612d80565b6101d36101ce366004612dfc565b61048f565b60405161019793929190612fe5565b6101f56101f0366004613097565b6105f5565b005b6101f56102053660046130cb565b610639565b61021d610218366004612dfc565b610645565b60405161019791906130e8565b61023d6102383660046130cb565b610704565b60405161019791906130fb565b6101f56102583660046130cb565b61073d565b61027061026b3660046131a3565b610746565b6040516101979190613262565b6101f561028b3660046130cb565b6107fd565b61018b61029e3660046130cb565b610856565b61023d6102b1366004613283565b61091d565b61023d6102c4366004613097565b610bbf565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610197565b6102fb610c68565b60405161019791906132da565b6003546102db906001600160a01b031681565b61032e61032936600461331b565b610cca565b6040516101979392919061335d565b61035061034b36600461331b565b610d72565b604051610197919061338f565b61018b61036b3660046130cb565b6001600160a01b0316600090815260016020819052604090912054101590565b61039e6103993660046133a2565b610d8d565b604051610197939291906133e8565b6103c06103bb3660046130cb565b6111b9565b604051610197949392919061348a565b6103e36103de366004612bb6565b6114b8565b60405161019792919061350b565b6104046103ff3660046133a2565b611548565b604051610197959493929190613539565b600254604051908152602001610197565b6101f56104343660046130cb565b61169c565b60006001600160e01b0319821663667de68960e01b148061045e575061045e82611771565b92915050565b61046c612a1e565b6040805160008152602081019091526104889084908490611796565b9392505050565b60608061049a612a1e565b610523866000600580548060200260200160405190810160405280929190818152602001828054801561051957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104db5790505b5050505050611796565b9050610530868686610645565b925084516001600160401b0381111561054b5761054b612d93565b60405190808252806020026020018201604052801561058457816020015b610571612a8e565b8152602001906001900390816105695790505b50915060005b85518110156105eb576105bb878783815181106105a9576105a9613587565b60200260200101518460e00151611bf9565b8382815181106105cd576105cd613587565b602002602001018190525080806105e3906135b3565b91505061058a565b5093509350939050565b60005b81518110156106355761062382828151811061061657610616613587565b6020026020010151611de5565b8061062d816135b3565b9150506105f8565b5050565b61064281611de5565b50565b606082516001600160401b0381111561066057610660612d93565b60405190808252806020026020018201604052801561069957816020015b610686612ac3565b81526020019060019003908161067e5790505b50905060005b83518110156106fc576106cc858583815181106106be576106be613587565b602002602001015185611f31565b8282815181106106de576106de613587565b602002602001018190525080806106f4906135b3565b91505061069f565b509392505050565b606061045e8260016000604051908082528060200260200182016040528015610737578160200160208202803683370190505b5061091d565b61064281612303565b606083516001600160401b0381111561076157610761612d93565b60405190808252806020026020018201604052801561079a57816020015b610787612a1e565b81526020019060019003908161077f5790505b50905060005b84518110156106fc576107cd8582815181106107be576107be613587565b60200260200101518585611796565b8282815181106107df576107df613587565b602002602001018190525080806107f5906135b3565b9150506107a0565b60005461010090046001600160a01b0316331461084d5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6106428161174f565b6000816000816001600160a01b03163b116108835760405162461bcd60e51b8152600401610844906135ce565b600061088e84610704565b9050806000815181106108a3576108a3613587565b60200260200101511580156108cf5750806001815181106108c6576108c6613587565b60200260200101515b80156109135750806002815181106108e9576108e9613587565b60200260200101518061091357508060068151811061090a5761090a613587565b60200260200101515b9250505b50919050565b6060836000816001600160a01b03163b1161094a5760405162461bcd60e51b8152600401610844906135ce565b60008084518661095b57600061095f565b6004545b61096991906135f9565b9050806001600160401b0381111561098357610983612d93565b6040519080825280602002602001820160405280156109ac578160200160208202803683370190505b5093508515610ac45760005b600454811015610ac257876001600160a01b03166301ffc9a7600483815481106109e4576109e4613587565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b8152600401610a3391906001600160e01b031991909116815260200190565b60206040518083038186803b158015610a4b57600080fd5b505afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190613611565b8584610a8e816135b3565b955081518110610aa057610aa0613587565b9115156020928302919091019091015280610aba816135b3565b9150506109b8565b505b60005b8551811015610bb457876001600160a01b03166301ffc9a7878381518110610af157610af1613587565b60200260200101516040518263ffffffff1660e01b8152600401610b2591906001600160e01b031991909116815260200190565b60206040518083038186803b158015610b3d57600080fd5b505afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b759190613611565b8584610b80816135b3565b955081518110610b9257610b92613587565b9115156020928302919091019091015280610bac816135b3565b915050610ac7565b505050509392505050565b606081516001600160401b03811115610bda57610bda612d93565b604051908082528060200260200182016040528015610c03578160200160208202803683370190505b50905060005b825181101561091757610c34838281518110610c2757610c27613587565b6020026020010151610856565b828281518110610c4657610c46613587565b9115156020928302919091019091015280610c60816135b3565b915050610c09565b60606002805480602002602001604051908101604052809291908181526020018280548015610cc057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ca2575b5050505050905090565b610cd2612ac3565b610cda612a8e565b610ce2612a1e565b610d4986856005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611796565b9050610d56868686610d72565b9250610d6786868360e00151611bf9565b915093509350939050565b610d7a612ac3565b610d85848484611f31565b949350505050565b60606000806000610d9d88610704565b905080600281518110610db257610db2613587565b60200260200101518015610ddd575080600481518110610dd457610dd4613587565b60200260200101515b156111ae576001600160a01b038716610fee57876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2957600080fd5b505afa158015610e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e61919061362e565b915081851115610ea45760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610844565b81610eaf87876135f9565b1115610ec457610ebf8583613647565b610ec6565b855b9250826001600160401b03811115610ee057610ee0612d93565b604051908082528060200260200182016040528015610f1957816020015b610f06612ac3565b815260200190600190039081610efe5790505b50935060005b83811015610fe857610fb8896001600160a01b038116634f6ccce7610f44858b6135f9565b6040518263ffffffff1660e01b8152600401610f6291815260200190565b60206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb2919061362e565b8a611f31565b858281518110610fca57610fca613587565b60200260200101819052508080610fe0906135b3565b915050610f1f565b506111ae565b6040516370a0823160e01b81526001600160a01b0388811660048301528916906370a082319060240160206040518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611067919061362e565b9150818511156110aa5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610844565b816110b587876135f9565b11156110ca576110c58583613647565b6110cc565b855b9250826001600160401b038111156110e6576110e6612d93565b60405190808252806020026020018201604052801561111f57816020015b61110c612ac3565b8152602001906001900390816111045790505b50935060005b838110156111ac5761117c896001600160a01b038116632f745c598b61114b868c6135f9565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610f62565b85828151811061118e5761118e613587565b602002602001018190525080806111a4906135b3565b915050611125565b505b509450945094915050565b60608060008060006112506111cc610c68565b87600580548060200260200160405190810160405280929190818152602001828054801561124657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116112085790505b5050505050610746565b90508051915060005b81518110156112e157600082828151811061127657611276613587565b602002602001015160a0015111806112bc5750866001600160a01b03168282815181106112a5576112a5613587565b6020026020010151602001516001600160a01b0316145b156112cf57836112cb816135b3565b9450505b806112d9816135b3565b915050611259565b50826001600160401b038111156112fa576112fa612d93565b60405190808252806020026020018201604052801561133357816020015b611320612a1e565b8152602001906001900390816113185790505b509450826001600160401b0381111561134e5761134e612d93565b60405190808252806020026020018201604052801561138757816020015b611374612b16565b81526020019060019003908161136c5790505b5093506000805b838110156114ae5760008382815181106113aa576113aa613587565b602002602001015160a0015111806113f05750876001600160a01b03168382815181106113d9576113d9613587565b6020026020010151602001516001600160a01b0316145b1561149c5782818151811061140757611407613587565b602002602001015187838151811061142157611421613587565b602002602001018190525061147083828151811061144157611441613587565b60200260200101516000015184838151811061145f5761145f613587565b602002602001015160e001516124e5565b86838151811061148257611482613587565b60200260200101819052508180611498906135b3565b9250505b806114a6816135b3565b91505061138e565b5050509193509193565b6114c0612a1e565b6114c8612b16565b61152f84846005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611796565b915061153f848360e001516124e5565b90509250929050565b606080611553612a1e565b6000806115bd89896005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611796565b92506115cb89898989610d8d565b825192975090935091506001600160401b038111156115ec576115ec612d93565b60405190808252806020026020018201604052801561162557816020015b611612612a8e565b81526020019060019003908161160a5790505b50935060005b8551811015611690576116608a87838151811061164a5761164a613587565b6020026020010151600001518660e00151611bf9565b85828151811061167257611672613587565b60200260200101819052508080611688906135b3565b91505061162b565b50945094509450945094565b60005461010090046001600160a01b031633146116e75760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610844565b61064281612930565b60005460ff16156117395760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610844565b6000805460ff1916600117905561064281612930565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166350da677b60e01b148061045e575061045e82612989565b61179e612a1e565b836000816001600160a01b03163b116117c95760405162461bcd60e51b8152600401610844906135ce565b60006117d78660018661091d565b9050808360e00181905250806000815181106117f5576117f5613587565b602002602001015115801561182157508060018151811061181857611818613587565b60200260200101515b61185a5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b6044820152606401610844565b8060028151811061186d5761186d613587565b60200260200101518061189757508060068151811061188e5761188e613587565b60200260200101515b6118db5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b6044820152606401610844565b6001600160a01b03861680845260408051638da5cb5b60e01b81529051638da5cb5b91600480820192602092909190829003018186803b15801561191e57600080fd5b505afa92505050801561194e575060408051601f3d908101601f1916820190925261194b9181019061365e565b60015b61195757611966565b6001600160a01b031660208401525b856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561199f57600080fd5b505afa9250505080156119d457506040513d6000823e601f3d908101601f191682016040526119d1919081019061367b565b60015b6119dd576119e3565b60408401525b856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611a1c57600080fd5b505afa925050508015611a5157506040513d6000823e601f3d908101601f19168201604052611a4e919081019061367b565b60015b611a5a57611a60565b60608401525b856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9957600080fd5b505afa925050508015611ac9575060408051601f3d908101601f19168201909252611ac69181019061362e565b60015b611ad257611ad8565b60808401525b6001600160a01b03851615611bf0576040516370a0823160e01b81526001600160a01b0386811660048301528716906370a082319060240160206040518083038186803b158015611b2857600080fd5b505afa925050508015611b58575060408051601f3d908101601f19168201909252611b559181019061362e565b60015b611b6157611b67565b60a08401525b60405163e985e9c560e01b81526001600160a01b0386811660048301528716602482018190529063e985e9c59060440160206040518083038186803b158015611baf57600080fd5b505afa925050508015611bdf575060408051601f3d908101601f19168201909252611bdc91810190613611565b60015b611be857611bf0565b151560c08401525b50509392505050565b611c01612a8e565b81611c0e600b600361370e565b60ff1681518110611c2157611c21613587565b602002602001015115611d2a576040516310676f6f60e31b8152600481018490526001600160a01b0385169063833b7b789060240160606040518083038186803b158015611c6e57600080fd5b505afa158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca69190613733565b602082015260405163c457fb3760e01b8152600481018490526001600160a01b0385169063c457fb379060240160206040518083038186803b158015611ceb57600080fd5b505afa158015611cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d23919061362e565b8152610488565b81600a60ff1681518110611d4057611d40613587565b6020026020010151156104885760405163152a902d60e11b815260048101849052600160248201526001600160a01b03851690632a55205a90604401604080518083038186803b158015611d9357600080fd5b505afa158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb91906137a9565b5060208201516001600160a01b0390911690529392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b03161480611e1f57506003546001600160a01b031633145b611e665760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610844565b80611e7081610856565b611ead5760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b6044820152606401610844565b6001600160a01b0382166000908152600160208190526040909120541015610635575060028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b0394909416938417905590546000928352602091909152604090912055565b611f39612ac3565b836000816001600160a01b03163b11611f645760405162461bcd60e51b8152600401610844906135ce565b83825260405163020604bf60e21b8152600481018590526001600160a01b0386169063081812fc9060240160206040518083038186803b158015611fa757600080fd5b505afa158015611fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdf919061365e565b6001600160a01b0390811660608401526040516331a9108f60e11b81526004810186905290861690636352211e9060240160206040518083038186803b15801561202857600080fd5b505afa15801561203c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612060919061365e565b6001600160a01b03908116604084810191909152516301ffc9a760e01b8152635b5e139f60e01b6004820152908616906301ffc9a79060240160206040518083038186803b1580156120b157600080fd5b505afa1580156120c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e99190613611565b156121745760405163c87b56dd60e01b8152600481018590526001600160a01b0386169063c87b56dd9060240160006040518083038186803b15801561212e57600080fd5b505afa158015612142573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261216a919081019061367b565b60208301526106fc565b6040516301ffc9a760e01b81526303a24d0760e21b60048201526001600160a01b038616906301ffc9a79060240160206040518083038186803b1580156121ba57600080fd5b505afa1580156121ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f29190613611565b156106fc576040516303a24d0760e21b8152600481018590526001600160a01b03861690630e89341c9060240160006040518083038186803b15801561223757600080fd5b505afa15801561224b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612273919081019061367b565b6020830152604051627eeac760e11b81526001600160a01b0384811660048301526024820186905286169062fdd58e9060440160206040518083038186803b1580156122be57600080fd5b505afa1580156122d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f6919061362e565b6080830152509392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061233d57506003546001600160a01b031633145b6123845760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610844565b6001600160a01b03811660009081526001602081905260409091205410156123df5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610844565b6001600160a01b038116600090815260016020526040902054600254811461249557600280546000919061241590600190613647565b8154811061242557612425613587565b6000918252602090912001546001600160a01b0316905080600261244a600185613647565b8154811061245a5761245a613587565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b03821660009081526001602052604081205560028054806124bf576124bf6137d7565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6124ed612b16565b816124fa600b600261370e565b60ff168151811061250d5761250d613587565b60200260200101511561268e57826001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561255357600080fd5b505afa158015612567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258b919061362e565b816000018181525050826001600160a01b0316636f2ddd936040518163ffffffff1660e01b815260040160006040518083038186803b1580156125cd57600080fd5b505afa1580156125e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612609919081019061367b565b8160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126829190613611565b15156040820152612792565b8161269b600b600861370e565b60ff16815181106126ae576126ae613587565b60200260200101511561272a5760038160000181815250506040518060400160405280600a8152602001694f70656e4e465473563360b01b8152508160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561264a57600080fd5b81612737600b600761370e565b60ff168151811061274a5761274a613587565b6020026020010151156127605760028152612792565b8161276d600b600661370e565b60ff168151811061278057612780613587565b60200260200101511561279257600181525b8161279f600b600361370e565b60ff16815181106127b2576127b2613587565b60200260200101511561045e57826001600160a01b0316638cabe05a6040518163ffffffff1660e01b815260040160606040518083038186803b1580156127f857600080fd5b505afa15801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190613733565b8160a00181905250826001600160a01b031663a7f93ebd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561287157600080fd5b505afa158015612885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a9919061362e565b816080018181525050826001600160a01b03166394a53d416040518163ffffffff1660e01b815260040160206040518083038186803b1580156128eb57600080fd5b505afa1580156128ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129239190613611565b1515606082015292915050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216631e09d27b60e01b148061045e575061045e8260006001600160e01b0319821663118a575f60e01b148061045e575061045e8260006001600160e01b03198216633f62885160e01b148061045e575061045e8260006307f5828d60e41b6001600160e01b03198316148061045e57506001600160e01b031982166301ffc9a760e01b1461045e565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000151581526020016060815260200160006001811115612a8957612a89612c88565b905290565b604051806040016040528060008152602001612a89604080516060810182526000808252602082018190529181019190915290565b6040518060c00160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001811115612a8957612a89612c88565b6040805160c08101825260008082526060602080840182905283850183905281840183905260808401839052845191820185528282528101829052928301529060a082015290565b80356001600160e01b031981168114612b7657600080fd5b919050565b600060208284031215612b8d57600080fd5b61048882612b5e565b6001600160a01b038116811461064257600080fd5b8035612b7681612b96565b60008060408385031215612bc957600080fd5b8235612bd481612b96565b91506020830135612be481612b96565b809150509250929050565b60005b83811015612c0a578181015183820152602001612bf2565b83811115612c19576000848401525b50505050565b60008151808452612c37816020860160208601612bef565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015612c7d578151151587529582019590820190600101612c5f565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60028110612cbc57634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b0316825260006101206020830151612cec60208601826001600160a01b03169052565b506040830151816040860152612d0482860182612c1f565b91505060608301518482036060860152612d1e8282612c1f565b9150506080830151608085015260a083015160a085015260c0830151612d4860c086018215159052565b5060e083015184820360e0860152612d608282612c4b565b91505061010080840151612d7682870182612c9e565b5090949350505050565b6020815260006104886020830184612cc0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dd157612dd1612d93565b604052919050565b60006001600160401b03821115612df257612df2612d93565b5060051b60200190565b600080600060608486031215612e1157600080fd5b8335612e1c81612b96565b92506020848101356001600160401b03811115612e3857600080fd5b8501601f81018713612e4957600080fd5b8035612e5c612e5782612dd9565b612da9565b81815260059190911b82018301908381019089831115612e7b57600080fd5b928401925b82841015612e9957833582529284019290840190612e80565b8096505050505050612ead60408501612bab565b90509250925092565b805182526000602082015160c06020850152612ed560c0850182612c1f565b9050604083015160018060a01b03808216604087015280606086015116606087015250506080830151608085015260a08301516106fc60a0860182612c9e565b600081518084526020808501808196508360051b8101915082860160005b85811015612f5d578284038952612f4b848351612eb6565b98850198935090840190600101612f33565b5091979650505050505050565b805182526020810151612fa6602084018280516001600160a01b031682526020808201516001600160601b031690830152604090810151910152565b505050565b600081518084526020808501945080840160005b83811015612c7d57612fd2878351612f6a565b6080969096019590820190600101612fbf565b606081526000612ff86060830186612f15565b828103602084015261300a8186612fab565b9050828103604084015261301e8185612cc0565b9695505050505050565b600082601f83011261303957600080fd5b81356020613049612e5783612dd9565b82815260059290921b8401810191818101908684111561306857600080fd5b8286015b8481101561308c57803561307f81612b96565b835291830191830161306c565b509695505050505050565b6000602082840312156130a957600080fd5b81356001600160401b038111156130bf57600080fd5b610d8584828501613028565b6000602082840312156130dd57600080fd5b813561048881612b96565b6020815260006104886020830184612f15565b6020808252825182820181905260009190848201906040850190845b81811015613135578351151583529284019291840191600101613117565b50909695505050505050565b600082601f83011261315257600080fd5b81356020613162612e5783612dd9565b82815260059290921b8401810191818101908684111561318157600080fd5b8286015b8481101561308c5761319681612b5e565b8352918301918301613185565b6000806000606084860312156131b857600080fd5b83356001600160401b03808211156131cf57600080fd5b6131db87838801613028565b9450602086013591506131ed82612b96565b9092506040850135908082111561320357600080fd5b5061321086828701613141565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b85811015612f5d578284038952613250848351612cc0565b98850198935090840190600101613238565b602081526000610488602083018461321a565b801515811461064257600080fd5b60008060006060848603121561329857600080fd5b83356132a381612b96565b925060208401356132b381613275565b915060408401356001600160401b038111156132ce57600080fd5b61321086828701613141565b6020808252825182820181905260009190848201906040850190845b818110156131355783516001600160a01b0316835292840192918401916001016132f6565b60008060006060848603121561333057600080fd5b833561333b81612b96565b925060208401359150604084013561335281612b96565b809150509250925092565b60c08152600061337060c0830186612eb6565b61337d6020840186612f6a565b82810360a084015261301e8185612cc0565b6020815260006104886020830184612eb6565b600080600080608085870312156133b857600080fd5b84356133c381612b96565b935060208501356133d381612b96565b93969395505050506040820135916060013590565b6060815260006133fb6060830186612f15565b60208301949094525060400152919050565b600061010082518452602083015181602086015261342d82860182612c1f565b9150506040830151151560408501526060830151151560608501526080830151608085015260a08301516106fc60a086018280516001600160a01b031682526020808201516001600160601b031690830152604090810151910152565b60808152600061349d608083018761321a565b6020838203818501528187518084528284019150828160051b850101838a0160005b838110156134ed57601f198784030185526134db83835161340d565b948601949250908501906001016134bf565b50506040870198909852505050506060909101919091525092915050565b60408152600061351e6040830185612cc0565b8281036020840152613530818561340d565b95945050505050565b60a08152600061354c60a0830188612f15565b828103602084015261355e8188612fab565b905082810360408401526135728187612cc0565b60608401959095525050608001529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156135c7576135c761359d565b5060010190565b602080825260119082015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b604082015260600190565b6000821982111561360c5761360c61359d565b500190565b60006020828403121561362357600080fd5b815161048881613275565b60006020828403121561364057600080fd5b5051919050565b6000828210156136595761365961359d565b500390565b60006020828403121561367057600080fd5b815161048881612b96565b60006020828403121561368d57600080fd5b81516001600160401b03808211156136a457600080fd5b818401915084601f8301126136b857600080fd5b8151818111156136ca576136ca612d93565b6136dd601f8201601f1916602001612da9565b91508082528560208285010111156136f457600080fd5b613705816020840160208601612bef565b50949350505050565b600060ff821660ff84168060ff0382111561372b5761372b61359d565b019392505050565b60006060828403121561374557600080fd5b604051606081018181106001600160401b038211171561376757613767612d93565b604052825161377581612b96565b815260208301516001600160601b038116811461379157600080fd5b60208201526040928301519281019290925250919050565b600080604083850312156137bc57600080fd5b82516137c781612b96565b6020939093015192949293505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122038c7d8014579ca74ad5babb90c5af77981a05f82d82286883d57fded331cafa264736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5174,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5176,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8504,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_numAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8507,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8509,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "registerer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7650,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_ercInterfaceIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes4)dyn_storage"
      },
      {
        "astId": 20565,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_interfaceIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes4)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}