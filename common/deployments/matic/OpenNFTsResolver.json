{
  "address": "0x14533d672cb51a9c5cc9c92ac3f30a9791b407db",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "checkErcInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "erc",
          "type": "bool"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "minimal",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos",
          "name": "openNTFscollectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "minimal",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]",
          "name": "openNFTsCollectionsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos",
          "name": "openNTFsNftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos[]",
          "name": "openNTFsNftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getOpenNFTsNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.NftInfos[]",
          "name": "nftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "uint256",
                  "name": "minimum",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
              "name": "receiver",
              "type": "tuple"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos[]",
          "name": "openNTFsNftInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "approvedForAll",
              "type": "bool"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            },
            {
              "internalType": "enum IERCNftInfos.NftType",
              "name": "erc",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERCNftInfos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "smartcontracts",
          "type": "address[]"
        }
      ],
      "name": "isCollections",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "checks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "name": "setRegisterer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xda6b2cba1ab3cc2aa830c0b0c0c51b583e618b0e076fbf5e7236eb593d74707b",
  "receipt": {
    "to": null,
    "from": "0x62680309da3cd77fdeda85022be3058d373f750d",
    "contractAddress": "0x14533d672cb51a9c5cc9c92ac3f30a9791b407db",
    "transactionIndex": "0x47",
    "gasUsed": "0x33401d",
    "logsBloom": "0x
    "blockHash": "0x059c1ddeb5059c1060a094bf99577ee812c72b32c0b58647656bbec9b09c1648",
    "transactionHash": "0xda6b2cba1ab3cc2aa830c0b0c0c51b583e618b0e076fbf5e7236eb593d74707b",
    "logs": [
      {
        "address": "0x14533d672cb51a9c5cc9c92ac3f30a9791b407db",
        "blockHash": "0x059c1ddeb5059c1060a094bf99577ee812c72b32c0b58647656bbec9b09c1648",
        "blockNumber": "0x274d9bf",
        "data": "0x",
        "logIndex": "0x23d",
        "removed": false,
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000062680309da3cd77fdeda85022be3058d373f750d"
        ],
        "transactionHash": "0xda6b2cba1ab3cc2aa830c0b0c0c51b583e618b0e076fbf5e7236eb593d74707b",
        "transactionIndex": "0x47"
      },
      {
        "address": "0x0000000000000000000000000000000000001010",
        "blockHash": "0x059c1ddeb5059c1060a094bf99577ee812c72b32c0b58647656bbec9b09c1648",
        "blockNumber": "0x274d9bf",
        "data": "0x00000000000000000000000000000000000000000000000001751c6f66064cdb0000000000000000000000000000000000000000000000000f7549d456d915e90000000000000000000000000000000000000000000002a30ae04d4f9edc3fde0000000000000000000000000000000000000000000000000e002d64f0d2c90e0000000000000000000000000000000000000000000002a30c5569bf04e28cb9",
        "logIndex": "0x23e",
        "removed": false,
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000062680309da3cd77fdeda85022be3058d373f750d",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "transactionHash": "0xda6b2cba1ab3cc2aa830c0b0c0c51b583e618b0e076fbf5e7236eb593d74707b",
        "transactionIndex": "0x47"
      }
    ],
    "blockNumber": "0x274d9bf",
    "cumulativeGasUsed": "0x119a4a5",
    "status": "0x1"
  },
  "args": [
    "0x62680309dA3Cd77FDeDa85022be3058d373F750d",
    "0xa99bDe465f40D9Af9980eED89Ed2940137be1a50"
  ],
  "numDeployments": 10,
  "solcInputHash": "3ce0424c7518890dbcab513fbf6ca417",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"checkErcInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"erc\",\"type\":\"bool\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"minimal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos\",\"name\":\"openNTFscollectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"minimal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]\",\"name\":\"openNFTsCollectionsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos[]\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getOpenNFTsNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.NftInfos[]\",\"name\":\"nftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos[]\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"enum IERCNftInfos.NftType\",\"name\":\"erc\",\"type\":\"uint8\"}],\"internalType\":\"struct IERCNftInfos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"smartcontracts\",\"type\":\"address[]\"}],\"name\":\"isCollections\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"checks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"name\":\"setRegisterer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OpenNFTsResolver.sol\":\"OpenNFTsResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xd1cd19a5c7736b61bf3b1785ed5552da45967576ac4e86f1cdd47a68fdf9332a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Already initialized\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1a5b3d130042d9e1d31b8ed153d4947cf9f0cce094ca3c2c83243aaecd3082e7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    /// 0xffffffff :  O Invalid\\n    /// 0x01ffc9a7 :  1 ERC165\\n    /// 0x80ac58cd :  2 ERC721\\n    /// 0x5b5e139f :  3 ERC721Metadata\\n    /// 0x780e9d63 :  4 ERC721Enumerable\\n    /// 0x150b7a02 :  5 ERC721TokenReceiver\\n    /// 0xd9b67a26 :  6 ERC1155\\n    /// 0x0e89341c :  7 ERC1155MetadataURI\\n    /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n    /// 0x7f5828d0 :  9 ERC173\\n    /// 0x2a55205a : 10 ERC2981\\n    bytes4[] private _ercInterfaceIds = [\\n        bytes4(0xffffffff),\\n        bytes4(0x01ffc9a7),\\n        bytes4(0x80ac58cd),\\n        bytes4(0x5b5e139f),\\n        bytes4(0x780e9d63),\\n        bytes4(0x150b7a02),\\n        bytes4(0xd9b67a26),\\n        bytes4(0x0e89341c),\\n        bytes4(0x4e2312e0),\\n        bytes4(0x7f5828d0),\\n        bytes4(0x2a55205a)\\n    ];\\n    uint8 private constant _INVALID = 0;\\n    uint8 private constant _ERC165 = 1;\\n    uint8 private constant _ERC721 = 2;\\n    uint8 private constant _ERC1155 = 6;\\n\\n    modifier onlyContract(address account) {\\n        require(account.code.length > 0, \\\"Not smartcontract\\\");\\n        _;\\n    }\\n\\n    function isCollections(address[] memory smartcontracts)\\n        public\\n        view\\n        override(IOpenChecker)\\n        returns (bool[] memory checks)\\n    {\\n        uint256 len = smartcontracts.length;\\n        checks = new bool[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            checks[i] = isCollection(smartcontracts[i]);\\n        }\\n    }\\n\\n    // TODO check only 4 interfaces\\n    function isCollection(address smartcontract)\\n        public\\n        view\\n        override(IOpenChecker)\\n        onlyContract(smartcontract)\\n        returns (bool)\\n    {\\n        bool[] memory checks = checkErcInterfaces(smartcontract);\\n\\n        // (!INVALID and ERC165) and (ERC721 or ERC1155)\\n        return !checks[_INVALID] && checks[_ERC165] && (checks[_ERC721] || checks[_ERC1155]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function checkErcInterfaces(address smartcontract)\\n        public\\n        view\\n        override(IOpenChecker)\\n        returns (bool[] memory)\\n    {\\n        return checkSupportedInterfaces(smartcontract, true, new bytes4[](0));\\n    }\\n\\n    function checkSupportedInterfaces(address smartcontract, bool erc, bytes4[] memory interfaceIds)\\n        public\\n        view\\n        override(IOpenChecker)\\n        onlyContract(smartcontract)\\n        returns (bool[] memory interfaceIdsChecks)\\n    {\\n        uint256 len1 = _ercInterfaceIds.length;\\n        uint256 len2 = interfaceIds.length;\\n        uint256 len = (erc ? len1 : 0) + len2;\\n        uint256 i;\\n\\n        interfaceIdsChecks = new bool[](len);\\n\\n        if (erc) {\\n            for (uint256 j = 0; j < len1; j++) {\\n                interfaceIdsChecks[i++] =\\n                    IERC165(smartcontract).supportsInterface(_ercInterfaceIds[j]);\\n            }\\n        }\\n        for (uint256 k = 0; k < len2; k++) {\\n            interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(interfaceIds[k]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a223602d3bbbd41d986edf0e957198c9720b75cbd7982aabaf0756a63c572a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenChecker\\n//        |\\n//  OpenGetter \\u2014\\u2014 IOpenGetter\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenGetter is IOpenGetter, OpenChecker {\\n    uint8 private constant _INVALID = 0;\\n    uint8 private constant _ERC165 = 1;\\n    uint8 private constant _ERC721 = 2;\\n    uint8 private constant _ERC721_ENUMERABLE = 2;\\n    uint8 private constant _ERC1155 = 6;\\n    bytes4 private constant _ERC721_ID = 0x80ac58cd;\\n    bytes4 private constant _ERC1155_ID = 0xd9b67a26;\\n    bytes4 private constant _ERC721_METADATA_ID = 0x5b5e139f;\\n    bytes4 private constant _ERC1155_METADATA_URI_ID = 0x0e89341c;\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenChecker)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenGetter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionInfos(address collection, address account)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (\\n            // override(IOpenGetter)\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = _getCollectionInfos(collection, account, new bytes4[](0));\\n    }\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos)\\n    {\\n        uint256 len = tokenIDs.length;\\n        nftsInfos = new NftInfos[](len);\\n        for (uint256 i; i < len; i++) {\\n            nftsInfos[i] = _getNftInfos(collection, tokenIDs[i], account);\\n        }\\n    }\\n\\n    function getNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos, uint256 count, uint256 total)\\n    {\\n        bool[] memory supported = checkErcInterfaces(collection);\\n\\n        // IF ERC721 & ERC721Enumerable supported\\n        if (supported[_ERC721] && supported[_ERC721_ENUMERABLE]) {\\n            if (account == address(0)) {\\n                total = IERC721Enumerable(collection).totalSupply();\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = _getNftInfos(\\n                        collection, IERC721Enumerable(collection).tokenByIndex(offset + i), account\\n                    );\\n                }\\n            } else {\\n                total = IERC721(collection).balanceOf(account);\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = _getNftInfos(\\n                        collection,\\n                        IERC721Enumerable(collection).tokenOfOwnerByIndex(account, offset + i),\\n                        account\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getNftInfos(address collection, uint256 tokenID, address account)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (NftInfos memory nftInfos)\\n    {\\n        return _getNftInfos(collection, tokenID, account);\\n    }\\n\\n    function _getNftInfos(address collection, uint256 tokenID, address account)\\n        internal\\n        view\\n        onlyContract(collection)\\n        returns (NftInfos memory nftInfos)\\n    {\\n        nftInfos.tokenID = tokenID;\\n\\n        if (IERC165(collection).supportsInterface(_ERC721_ID)) {\\n            try IERC721(collection).ownerOf(tokenID) returns (address owner) {\\n                nftInfos.owner = owner;\\n            } catch {}\\n\\n            // tokenID exists <=> owner != 0\\n            if (nftInfos.owner != address(0)) {\\n                nftInfos.approved = IERC721(collection).getApproved(tokenID);\\n                if (IERC165(collection).supportsInterface(_ERC721_METADATA_ID)) {\\n                    nftInfos.tokenURI = IERC721Metadata(collection).tokenURI(tokenID);\\n                }\\n            }\\n        } else if (IERC165(collection).supportsInterface(_ERC1155_ID)) {\\n            if (account != address(0)) {\\n                nftInfos.balanceOf = IERC1155(collection).balanceOf(account, tokenID);\\n            }\\n            if (IERC165(collection).supportsInterface(_ERC1155_METADATA_URI_ID)) {\\n                nftInfos.tokenURI = IERC1155MetadataURI(collection).uri(tokenID);\\n            }\\n        }\\n    }\\n\\n    function _getCollectionInfos(address collection, address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        onlyContract(collection)\\n        returns (CollectionInfos memory collectionInfos)\\n    {\\n        bool[] memory supported = checkSupportedInterfaces(collection, true, interfaceIds);\\n        collectionInfos.supported = supported;\\n\\n        // ERC165 must be supported\\n        require(!supported[_INVALID] && supported[_ERC165], \\\"Not ERC165\\\");\\n\\n        // ERC721 or ERC1155 must be supported\\n        require(supported[_ERC721] || supported[_ERC1155], \\\"Not NFT smartcontract\\\");\\n\\n        collectionInfos.collection = collection;\\n\\n        // try ERC173 owner\\n        try IERC173(collection).owner() returns (address owner) {\\n            collectionInfos.owner = owner;\\n        } catch {}\\n\\n        // try ERC721Metadata name\\n        try IERC721Metadata(collection).name() returns (string memory name) {\\n            collectionInfos.name = name;\\n        } catch {}\\n\\n        // try ERC721Metadata symbol\\n        try IERC721Metadata(collection).symbol() returns (string memory symbol) {\\n            collectionInfos.symbol = symbol;\\n        } catch {}\\n\\n        // try ERC721Enumerable totalSupply\\n        try IERC721Enumerable(collection).totalSupply() returns (uint256 totalSupply) {\\n            collectionInfos.totalSupply = totalSupply;\\n        } catch {}\\n\\n        if (account != address(0)) {\\n            try IERC721(collection).balanceOf(account) returns (uint256 balanceOf) {\\n                collectionInfos.balanceOf = balanceOf;\\n            } catch {}\\n\\n            try IERC721(collection).isApprovedForAll(account, collection) returns (\\n                bool approvedForAll\\n            ) {\\n                collectionInfos.approvedForAll = approvedForAll;\\n            } catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x217858abbabae2afb3dbd5ebc47766ffbea661220c9f8768a28ac0f03453b77d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenRegistry \\u2014\\u2014 IOpenRegistry\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\\\";\\n\\nabstract contract OpenRegistry is IOpenRegistry, OpenERC173 {\\n    mapping(address => uint256) private _numAddress;\\n    address[] private _addresses;\\n    address public registerer;\\n\\n    /// @notice onlyRegisterer, by default owner is registerer and can add addresses, can be overriden\\n    modifier onlyRegisterer() virtual {\\n        require(msg.sender == owner() || msg.sender == registerer, \\\"Not registerer nor owner\\\");\\n        _;\\n    }\\n\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address) virtual {\\n        _;\\n    }\\n\\n    function setRegisterer(address registerer_) external override(IOpenRegistry) onlyOwner {\\n        _setRegisterer(registerer_);\\n    }\\n\\n    function addAddresses(address[] memory addrs) external override(IOpenRegistry) {\\n        uint256 len = addrs.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _addAddress(addrs[i]);\\n        }\\n    }\\n\\n    function addAddress(address addr) external override(IOpenRegistry) {\\n        _addAddress(addr);\\n    }\\n\\n    function removeAddress(address addr) external override(IOpenRegistry) {\\n        _removeAddress(addr);\\n    }\\n\\n    function countAddresses() external view override(IOpenRegistry) returns (uint256) {\\n        return _addresses.length;\\n    }\\n\\n    function isRegistered(address addr) public view returns (bool) {\\n        return _numAddress[addr] >= 1;\\n    }\\n\\n    function getAddresses() public view override(IOpenRegistry) returns (address[] memory) {\\n        return _addresses;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC173)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenRegistry).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setRegisterer(address registerer_) internal {\\n        registerer = registerer_;\\n    }\\n\\n    function _addAddress(address addr) private onlyRegisterer onlyValid(addr) {\\n        if (!isRegistered(addr)) {\\n            _addresses.push(addr);\\n            _numAddress[addr] = _addresses.length;\\n        }\\n    }\\n\\n    function _removeAddress(address addr) private onlyRegisterer {\\n        require(isRegistered(addr), \\\"Not registered\\\");\\n\\n        uint256 num = _numAddress[addr];\\n        if (num != _addresses.length) {\\n            address addrLast = _addresses[_addresses.length - 1];\\n            _addresses[num - 1] = addrLast;\\n            _numAddress[addrLast] = num;\\n        }\\n\\n        delete (_numAddress[addr]);\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x36c685c632eadebee19b53fb48d19fe99470f93af3548ca893b238c4bb4a114c\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |              |\\n//   OpenChecker     OpenERC173\\n//        |              |\\n//    OpenGetter    OpenRegistry\\n//        |              |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenResolver \\u2014\\u2014 IOpenResolver\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\\\";\\n\\nabstract contract OpenResolver is IOpenResolver, OpenRegistry, OpenGetter {\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address addr) override(OpenRegistry) {\\n        require(isCollection(addr), \\\"Not Collection\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenRegistry, OpenGetter)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) public view override(IOpenResolver) returns (CollectionInfos[] memory collectionsInfos) {\\n        uint256 len = collections.length;\\n        collectionsInfos = new CollectionInfos[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            collectionsInfos[i] = _getCollectionInfos(collections[i], account, interfaceIds);\\n        }\\n    }\\n\\n    function _getCollectionsInfos(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        CollectionInfos[] memory collectionsInfosAll =\\n            getCollectionsInfos(getAddresses(), account, interfaceIds);\\n\\n        uint256 count;\\n        uint256 len = collectionsInfosAll.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                count++;\\n            }\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](count);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j++] = collectionsInfosAll[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4eab56b74b5060c00ad475d1dc1407db4184ae7387ca543601166fbfaf50c0cb\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.17;\\n\\ninterface IERC1155 {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xca97f01d86fb971119ec3018f09d2111977b93ee4f96b0e21d4b3b42ffa06fd1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155METADATAURI.sol)\\n\\npragma solidity ^0.8.17;\\n\\ninterface IERC1155MetadataURI {\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa3d13e479b99ea39f72829219c461ea0d8d5a876b3d72050bac1cab5c843f059\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x58013714c651f0d1771fc666fcf671981f83ed655851ab134096147c60b820ca\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x583df9d1c4ec4e0e2e6f9ada93c240d9b0b8e34db7e588c92b44aca15590aa0d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xecaab15447bb869f9e283ea4ade81645dfad23967e8c21e8b283b3058a3b98e4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data)\\n        external\\n        payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0eeba23f32711abca06ec1a3a6c2280853a57d2afc748236ee89e61e3fbacd60\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd04b5e67b7e71e40cc6197df49c279cfa9fb7de3e6e6b2c13a4c1bfd53a077a4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3c399bd3f061c7b2da29e18b01d0b7ea780ac11d0747de3921f1c09d3e491ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Infos of either ERC721 or ERC1155 NFT\\ninterface IERCNftInfos {\\n    enum NftType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct CollectionInfos {\\n        address collection;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        uint256 balanceOf;\\n        bool approvedForAll;\\n        bool[] supported;\\n        NftType erc;\\n    }\\n\\n    struct NftInfos {\\n        uint256 tokenID;\\n        string tokenURI;\\n        address owner;\\n        address approved;\\n        uint256 balanceOf;\\n        NftType erc;\\n    }\\n}\\n\",\"keccak256\":\"0x6c44ae00047b3b78377895751aee9b554789b02adc7e9d0cae8d99771d4f640c\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenChecker {\\n    function checkErcInterfaces(address smartcontract)\\n        external\\n        view\\n        returns (bool[] memory interfaceIdsChecks);\\n\\n    function checkSupportedInterfaces(address smartcontract, bool erc, bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (bool[] memory interfaceIdsChecks);\\n\\n    function isCollection(address collection) external view returns (bool check);\\n\\n    function isCollections(address[] memory collection)\\n        external\\n        view\\n        returns (bool[] memory checks);\\n}\\n\",\"keccak256\":\"0xa5028baacaa515d1006b2f0dc80ee55fabd29b1ff5a07fa5f756fdfa9c4686f8\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenCloneable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    ) external;\\n\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function parent() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf6a4650b44aa4f552fdff99b8c89ab231ea479b860733f4bee69257b33489c86\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenGetter is IERCNftInfos {\\n    function getCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos);\\n\\n    function getNftInfos(address collection, uint256 tokenID, address account)\\n        external\\n        view\\n        returns (NftInfos memory nftInfos);\\n\\n    function getNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos, uint256 count, uint256 total);\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos);\\n}\\n\",\"keccak256\":\"0x55defb3c3a2d3c42056906cce34d4013914758c0a99597aa7531ec23a1463988\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\\\";\\n\\ninterface IOpenMarketable is IOpenReceiverInfos {\\n    enum Approve {\\n        None,\\n        One,\\n        All\\n    }\\n\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetMintPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(\\n        uint256 tokenID,\\n        uint256 price,\\n        address seller,\\n        uint256 paid,\\n        address receiver,\\n        uint256 royalties,\\n        uint256 fee,\\n        address buyer,\\n        uint256 unspent\\n    );\\n\\n    function withdraw() external returns (uint256);\\n\\n    function setMintPrice(uint256 price) external;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function minimal() external view returns (bool);\\n\\n    function getMintPrice() external view returns (uint256 price);\\n\\n    function getDefaultRoyalty() external view returns (ReceiverInfos memory receiver);\\n\\n    function getTokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getTokenRoyalty(uint256 tokenID)\\n        external\\n        view\\n        returns (ReceiverInfos memory receiver);\\n}\\n\",\"keccak256\":\"0xe3e69b6eb951bcaea4e6270b8becd6d7e6bfde7926c9b342dd34f315d1c31659\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x68bde95ed0001c64f5ff0711707a2675e63a11e7ada541db5f67742174fc837e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0xc1e02716bd0d58193870a7eeac4d30e274bb06dd4e0f32e6f2762d1e3a07e04a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenReceiverInfos {\\n    struct ReceiverInfos {\\n        address account;\\n        uint96 fee;\\n        uint256 minimum;\\n    }\\n}\\n\",\"keccak256\":\"0x1e67e2eb24e3c9e8f871068866a8e6af4ec00f8da0a692c8bfe07e8e88db38bd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenRegistry {\\n    function setRegisterer(address registerer) external;\\n\\n    function removeAddress(address addr) external;\\n\\n    function addAddress(address addr) external;\\n\\n    function addAddresses(address[] memory addrs) external;\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function registerer() external view returns (address);\\n\\n    function countAddresses() external view returns (uint256);\\n\\n    function isRegistered(address addr) external view returns (bool registered);\\n}\\n\",\"keccak256\":\"0xc5e79f3dbb34674c6ea99d925bb82939a7be3b2bdd48c8c8b5c6e16608b1b1ba\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\n\\ninterface IOpenResolver is IERCNftInfos {\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) external view returns (CollectionInfos[] memory collectionsInfos);\\n}\\n\",\"keccak256\":\"0x0aba8960e240a276dc3e8329442b63526c73b6b11919f15d6624d127cfa93bf0\",\"license\":\"MIT\"},\"src/OpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//    OpenERC165\\n//        |\\n//  OpenResolver\\n//        |\\n//  OpenNFTsResolver \\u2014\\u2014 IOpenNFTsResolver\\n//\\npragma solidity ^0.8.9;\\n\\nimport {IOpenNFTsResolver} from \\\"src/interfaces/IOpenNFTsResolver.sol\\\";\\nimport {IOpenAutoMarket} from \\\"src/interfaces/IOpenAutoMarket.sol\\\";\\nimport {IOpenBound} from \\\"src/interfaces/IOpenBound.sol\\\";\\nimport {IOpenNFTsV0} from \\\"src/interfaces/IOpenNFTsV0.sol\\\";\\nimport {IOpenNFTsV1} from \\\"src/interfaces/IOpenNFTsV1.sol\\\";\\nimport {IOpenNFTsV2} from \\\"src/interfaces/IOpenNFTsV2.sol\\\";\\nimport {IOpenNFTsV3} from \\\"src/interfaces/IOpenNFTsV3.sol\\\";\\nimport {IOpenNFTsV4} from \\\"src/interfaces/IOpenNFTsV4.sol\\\";\\n\\nimport {OpenERC173, OpenRegistry, OpenResolver, OpenGetter} from \\\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\\\";\\nimport {IOpenMarketable} from \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\nimport {IERC2981} from \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\nimport {IOpenNFTs} from \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport {IOpenMarketable} from \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\nimport {IOpenChecker} from \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\nimport {IOpenPauseable} from \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\nimport {IOpenCloneable} from \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\n\\ncontract OpenNFTsResolver is IOpenNFTsResolver, OpenResolver {\\n    bytes4[] private _interfaceIds = new bytes4[](12);\\n\\n    uint8 private constant _IERC_2981 = 10;\\n    uint8 private constant _IERC_LENGTH = 11;\\n\\n    uint8 private constant _IOPEN_NFTS = _IERC_LENGTH + 0;\\n    uint8 private constant _IOPEN_CHECKER = _IERC_LENGTH + 1;\\n    uint8 private constant _IOPEN_CLONEABLE = _IERC_LENGTH + 2;\\n    uint8 private constant _IOPEN_MARKETABLE = _IERC_LENGTH + 3;\\n    uint8 private constant _IOPEN_PAUSEABLE = _IERC_LENGTH + 4;\\n\\n    uint8 private constant _IOPEN_NFTS_V0 = _IERC_LENGTH + 5;\\n    uint8 private constant _IOPEN_NFTS_V1 = _IERC_LENGTH + 6;\\n    uint8 private constant _IOPEN_NFTS_V2 = _IERC_LENGTH + 7;\\n    uint8 private constant _IOPEN_NFTS_V3 = _IERC_LENGTH + 8;\\n    uint8 private constant _IOPEN_NFTS_V4 = _IERC_LENGTH + 9;\\n    uint8 private constant _IOPEN_AUTOMARKET = _IERC_LENGTH + 10;\\n    uint8 private constant _IOPEN_BOUND = _IERC_LENGTH + 11;\\n\\n    constructor(address owner_, address registerer_) {\\n        OpenERC173._initialize(owner_);\\n        OpenRegistry._setRegisterer(registerer_);\\n\\n        /// 0xffffffff :  O Invalid\\n        /// 0x01ffc9a7 :  1 ERC165\\n        /// 0x80ac58cd :  2 ERC721\\n        /// 0x5b5e139f :  3 ERC721Metadata\\n        /// 0x780e9d63 :  4 ERC721Enumerable\\n        /// 0x150b7a02 :  5 ERC721TokenReceiver\\n        /// 0xd9b67a26 :  6 ERC1155\\n        /// 0x0e89341c :  7 ERC1155MetadataURI\\n        /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n        /// 0x7f5828d0 :  9 ERC173\\n        /// 0x2a55205a : 10 ERC2981\\n\\n        _interfaceIds[_IOPEN_NFTS - _IERC_LENGTH] = type(IOpenNFTs).interfaceId;\\n        _interfaceIds[_IOPEN_CHECKER - _IERC_LENGTH] = type(IOpenChecker).interfaceId;\\n        _interfaceIds[_IOPEN_CLONEABLE - _IERC_LENGTH] = type(IOpenCloneable).interfaceId;\\n        _interfaceIds[_IOPEN_MARKETABLE - _IERC_LENGTH] = type(IOpenMarketable).interfaceId;\\n        _interfaceIds[_IOPEN_PAUSEABLE - _IERC_LENGTH] = type(IOpenPauseable).interfaceId;\\n\\n        _interfaceIds[_IOPEN_NFTS_V0 - _IERC_LENGTH] = type(IOpenNFTsV0).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V1 - _IERC_LENGTH] = type(IOpenNFTsV1).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V2 - _IERC_LENGTH] = type(IOpenNFTsV2).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V3 - _IERC_LENGTH] = type(IOpenNFTsV3).interfaceId;\\n        _interfaceIds[_IOPEN_NFTS_V4 - _IERC_LENGTH] = type(IOpenNFTsV4).interfaceId;\\n        _interfaceIds[_IOPEN_AUTOMARKET - _IERC_LENGTH] = type(IOpenAutoMarket).interfaceId;\\n        _interfaceIds[_IOPEN_BOUND - _IERC_LENGTH] = type(IOpenBound).interfaceId;\\n    }\\n\\n    function getOpenNFTsNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n\\n        (nftInfos, count, total) = OpenGetter.getNftsInfos(collection, account, limit, offset);\\n\\n        openNTFsNftInfos = new OpenNFTsNftInfos[](nftInfos.length);\\n        for (uint256 i = 0; i < nftInfos.length; i++) {\\n            openNTFsNftInfos[i] = _getOpenNFTsNftInfos(collection, nftInfos[i].tokenID, collectionInfos.supported);\\n        }\\n    }\\n\\n    function getOpenNFTsNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, address(0), _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftsInfos(collection, tokenIDs, account);\\n        openNTFsNftInfos = new OpenNFTsNftInfos[](tokenIDs.length);\\n        for (uint256 i = 0; i < tokenIDs.length; i++) {\\n            openNTFsNftInfos[i] = _getOpenNFTsNftInfos(collection, tokenIDs[i], collectionInfos.supported);\\n        }\\n    }\\n\\n    function getOpenNFTsNftInfos(address collection, uint256 tokenID, address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            NftInfos memory nftInfos,\\n            OpenNFTsNftInfos memory openNTFsNftInfos,\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftInfos(collection, tokenID, account);\\n        openNTFsNftInfos = _getOpenNFTsNftInfos(collection, tokenID, collectionInfos.supported);\\n    }\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (\\n            CollectionInfos[] memory collectionsInfos,\\n            OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, _interfaceIds);\\n        total = collectionsInfosAll.length;\\n\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                count++;\\n            }\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](count);\\n        openNFTsCollectionsInfos = new OpenNFTsCollectionInfos[](count);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < total; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j] = collectionsInfosAll[i];\\n                openNFTsCollectionsInfos[j] =\\n                    _getOpenNFTsCollectionInfos(collectionsInfosAll[i].collection, collectionsInfosAll[i].supported);\\n                j++;\\n            }\\n        }\\n    }\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos)\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n        openNTFscollectionInfos = _getOpenNFTsCollectionInfos(collection, collectionInfos.supported);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenResolver) returns (bool) {\\n        return interfaceId == type(IOpenNFTsResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getOpenNFTsNftInfos(address collection, uint256 tokenID, bool[] memory supported)\\n        internal\\n        view\\n        returns (OpenNFTsNftInfos memory nftInfos)\\n    {\\n        if (supported[_IOPEN_MARKETABLE]) {\\n            nftInfos.receiver = IOpenMarketable(payable(collection)).getTokenRoyalty(tokenID);\\n            nftInfos.price = IOpenMarketable(payable(collection)).getTokenPrice(tokenID);\\n        } else if (supported[_IERC_2981]) {\\n            (nftInfos.receiver.account,) = IERC2981(payable(collection)).royaltyInfo(tokenID, 1);\\n        }\\n    }\\n\\n    function _getOpenNFTsCollectionInfos(address collection, bool[] memory supported)\\n        internal\\n        view\\n        returns (OpenNFTsCollectionInfos memory collInfos)\\n    {\\n        if (supported[_IOPEN_CLONEABLE]) {\\n            collInfos.version = IOpenCloneable(collection).version(); // 4\\n            collInfos.template = IOpenCloneable(collection).template(); // OpenNFTsV4 or OpenBound\\n            collInfos.open = IOpenNFTsV4(collection).open();\\n        } else if (supported[_IOPEN_NFTS_V3]) {\\n            collInfos.version = 3;\\n            collInfos.template = \\\"OpenNFTsV3\\\";\\n            collInfos.open = IOpenNFTsV3(collection).open();\\n        } else if (supported[_IOPEN_NFTS_V2]) {\\n            collInfos.version = 2;\\n        } else if (supported[_IOPEN_NFTS_V1]) {\\n            collInfos.version = 1;\\n        }\\n\\n        if (supported[_IOPEN_MARKETABLE]) {\\n            collInfos.receiver = IOpenMarketable(payable(collection)).getDefaultRoyalty();\\n            collInfos.price = IOpenMarketable(payable(collection)).getMintPrice();\\n            collInfos.minimal = IOpenMarketable(payable(collection)).minimal();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74566e8cc00c9b197eb8de0fc8253d15c78a96a695b2404e27c9f4533245560e\",\"license\":\"MIT\"},\"src/interfaces/IOpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IOpenAutoMarket {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(address minter, string memory tokenURI, uint256 price, address receiver, uint96 fee)\\n        external\\n        payable\\n        returns (uint256 tokenID);\\n\\n    function gift(address to, uint256 tokenID) external payable;\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2a3219236d28cad1b8869f6a1c7625f2d7e490a9fc4ccab690c89d34a21fc6e2\",\"license\":\"MIT\"},\"src/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenBound {\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2273079aaa78b355d5232cdb4a46d27c1d9e1463bc667812f4e630f5ad375dac\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERCNftInfos} from \\\"OpenNFTs/contracts/interfaces/IERCNftInfos.sol\\\";\\nimport {IOpenReceiverInfos} from \\\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\\\";\\n\\ninterface IOpenNFTsInfos is IERCNftInfos, IOpenReceiverInfos {\\n    struct OpenNFTsCollectionInfos {\\n        uint256 version;\\n        string template;\\n        bool open;\\n        bool minimal;\\n        uint256 price;\\n        ReceiverInfos receiver;\\n    }\\n\\n    struct OpenNFTsNftInfos {\\n        uint256 price;\\n        ReceiverInfos receiver;\\n    }\\n}\\n\",\"keccak256\":\"0x03072af024de1dca845280f08ad867f109e4f3de180248df3afea27f619852bc\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IOpenNFTsInfos} from \\\"src/interfaces/IOpenNFTsInfos.sol\\\";\\n\\ninterface IOpenNFTsResolver is IOpenNFTsInfos {\\n    function getOpenNFTsNftsInfos(address collection, address account, uint256 limit, uint256 offset)\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getOpenNFTsNftsInfos(address collection, uint256[] memory tokenIDs, address account)\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftInfos,\\n            OpenNFTsNftInfos[] memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos\\n        );\\n\\n    function getOpenNFTsNftInfos(address collection, uint256 tokenID, address account)\\n        external\\n        view\\n        returns (\\n            NftInfos memory nftInfos,\\n            OpenNFTsNftInfos memory openNTFsnftInfos,\\n            CollectionInfos memory collectionInfos\\n        );\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        returns (\\n            CollectionInfos[] memory collectionsInfos,\\n            OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos);\\n}\\n\",\"keccak256\":\"0x915d167e8aeb75e70ec7f7cca0088ccf7c731813be64f199837fb5fc66aa0ee2\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTsV0 {\\n    function addUser(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xc180b00c1693890a4b46a249e6bd77e5a135bb3e3a7cddb3f594b94f7a350281\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTsV1 {\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xd0247d081b3097daf6f3673a75ccc3cedbaea9f7697eca6acea465f3e330ac82\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID_);\\n\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x7d28e07cd0570bcbeaa85362ee882ab7397a5b4cbe1136819f30a0b1fcc13b3e\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTsV3 {\\n    function open() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa809897b050cfab1b6b1705faf79e96595a9ec860e65509dcbd8173cfd0767b\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IOpenNFTsV4 {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd73fee9383c20f40768daac7b698a7d61ce6b79e93513ad25eedfce4e43586fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040526001600160e01b031960809081526301ffc9a760e01b60a0526380ac58cd60e01b60c052635b5e139f60e01b60e05263780e9d6360e01b61010052630a85bd0160e11b61012052636cdb3d1360e11b610140526303a24d0760e21b61016052630271189760e51b610180526307f5828d60e41b6101a05263152a902d60e11b6101c0526200009890600490600b6200073a565b5060408051600c8082526101a0820190925290602082016101808036833750508151620000cd9260059250602001906200073a565b50348015620000db57600080fd5b506040516200405c3803806200405c833981016040819052620000fe9162000821565b62000114826200064c60201b6200169c1760201c565b6200012a81620006bf60201b620016fb1760201c565b639248994960e01b6005600b620001438160006200086f565b6200014f919062000891565b60ff1681548110620001655762000165620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063118a575f60e01b6005600b806001620001b091906200086f565b620001bc919062000891565b60ff1681548110620001d257620001d2620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506350130d5360e01b6005600b8060026200021d91906200086f565b62000229919062000891565b60ff16815481106200023f576200023f620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506386bbc65360e01b6005600b8060036200028a91906200086f565b62000296919062000891565b60ff1681548110620002ac57620002ac620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506398396bd360e01b6005600b806004620002f791906200086f565b62000303919062000891565b60ff1681548110620003195762000319620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550634b68d43160e01b6005600b8060056200036491906200086f565b62000370919062000891565b60ff1681548110620003865762000386620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550633ab2af8560e21b6005600b806006620003d191906200086f565b620003dd919062000891565b60ff1681548110620003f357620003f3620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550636ca50ed960e11b6005600b8060076200043e91906200086f565b6200044a919062000891565b60ff1681548110620004605762000460620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550635c838d8b60e01b6005600b806008620004ab91906200086f565b620004b7919062000891565b60ff1681548110620004cd57620004cd620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063b6ea550160e01b6005600b8060096200051891906200086f565b62000524919062000891565b60ff16815481106200053a576200053a620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063393a4ff760e11b6005600b80600a6200058591906200086f565b62000591919062000891565b60ff1681548110620005a757620005a7620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555063da405d7960e01b6005600b80600b620005f291906200086f565b620005fe919062000891565b60ff1681548110620006145762000614620008ad565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505050620008c3565b60005460ff1615620006a45760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015260640160405180910390fd5b6000805460ff19166001179055620006bc81620006e1565b50565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b82805482825590600052602060002090600701600890048101928215620007db5791602002820160005b83821115620007a757835183826101000a81548163ffffffff021916908360e01c0217905550926020019260040160208160030104928301926001030262000764565b8015620007d95782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620007a7565b505b50620007e9929150620007ed565b5090565b5b80821115620007e95760008155600101620007ee565b80516001600160a01b03811681146200081c57600080fd5b919050565b600080604083850312156200083557600080fd5b620008408362000804565b9150620008506020840162000804565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60ff81811683821601908111156200088b576200088b62000859565b92915050565b60ff82811682821603908111156200088b576200088b62000859565b634e487b7160e01b600052603260045260246000fd5b61378980620008d36000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636e228dab116100de578063c3c5a54711610097578063dceba60411610071578063dceba604146103d0578063e47a60f6146103f1578063ec530de614610415578063f2fde38b1461042657600080fd5b8063c3c5a5471461035d578063cdaafcd61461038b578063db668ce0146103ad57600080fd5b80636e228dab146102b65780638da5cb5b146102c9578063a39fac12146102f3578063a8e719ce14610308578063b172cbd11461031b578063c21ba2121461033d57600080fd5b8063490f06eb11610130578063490f06eb1461022a5780634ba79dfe1461024a57806350da677b1461025d5780635ee9a1d21461027d5780635fa15ebb14610290578063690682a4146102a357600080fd5b806301ffc9a7146101785780632eb723a2146101a057806334f8674a146101c05780633628731c146101e257806338eada1c146101f75780633f0faf1d1461020a575b600080fd5b61018b610186366004612af4565b610439565b60405190151581526020015b60405180910390f35b6101b36101ae366004612b2f565b610464565b6040516101979190612ced565b6101d36101ce366004612d69565b61048f565b60405161019793929190612f4d565b6101f56101f0366004612fff565b6105f5565b005b6101f5610205366004613033565b61063b565b61021d610218366004612d69565b610647565b6040516101979190613050565b61023d610238366004613033565b610708565b6040516101979190613063565b6101f5610258366004613033565b610741565b61027061026b36600461310b565b61074a565b60405161019791906131ca565b6101f561028b366004613033565b610802565b61018b61029e366004613033565b61085b565b61023d6102b13660046131eb565b61092c565b61023d6102c4366004612fff565b610b92565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610197565b6102fb610c43565b6040516101979190613242565b6003546102db906001600160a01b031681565b61032e610329366004613283565b610ca5565b604051610197939291906132c5565b61035061034b366004613283565b610d4d565b60405161019791906132f7565b61018b61036b366004613033565b6001600160a01b0316600090815260016020819052604090912054101590565b61039e61039936600461330a565b610d60565b60405161019793929190613350565b6103c06103bb366004613033565b611165565b60405161019794939291906133f2565b6103e36103de366004612b2f565b611464565b604051610197929190613473565b6104046103ff36600461330a565b6114f4565b6040516101979594939291906134a1565b600254604051908152602001610197565b6101f5610434366004613033565b611648565b60006001600160e01b0319821663667de68960e01b148061045e575061045e8261171d565b92915050565b61046c612997565b6040805160008152602081019091526104889084908490611742565b9392505050565b60608061049a612997565b610523866000600580548060200260200160405190810160405280929190818152602001828054801561051957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104db5790505b5050505050611742565b9050610530868686610647565b925084516001600160401b0381111561054b5761054b612d00565b60405190808252806020026020018201604052801561058457816020015b610571612a07565b8152602001906001900390816105695790505b50915060005b85518110156105eb576105bb878783815181106105a9576105a96134ef565b60200260200101518460e00151611b3a565b8382815181106105cd576105cd6134ef565b602002602001018190525080806105e39061351b565b91505061058a565b5093509350939050565b805160005b8181101561063657610624838281518110610617576106176134ef565b6020026020010151611cf9565b8061062e8161351b565b9150506105fa565b505050565b61064481611cf9565b50565b8151606090806001600160401b0381111561066457610664612d00565b60405190808252806020026020018201604052801561069d57816020015b61068a612a3c565b8152602001906001900390816106825790505b50915060005b818110156106ff576106cf868683815181106106c1576106c16134ef565b602002602001015186611e46565b8382815181106106e1576106e16134ef565b602002602001018190525080806106f79061351b565b9150506106a3565b50509392505050565b606061045e826001600060405190808252806020026020018201604052801561073b578160200160208202803683370190505b5061092c565b610644816122d1565b8251606090806001600160401b0381111561076757610767612d00565b6040519080825280602002602001820160405280156107a057816020015b61078d612997565b8152602001906001900390816107855790505b50915060005b818110156106ff576107d28682815181106107c3576107c36134ef565b60200260200101518686611742565b8382815181106107e4576107e46134ef565b602002602001018190525080806107fa9061351b565b9150506107a6565b60005461010090046001600160a01b031633146108525760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b610644816116fb565b6000816000816001600160a01b03163b116108885760405162461bcd60e51b815260040161084990613534565b600061089384610708565b905080600060ff16815181106108ab576108ab6134ef565b60200260200101511580156108da575080600160ff16815181106108d1576108d16134ef565b60200260200101515b8015610924575080600260ff16815181106108f7576108f76134ef565b602002602001015180610924575080600660ff168151811061091b5761091b6134ef565b60200260200101515b949350505050565b6060836000816001600160a01b03163b116109595760405162461bcd60e51b815260040161084990613534565b60045483516000818761096d57600061096f565b835b610979919061355f565b90506000816001600160401b0381111561099557610995612d00565b6040519080825280602002602001820160405280156109be578160200160208202803683370190505b5095508715610ab55760005b84811015610ab357896001600160a01b03166301ffc9a7600483815481106109f4576109f46134ef565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b8152600401610a339190613572565b602060405180830381865afa158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190613587565b8783610a7f8161351b565b945081518110610a9157610a916134ef565b9115156020928302919091019091015280610aab8161351b565b9150506109ca565b505b60005b83811015610b8557896001600160a01b03166301ffc9a7898381518110610ae157610ae16134ef565b60200260200101516040518263ffffffff1660e01b8152600401610b059190613572565b602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190613587565b8783610b518161351b565b945081518110610b6357610b636134ef565b9115156020928302919091019091015280610b7d8161351b565b915050610ab8565b5050505050509392505050565b8051606090806001600160401b03811115610baf57610baf612d00565b604051908082528060200260200182016040528015610bd8578160200160208202803683370190505b50915060005b81811015610c3c57610c08848281518110610bfb57610bfb6134ef565b602002602001015161085b565b838281518110610c1a57610c1a6134ef565b9115156020928302919091019091015280610c348161351b565b915050610bde565b5050919050565b60606002805480602002602001604051908101604052809291908181526020018280548015610c9b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c7d575b5050505050905090565b610cad612a3c565b610cb5612a07565b610cbd612997565b610d2486856005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611742565b9050610d31868686610d4d565b9250610d4286868360e00151611b3a565b915093509350939050565b610d55612a3c565b610924848484611e46565b60606000806000610d7088610708565b905080600260ff1681518110610d8857610d886134ef565b60200260200101518015610db6575080600260ff1681518110610dad57610dad6134ef565b60200260200101515b1561115a576001600160a01b038716610fa957876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b91906135a4565b915081851115610e6e5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610849565b81610e79878761355f565b1115610e8e57610e8985836135bd565b610e90565b855b9250826001600160401b03811115610eaa57610eaa612d00565b604051908082528060200260200182016040528015610ee357816020015b610ed0612a3c565b815260200190600190039081610ec85790505b50935060005b83811015610fa357610f73896001600160a01b038116634f6ccce7610f0e858b61355f565b6040518263ffffffff1660e01b8152600401610f2c91815260200190565b602060405180830381865afa158015610f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6d91906135a4565b8a611e46565b858281518110610f8557610f856134ef565b60200260200101819052508080610f9b9061351b565b915050610ee9565b5061115a565b6040516370a0823160e01b81526001600160a01b0388811660048301528916906370a0823190602401602060405180830381865afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101391906135a4565b9150818511156110565760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610849565b81611061878761355f565b11156110765761107185836135bd565b611078565b855b9250826001600160401b0381111561109257611092612d00565b6040519080825280602002602001820160405280156110cb57816020015b6110b8612a3c565b8152602001906001900390816110b05790505b50935060005b8381101561115857611128896001600160a01b038116632f745c598b6110f7868c61355f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610f2c565b85828151811061113a5761113a6134ef565b602002602001018190525080806111509061351b565b9150506110d1565b505b509450945094915050565b60608060008060006111fc611178610c43565b8760058054806020026020016040519081016040528092919081815260200182805480156111f257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116111b45790505b505050505061074a565b90508051915060005b815181101561128d576000828281518110611222576112226134ef565b602002602001015160a0015111806112685750866001600160a01b0316828281518110611251576112516134ef565b6020026020010151602001516001600160a01b0316145b1561127b57836112778161351b565b9450505b806112858161351b565b915050611205565b50826001600160401b038111156112a6576112a6612d00565b6040519080825280602002602001820160405280156112df57816020015b6112cc612997565b8152602001906001900390816112c45790505b509450826001600160401b038111156112fa576112fa612d00565b60405190808252806020026020018201604052801561133357816020015b611320612a8f565b8152602001906001900390816113185790505b5093506000805b8381101561145a576000838281518110611356576113566134ef565b602002602001015160a00151118061139c5750876001600160a01b0316838281518110611385576113856134ef565b6020026020010151602001516001600160a01b0316145b15611448578281815181106113b3576113b36134ef565b60200260200101518783815181106113cd576113cd6134ef565b602002602001018190525061141c8382815181106113ed576113ed6134ef565b60200260200101516000015184838151811061140b5761140b6134ef565b602002602001015160e001516124b3565b86838151811061142e5761142e6134ef565b602002602001018190525081806114449061351b565b9250505b806114528161351b565b91505061133a565b5050509193509193565b61146c612997565b611474612a8f565b6114db84846005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611742565b91506114eb848360e001516124b3565b90509250929050565b6060806114ff612997565b60008061156989896005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611742565b925061157789898989610d60565b825192975090935091506001600160401b0381111561159857611598612d00565b6040519080825280602002602001820160405280156115d157816020015b6115be612a07565b8152602001906001900390816115b65790505b50935060005b855181101561163c5761160c8a8783815181106115f6576115f66134ef565b6020026020010151600001518660e00151611b3a565b85828151811061161e5761161e6134ef565b602002602001018190525080806116349061351b565b9150506115d7565b50945094509450945094565b60005461010090046001600160a01b031633146116935760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610849565b610644816128a9565b60005460ff16156116e55760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610849565b6000805460ff19166001179055610644816128a9565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166350da677b60e01b148061045e575061045e82612902565b61174a612997565b836000816001600160a01b03163b116117755760405162461bcd60e51b815260040161084990613534565b60006117838660018661092c565b60e08401819052805190915081906000906117a0576117a06134ef565b60200260200101511580156117cf575080600160ff16815181106117c6576117c66134ef565b60200260200101515b6118085760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b6044820152606401610849565b80600260ff168151811061181e5761181e6134ef565b60200260200101518061184b575080600660ff1681518110611842576118426134ef565b60200260200101515b61188f5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b6044820152606401610849565b6001600160a01b03861680845260408051638da5cb5b60e01b81529051638da5cb5b916004808201926020929091908290030181865afa9250505080156118f3575060408051601f3d908101601f191682019092526118f0918101906135d0565b60015b15611907576001600160a01b031660208401525b856001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561196657506040513d6000823e601f3d908101601f1916820160405261196391908101906135ed565b60015b156119715760408401525b856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156119d057506040513d6000823e601f3d908101601f191682016040526119cd91908101906135ed565b60015b156119db5760608401525b856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a35575060408051601f3d908101601f19168201909252611a32918101906135a4565b60015b15611a405760808401525b6001600160a01b038516156106ff576040516370a0823160e01b81526001600160a01b0386811660048301528716906370a0823190602401602060405180830381865afa925050508015611ab1575060408051601f3d908101601f19168201909252611aae918101906135a4565b60015b15611abc5760a08401525b60405163e985e9c560e01b81526001600160a01b0386811660048301528716602482018190529063e985e9c590604401602060405180830381865afa925050508015611b25575060408051601f3d908101601f19168201909252611b2291810190613587565b60015b156106ff57151560c084015250509392505050565b611b42612a07565b81611b4f600b6003613680565b60ff1681518110611b6257611b626134ef565b602002602001015115611c4d576040516310676f6f60e31b8152600481018490526001600160a01b0385169063833b7b7890602401606060405180830381865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190613699565b602082015260405163c457fb3760e01b8152600481018490526001600160a01b0385169063c457fb3790602401602060405180830381865afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4691906135a4565b8152610488565b81600a60ff1681518110611c6357611c636134ef565b6020026020010151156104885760405163152a902d60e11b815260048101849052600160248201526001600160a01b03851690632a55205a906044016040805180830381865afa158015611cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdf919061370f565b5060208201516001600160a01b0390911690529392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b03161480611d3357506003546001600160a01b031633145b611d7a5760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610849565b80611d848161085b565b611dc15760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b6044820152606401610849565b6001600160a01b0382166000908152600160208190526040909120541015611e425760028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b038616908117909155915460009283526020919091526040909120555b5050565b611e4e612a3c565b836000816001600160a01b03163b11611e795760405162461bcd60e51b815260040161084990613534565b8382526040516301ffc9a760e01b81526001600160a01b038616906301ffc9a790611eaf906380ac58cd60e01b90600401613572565b602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef09190613587565b156120e0576040516331a9108f60e11b8152600481018590526001600160a01b03861690636352211e90602401602060405180830381865afa925050508015611f56575060408051601f3d908101601f19168201909252611f53918101906135d0565b60015b15611f6a576001600160a01b031660408301525b60408201516001600160a01b0316156120db5760405163020604bf60e21b8152600481018590526001600160a01b0386169063081812fc90602401602060405180830381865afa158015611fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe691906135d0565b6001600160a01b0390811660608401526040516301ffc9a760e01b8152908616906301ffc9a79061202290635b5e139f60e01b90600401613572565b602060405180830381865afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120639190613587565b156120db5760405163c87b56dd60e01b8152600481018590526001600160a01b0386169063c87b56dd90602401600060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120d591908101906135ed565b60208301525b6122c9565b6040516301ffc9a760e01b81526001600160a01b038616906301ffc9a79061211390636cdb3d1360e11b90600401613572565b602060405180830381865afa158015612130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121549190613587565b156122c9576001600160a01b038316156121dd57604051627eeac760e11b81526001600160a01b0384811660048301526024820186905286169062fdd58e90604401602060405180830381865afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d791906135a4565b60808301525b6040516301ffc9a760e01b81526001600160a01b038616906301ffc9a790612210906303a24d0760e21b90600401613572565b602060405180830381865afa15801561222d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122519190613587565b156122c9576040516303a24d0760e21b8152600481018590526001600160a01b03861690630e89341c90602401600060405180830381865afa15801561229b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122c391908101906135ed565b60208301525b509392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061230b57506003546001600160a01b031633145b6123525760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610849565b6001600160a01b03811660009081526001602081905260409091205410156123ad5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610849565b6001600160a01b03811660009081526001602052604090205460025481146124635760028054600091906123e3906001906135bd565b815481106123f3576123f36134ef565b6000918252602090912001546001600160a01b031690508060026124186001856135bd565b81548110612428576124286134ef565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b038216600090815260016020526040812055600280548061248d5761248d61373d565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6124bb612a8f565b816124c8600b6002613680565b60ff16815181106124db576124db6134ef565b60200260200101511561262f57826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254a91906135a4565b816000018181525050826001600160a01b0316636f2ddd936040518163ffffffff1660e01b8152600401600060405180830381865afa158015612591573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125b991908101906135ed565b8160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126239190613587565b15156040820152612738565b8161263c600b6008613680565b60ff168151811061264f5761264f6134ef565b6020026020010151156126d05760038160000181815250506040518060400160405280600a8152602001694f70656e4e465473563360b01b8152508160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ff573d6000803e3d6000fd5b816126dd600b6007613680565b60ff16815181106126f0576126f06134ef565b6020026020010151156127065760028152612738565b81612713600b6006613680565b60ff1681518110612726576127266134ef565b60200260200101511561273857600181525b81612745600b6003613680565b60ff1681518110612758576127586134ef565b60200260200101511561045e57826001600160a01b0316638cabe05a6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156127a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c79190613699565b8160a00181905250826001600160a01b031663a7f93ebd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283191906135a4565b816080018181525050826001600160a01b03166394a53d416040518163ffffffff1660e01b8152600401602060405180830381865afa158015612878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289c9190613587565b1515606082015292915050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216631e09d27b60e01b148061045e575061045e8260006001600160e01b0319821663118a575f60e01b148061045e575061045e8260006001600160e01b03198216633f62885160e01b148061045e575061045e8260006307f5828d60e41b6001600160e01b03198316148061045e57506001600160e01b031982166301ffc9a760e01b1461045e565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000151581526020016060815260200160006001811115612a0257612a02612bf5565b905290565b604051806040016040528060008152602001612a02604080516060810182526000808252602082018190529181019190915290565b6040518060c00160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001811115612a0257612a02612bf5565b6040805160c08101825260008082526060602080840182905283850183905281840183905260808401839052845191820185528282528101829052928301529060a082015290565b80356001600160e01b031981168114612aef57600080fd5b919050565b600060208284031215612b0657600080fd5b61048882612ad7565b6001600160a01b038116811461064457600080fd5b8035612aef81612b0f565b60008060408385031215612b4257600080fd5b8235612b4d81612b0f565b91506020830135612b5d81612b0f565b809150509250929050565b60005b83811015612b83578181015183820152602001612b6b565b50506000910152565b60008151808452612ba4816020860160208601612b68565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015612bea578151151587529582019590820190600101612bcc565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60028110612c2957634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b0316825260006101206020830151612c5960208601826001600160a01b03169052565b506040830151816040860152612c7182860182612b8c565b91505060608301518482036060860152612c8b8282612b8c565b9150506080830151608085015260a083015160a085015260c0830151612cb560c086018215159052565b5060e083015184820360e0860152612ccd8282612bb8565b91505061010080840151612ce382870182612c0b565b5090949350505050565b6020815260006104886020830184612c2d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d3e57612d3e612d00565b604052919050565b60006001600160401b03821115612d5f57612d5f612d00565b5060051b60200190565b600080600060608486031215612d7e57600080fd5b8335612d8981612b0f565b92506020848101356001600160401b03811115612da557600080fd5b8501601f81018713612db657600080fd5b8035612dc9612dc482612d46565b612d16565b81815260059190911b82018301908381019089831115612de857600080fd5b928401925b82841015612e0657833582529284019290840190612ded565b8096505050505050612e1a60408501612b24565b90509250925092565b805182526000602082015160c06020850152612e4260c0850182612b8c565b9050604083015160018060a01b03808216604087015280606086015116606087015250506080830151608085015260a08301516122c960a0860182612c0b565b600081518084526020808501808196508360051b8101915082860160005b85811015612eca578284038952612eb8848351612e23565b98850198935090840190600101612ea0565b5091979650505050505050565b805182526020810151610636602084018280516001600160a01b031682526020808201516001600160601b031690830152604090810151910152565b600081518084526020808501945080840160005b83811015612bea57612f3a878351612ed7565b6080969096019590820190600101612f27565b606081526000612f606060830186612e82565b8281036020840152612f728186612f13565b90508281036040840152612f868185612c2d565b9695505050505050565b600082601f830112612fa157600080fd5b81356020612fb1612dc483612d46565b82815260059290921b84018101918181019086841115612fd057600080fd5b8286015b84811015612ff4578035612fe781612b0f565b8352918301918301612fd4565b509695505050505050565b60006020828403121561301157600080fd5b81356001600160401b0381111561302757600080fd5b61092484828501612f90565b60006020828403121561304557600080fd5b813561048881612b0f565b6020815260006104886020830184612e82565b6020808252825182820181905260009190848201906040850190845b8181101561309d57835115158352928401929184019160010161307f565b50909695505050505050565b600082601f8301126130ba57600080fd5b813560206130ca612dc483612d46565b82815260059290921b840181019181810190868411156130e957600080fd5b8286015b84811015612ff4576130fe81612ad7565b83529183019183016130ed565b60008060006060848603121561312057600080fd5b83356001600160401b038082111561313757600080fd5b61314387838801612f90565b94506020860135915061315582612b0f565b9092506040850135908082111561316b57600080fd5b50613178868287016130a9565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b85811015612eca5782840389526131b8848351612c2d565b988501989350908401906001016131a0565b6020815260006104886020830184613182565b801515811461064457600080fd5b60008060006060848603121561320057600080fd5b833561320b81612b0f565b9250602084013561321b816131dd565b915060408401356001600160401b0381111561323657600080fd5b613178868287016130a9565b6020808252825182820181905260009190848201906040850190845b8181101561309d5783516001600160a01b03168352928401929184019160010161325e565b60008060006060848603121561329857600080fd5b83356132a381612b0f565b92506020840135915060408401356132ba81612b0f565b809150509250925092565b60c0815260006132d860c0830186612e23565b6132e56020840186612ed7565b82810360a0840152612f868185612c2d565b6020815260006104886020830184612e23565b6000806000806080858703121561332057600080fd5b843561332b81612b0f565b9350602085013561333b81612b0f565b93969395505050506040820135916060013590565b6060815260006133636060830186612e82565b60208301949094525060400152919050565b600061010082518452602083015181602086015261339582860182612b8c565b9150506040830151151560408501526060830151151560608501526080830151608085015260a08301516122c960a086018280516001600160a01b031682526020808201516001600160601b031690830152604090810151910152565b6080815260006134056080830187613182565b6020838203818501528187518084528284019150828160051b850101838a0160005b8381101561345557601f19878403018552613443838351613375565b94860194925090850190600101613427565b50506040870198909852505050506060909101919091525092915050565b6040815260006134866040830185612c2d565b82810360208401526134988185613375565b95945050505050565b60a0815260006134b460a0830188612e82565b82810360208401526134c68188612f13565b905082810360408401526134da8187612c2d565b60608401959095525050608001529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161352d5761352d613505565b5060010190565b602080825260119082015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b604082015260600190565b8082018082111561045e5761045e613505565b6001600160e01b031991909116815260200190565b60006020828403121561359957600080fd5b8151610488816131dd565b6000602082840312156135b657600080fd5b5051919050565b8181038181111561045e5761045e613505565b6000602082840312156135e257600080fd5b815161048881612b0f565b6000602082840312156135ff57600080fd5b81516001600160401b038082111561361657600080fd5b818401915084601f83011261362a57600080fd5b81518181111561363c5761363c612d00565b61364f601f8201601f1916602001612d16565b915080825285602082850101111561366657600080fd5b613677816020840160208601612b68565b50949350505050565b60ff818116838216019081111561045e5761045e613505565b6000606082840312156136ab57600080fd5b604051606081018181106001600160401b03821117156136cd576136cd612d00565b60405282516136db81612b0f565b815260208301516001600160601b03811681146136f757600080fd5b60208201526040928301519281019290925250919050565b6000806040838503121561372257600080fd5b825161372d81612b0f565b6020939093015192949293505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220dd35e01b3d5bb322459da51c840dca65e2930280789ce6b05a632718b33e491864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80636e228dab116100de578063c3c5a54711610097578063dceba60411610071578063dceba604146103d0578063e47a60f6146103f1578063ec530de614610415578063f2fde38b1461042657600080fd5b8063c3c5a5471461035d578063cdaafcd61461038b578063db668ce0146103ad57600080fd5b80636e228dab146102b65780638da5cb5b146102c9578063a39fac12146102f3578063a8e719ce14610308578063b172cbd11461031b578063c21ba2121461033d57600080fd5b8063490f06eb11610130578063490f06eb1461022a5780634ba79dfe1461024a57806350da677b1461025d5780635ee9a1d21461027d5780635fa15ebb14610290578063690682a4146102a357600080fd5b806301ffc9a7146101785780632eb723a2146101a057806334f8674a146101c05780633628731c146101e257806338eada1c146101f75780633f0faf1d1461020a575b600080fd5b61018b610186366004612af4565b610439565b60405190151581526020015b60405180910390f35b6101b36101ae366004612b2f565b610464565b6040516101979190612ced565b6101d36101ce366004612d69565b61048f565b60405161019793929190612f4d565b6101f56101f0366004612fff565b6105f5565b005b6101f5610205366004613033565b61063b565b61021d610218366004612d69565b610647565b6040516101979190613050565b61023d610238366004613033565b610708565b6040516101979190613063565b6101f5610258366004613033565b610741565b61027061026b36600461310b565b61074a565b60405161019791906131ca565b6101f561028b366004613033565b610802565b61018b61029e366004613033565b61085b565b61023d6102b13660046131eb565b61092c565b61023d6102c4366004612fff565b610b92565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610197565b6102fb610c43565b6040516101979190613242565b6003546102db906001600160a01b031681565b61032e610329366004613283565b610ca5565b604051610197939291906132c5565b61035061034b366004613283565b610d4d565b60405161019791906132f7565b61018b61036b366004613033565b6001600160a01b0316600090815260016020819052604090912054101590565b61039e61039936600461330a565b610d60565b60405161019793929190613350565b6103c06103bb366004613033565b611165565b60405161019794939291906133f2565b6103e36103de366004612b2f565b611464565b604051610197929190613473565b6104046103ff36600461330a565b6114f4565b6040516101979594939291906134a1565b600254604051908152602001610197565b6101f5610434366004613033565b611648565b60006001600160e01b0319821663667de68960e01b148061045e575061045e8261171d565b92915050565b61046c612997565b6040805160008152602081019091526104889084908490611742565b9392505050565b60608061049a612997565b610523866000600580548060200260200160405190810160405280929190818152602001828054801561051957602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116104db5790505b5050505050611742565b9050610530868686610647565b925084516001600160401b0381111561054b5761054b612d00565b60405190808252806020026020018201604052801561058457816020015b610571612a07565b8152602001906001900390816105695790505b50915060005b85518110156105eb576105bb878783815181106105a9576105a96134ef565b60200260200101518460e00151611b3a565b8382815181106105cd576105cd6134ef565b602002602001018190525080806105e39061351b565b91505061058a565b5093509350939050565b805160005b8181101561063657610624838281518110610617576106176134ef565b6020026020010151611cf9565b8061062e8161351b565b9150506105fa565b505050565b61064481611cf9565b50565b8151606090806001600160401b0381111561066457610664612d00565b60405190808252806020026020018201604052801561069d57816020015b61068a612a3c565b8152602001906001900390816106825790505b50915060005b818110156106ff576106cf868683815181106106c1576106c16134ef565b602002602001015186611e46565b8382815181106106e1576106e16134ef565b602002602001018190525080806106f79061351b565b9150506106a3565b50509392505050565b606061045e826001600060405190808252806020026020018201604052801561073b578160200160208202803683370190505b5061092c565b610644816122d1565b8251606090806001600160401b0381111561076757610767612d00565b6040519080825280602002602001820160405280156107a057816020015b61078d612997565b8152602001906001900390816107855790505b50915060005b818110156106ff576107d28682815181106107c3576107c36134ef565b60200260200101518686611742565b8382815181106107e4576107e46134ef565b602002602001018190525080806107fa9061351b565b9150506107a6565b60005461010090046001600160a01b031633146108525760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b610644816116fb565b6000816000816001600160a01b03163b116108885760405162461bcd60e51b815260040161084990613534565b600061089384610708565b905080600060ff16815181106108ab576108ab6134ef565b60200260200101511580156108da575080600160ff16815181106108d1576108d16134ef565b60200260200101515b8015610924575080600260ff16815181106108f7576108f76134ef565b602002602001015180610924575080600660ff168151811061091b5761091b6134ef565b60200260200101515b949350505050565b6060836000816001600160a01b03163b116109595760405162461bcd60e51b815260040161084990613534565b60045483516000818761096d57600061096f565b835b610979919061355f565b90506000816001600160401b0381111561099557610995612d00565b6040519080825280602002602001820160405280156109be578160200160208202803683370190505b5095508715610ab55760005b84811015610ab357896001600160a01b03166301ffc9a7600483815481106109f4576109f46134ef565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b8152600401610a339190613572565b602060405180830381865afa158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a749190613587565b8783610a7f8161351b565b945081518110610a9157610a916134ef565b9115156020928302919091019091015280610aab8161351b565b9150506109ca565b505b60005b83811015610b8557896001600160a01b03166301ffc9a7898381518110610ae157610ae16134ef565b60200260200101516040518263ffffffff1660e01b8152600401610b059190613572565b602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190613587565b8783610b518161351b565b945081518110610b6357610b636134ef565b9115156020928302919091019091015280610b7d8161351b565b915050610ab8565b5050505050509392505050565b8051606090806001600160401b03811115610baf57610baf612d00565b604051908082528060200260200182016040528015610bd8578160200160208202803683370190505b50915060005b81811015610c3c57610c08848281518110610bfb57610bfb6134ef565b602002602001015161085b565b838281518110610c1a57610c1a6134ef565b9115156020928302919091019091015280610c348161351b565b915050610bde565b5050919050565b60606002805480602002602001604051908101604052809291908181526020018280548015610c9b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c7d575b5050505050905090565b610cad612a3c565b610cb5612a07565b610cbd612997565b610d2486856005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611742565b9050610d31868686610d4d565b9250610d4286868360e00151611b3a565b915093509350939050565b610d55612a3c565b610924848484611e46565b60606000806000610d7088610708565b905080600260ff1681518110610d8857610d886134ef565b60200260200101518015610db6575080600260ff1681518110610dad57610dad6134ef565b60200260200101515b1561115a576001600160a01b038716610fa957876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b91906135a4565b915081851115610e6e5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610849565b81610e79878761355f565b1115610e8e57610e8985836135bd565b610e90565b855b9250826001600160401b03811115610eaa57610eaa612d00565b604051908082528060200260200182016040528015610ee357816020015b610ed0612a3c565b815260200190600190039081610ec85790505b50935060005b83811015610fa357610f73896001600160a01b038116634f6ccce7610f0e858b61355f565b6040518263ffffffff1660e01b8152600401610f2c91815260200190565b602060405180830381865afa158015610f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6d91906135a4565b8a611e46565b858281518110610f8557610f856134ef565b60200260200101819052508080610f9b9061351b565b915050610ee9565b5061115a565b6040516370a0823160e01b81526001600160a01b0388811660048301528916906370a0823190602401602060405180830381865afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101391906135a4565b9150818511156110565760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610849565b81611061878761355f565b11156110765761107185836135bd565b611078565b855b9250826001600160401b0381111561109257611092612d00565b6040519080825280602002602001820160405280156110cb57816020015b6110b8612a3c565b8152602001906001900390816110b05790505b50935060005b8381101561115857611128896001600160a01b038116632f745c598b6110f7868c61355f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610f2c565b85828151811061113a5761113a6134ef565b602002602001018190525080806111509061351b565b9150506110d1565b505b509450945094915050565b60608060008060006111fc611178610c43565b8760058054806020026020016040519081016040528092919081815260200182805480156111f257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116111b45790505b505050505061074a565b90508051915060005b815181101561128d576000828281518110611222576112226134ef565b602002602001015160a0015111806112685750866001600160a01b0316828281518110611251576112516134ef565b6020026020010151602001516001600160a01b0316145b1561127b57836112778161351b565b9450505b806112858161351b565b915050611205565b50826001600160401b038111156112a6576112a6612d00565b6040519080825280602002602001820160405280156112df57816020015b6112cc612997565b8152602001906001900390816112c45790505b509450826001600160401b038111156112fa576112fa612d00565b60405190808252806020026020018201604052801561133357816020015b611320612a8f565b8152602001906001900390816113185790505b5093506000805b8381101561145a576000838281518110611356576113566134ef565b602002602001015160a00151118061139c5750876001600160a01b0316838281518110611385576113856134ef565b6020026020010151602001516001600160a01b0316145b15611448578281815181106113b3576113b36134ef565b60200260200101518783815181106113cd576113cd6134ef565b602002602001018190525061141c8382815181106113ed576113ed6134ef565b60200260200101516000015184838151811061140b5761140b6134ef565b602002602001015160e001516124b3565b86838151811061142e5761142e6134ef565b602002602001018190525081806114449061351b565b9250505b806114528161351b565b91505061133a565b5050509193509193565b61146c612997565b611474612a8f565b6114db84846005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611742565b91506114eb848360e001516124b3565b90509250929050565b6060806114ff612997565b60008061156989896005805480602002602001604051908101604052809291908181526020018280548015610519576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116104db5790505050505050611742565b925061157789898989610d60565b825192975090935091506001600160401b0381111561159857611598612d00565b6040519080825280602002602001820160405280156115d157816020015b6115be612a07565b8152602001906001900390816115b65790505b50935060005b855181101561163c5761160c8a8783815181106115f6576115f66134ef565b6020026020010151600001518660e00151611b3a565b85828151811061161e5761161e6134ef565b602002602001018190525080806116349061351b565b9150506115d7565b50945094509450945094565b60005461010090046001600160a01b031633146116935760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610849565b610644816128a9565b60005460ff16156116e55760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610849565b6000805460ff19166001179055610644816128a9565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166350da677b60e01b148061045e575061045e82612902565b61174a612997565b836000816001600160a01b03163b116117755760405162461bcd60e51b815260040161084990613534565b60006117838660018661092c565b60e08401819052805190915081906000906117a0576117a06134ef565b60200260200101511580156117cf575080600160ff16815181106117c6576117c66134ef565b60200260200101515b6118085760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b6044820152606401610849565b80600260ff168151811061181e5761181e6134ef565b60200260200101518061184b575080600660ff1681518110611842576118426134ef565b60200260200101515b61188f5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b6044820152606401610849565b6001600160a01b03861680845260408051638da5cb5b60e01b81529051638da5cb5b916004808201926020929091908290030181865afa9250505080156118f3575060408051601f3d908101601f191682019092526118f0918101906135d0565b60015b15611907576001600160a01b031660208401525b856001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561196657506040513d6000823e601f3d908101601f1916820160405261196391908101906135ed565b60015b156119715760408401525b856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156119d057506040513d6000823e601f3d908101601f191682016040526119cd91908101906135ed565b60015b156119db5760608401525b856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a35575060408051601f3d908101601f19168201909252611a32918101906135a4565b60015b15611a405760808401525b6001600160a01b038516156106ff576040516370a0823160e01b81526001600160a01b0386811660048301528716906370a0823190602401602060405180830381865afa925050508015611ab1575060408051601f3d908101601f19168201909252611aae918101906135a4565b60015b15611abc5760a08401525b60405163e985e9c560e01b81526001600160a01b0386811660048301528716602482018190529063e985e9c590604401602060405180830381865afa925050508015611b25575060408051601f3d908101601f19168201909252611b2291810190613587565b60015b156106ff57151560c084015250509392505050565b611b42612a07565b81611b4f600b6003613680565b60ff1681518110611b6257611b626134ef565b602002602001015115611c4d576040516310676f6f60e31b8152600481018490526001600160a01b0385169063833b7b7890602401606060405180830381865afa158015611bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd89190613699565b602082015260405163c457fb3760e01b8152600481018490526001600160a01b0385169063c457fb3790602401602060405180830381865afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4691906135a4565b8152610488565b81600a60ff1681518110611c6357611c636134ef565b6020026020010151156104885760405163152a902d60e11b815260048101849052600160248201526001600160a01b03851690632a55205a906044016040805180830381865afa158015611cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdf919061370f565b5060208201516001600160a01b0390911690529392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b03161480611d3357506003546001600160a01b031633145b611d7a5760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610849565b80611d848161085b565b611dc15760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b6044820152606401610849565b6001600160a01b0382166000908152600160208190526040909120541015611e425760028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b038616908117909155915460009283526020919091526040909120555b5050565b611e4e612a3c565b836000816001600160a01b03163b11611e795760405162461bcd60e51b815260040161084990613534565b8382526040516301ffc9a760e01b81526001600160a01b038616906301ffc9a790611eaf906380ac58cd60e01b90600401613572565b602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef09190613587565b156120e0576040516331a9108f60e11b8152600481018590526001600160a01b03861690636352211e90602401602060405180830381865afa925050508015611f56575060408051601f3d908101601f19168201909252611f53918101906135d0565b60015b15611f6a576001600160a01b031660408301525b60408201516001600160a01b0316156120db5760405163020604bf60e21b8152600481018590526001600160a01b0386169063081812fc90602401602060405180830381865afa158015611fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe691906135d0565b6001600160a01b0390811660608401526040516301ffc9a760e01b8152908616906301ffc9a79061202290635b5e139f60e01b90600401613572565b602060405180830381865afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120639190613587565b156120db5760405163c87b56dd60e01b8152600481018590526001600160a01b0386169063c87b56dd90602401600060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120d591908101906135ed565b60208301525b6122c9565b6040516301ffc9a760e01b81526001600160a01b038616906301ffc9a79061211390636cdb3d1360e11b90600401613572565b602060405180830381865afa158015612130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121549190613587565b156122c9576001600160a01b038316156121dd57604051627eeac760e11b81526001600160a01b0384811660048301526024820186905286169062fdd58e90604401602060405180830381865afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d791906135a4565b60808301525b6040516301ffc9a760e01b81526001600160a01b038616906301ffc9a790612210906303a24d0760e21b90600401613572565b602060405180830381865afa15801561222d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122519190613587565b156122c9576040516303a24d0760e21b8152600481018590526001600160a01b03861690630e89341c90602401600060405180830381865afa15801561229b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122c391908101906135ed565b60208301525b509392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061230b57506003546001600160a01b031633145b6123525760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610849565b6001600160a01b03811660009081526001602081905260409091205410156123ad5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610849565b6001600160a01b03811660009081526001602052604090205460025481146124635760028054600091906123e3906001906135bd565b815481106123f3576123f36134ef565b6000918252602090912001546001600160a01b031690508060026124186001856135bd565b81548110612428576124286134ef565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b038216600090815260016020526040812055600280548061248d5761248d61373d565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6124bb612a8f565b816124c8600b6002613680565b60ff16815181106124db576124db6134ef565b60200260200101511561262f57826001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa158015612526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254a91906135a4565b816000018181525050826001600160a01b0316636f2ddd936040518163ffffffff1660e01b8152600401600060405180830381865afa158015612591573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125b991908101906135ed565b8160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126239190613587565b15156040820152612738565b8161263c600b6008613680565b60ff168151811061264f5761264f6134ef565b6020026020010151156126d05760038160000181815250506040518060400160405280600a8152602001694f70656e4e465473563360b01b8152508160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ff573d6000803e3d6000fd5b816126dd600b6007613680565b60ff16815181106126f0576126f06134ef565b6020026020010151156127065760028152612738565b81612713600b6006613680565b60ff1681518110612726576127266134ef565b60200260200101511561273857600181525b81612745600b6003613680565b60ff1681518110612758576127586134ef565b60200260200101511561045e57826001600160a01b0316638cabe05a6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156127a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c79190613699565b8160a00181905250826001600160a01b031663a7f93ebd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561280d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283191906135a4565b816080018181525050826001600160a01b03166394a53d416040518163ffffffff1660e01b8152600401602060405180830381865afa158015612878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289c9190613587565b1515606082015292915050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216631e09d27b60e01b148061045e575061045e8260006001600160e01b0319821663118a575f60e01b148061045e575061045e8260006001600160e01b03198216633f62885160e01b148061045e575061045e8260006307f5828d60e41b6001600160e01b03198316148061045e57506001600160e01b031982166301ffc9a760e01b1461045e565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160008152602001600081526020016000151581526020016060815260200160006001811115612a0257612a02612bf5565b905290565b604051806040016040528060008152602001612a02604080516060810182526000808252602082018190529181019190915290565b6040518060c00160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001811115612a0257612a02612bf5565b6040805160c08101825260008082526060602080840182905283850183905281840183905260808401839052845191820185528282528101829052928301529060a082015290565b80356001600160e01b031981168114612aef57600080fd5b919050565b600060208284031215612b0657600080fd5b61048882612ad7565b6001600160a01b038116811461064457600080fd5b8035612aef81612b0f565b60008060408385031215612b4257600080fd5b8235612b4d81612b0f565b91506020830135612b5d81612b0f565b809150509250929050565b60005b83811015612b83578181015183820152602001612b6b565b50506000910152565b60008151808452612ba4816020860160208601612b68565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015612bea578151151587529582019590820190600101612bcc565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60028110612c2957634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b0316825260006101206020830151612c5960208601826001600160a01b03169052565b506040830151816040860152612c7182860182612b8c565b91505060608301518482036060860152612c8b8282612b8c565b9150506080830151608085015260a083015160a085015260c0830151612cb560c086018215159052565b5060e083015184820360e0860152612ccd8282612bb8565b91505061010080840151612ce382870182612c0b565b5090949350505050565b6020815260006104886020830184612c2d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d3e57612d3e612d00565b604052919050565b60006001600160401b03821115612d5f57612d5f612d00565b5060051b60200190565b600080600060608486031215612d7e57600080fd5b8335612d8981612b0f565b92506020848101356001600160401b03811115612da557600080fd5b8501601f81018713612db657600080fd5b8035612dc9612dc482612d46565b612d16565b81815260059190911b82018301908381019089831115612de857600080fd5b928401925b82841015612e0657833582529284019290840190612ded565b8096505050505050612e1a60408501612b24565b90509250925092565b805182526000602082015160c06020850152612e4260c0850182612b8c565b9050604083015160018060a01b03808216604087015280606086015116606087015250506080830151608085015260a08301516122c960a0860182612c0b565b600081518084526020808501808196508360051b8101915082860160005b85811015612eca578284038952612eb8848351612e23565b98850198935090840190600101612ea0565b5091979650505050505050565b805182526020810151610636602084018280516001600160a01b031682526020808201516001600160601b031690830152604090810151910152565b600081518084526020808501945080840160005b83811015612bea57612f3a878351612ed7565b6080969096019590820190600101612f27565b606081526000612f606060830186612e82565b8281036020840152612f728186612f13565b90508281036040840152612f868185612c2d565b9695505050505050565b600082601f830112612fa157600080fd5b81356020612fb1612dc483612d46565b82815260059290921b84018101918181019086841115612fd057600080fd5b8286015b84811015612ff4578035612fe781612b0f565b8352918301918301612fd4565b509695505050505050565b60006020828403121561301157600080fd5b81356001600160401b0381111561302757600080fd5b61092484828501612f90565b60006020828403121561304557600080fd5b813561048881612b0f565b6020815260006104886020830184612e82565b6020808252825182820181905260009190848201906040850190845b8181101561309d57835115158352928401929184019160010161307f565b50909695505050505050565b600082601f8301126130ba57600080fd5b813560206130ca612dc483612d46565b82815260059290921b840181019181810190868411156130e957600080fd5b8286015b84811015612ff4576130fe81612ad7565b83529183019183016130ed565b60008060006060848603121561312057600080fd5b83356001600160401b038082111561313757600080fd5b61314387838801612f90565b94506020860135915061315582612b0f565b9092506040850135908082111561316b57600080fd5b50613178868287016130a9565b9150509250925092565b600081518084526020808501808196508360051b8101915082860160005b85811015612eca5782840389526131b8848351612c2d565b988501989350908401906001016131a0565b6020815260006104886020830184613182565b801515811461064457600080fd5b60008060006060848603121561320057600080fd5b833561320b81612b0f565b9250602084013561321b816131dd565b915060408401356001600160401b0381111561323657600080fd5b613178868287016130a9565b6020808252825182820181905260009190848201906040850190845b8181101561309d5783516001600160a01b03168352928401929184019160010161325e565b60008060006060848603121561329857600080fd5b83356132a381612b0f565b92506020840135915060408401356132ba81612b0f565b809150509250925092565b60c0815260006132d860c0830186612e23565b6132e56020840186612ed7565b82810360a0840152612f868185612c2d565b6020815260006104886020830184612e23565b6000806000806080858703121561332057600080fd5b843561332b81612b0f565b9350602085013561333b81612b0f565b93969395505050506040820135916060013590565b6060815260006133636060830186612e82565b60208301949094525060400152919050565b600061010082518452602083015181602086015261339582860182612b8c565b9150506040830151151560408501526060830151151560608501526080830151608085015260a08301516122c960a086018280516001600160a01b031682526020808201516001600160601b031690830152604090810151910152565b6080815260006134056080830187613182565b6020838203818501528187518084528284019150828160051b850101838a0160005b8381101561345557601f19878403018552613443838351613375565b94860194925090850190600101613427565b50506040870198909852505050506060909101919091525092915050565b6040815260006134866040830185612c2d565b82810360208401526134988185613375565b95945050505050565b60a0815260006134b460a0830188612e82565b82810360208401526134c68188612f13565b905082810360408401526134da8187612c2d565b60608401959095525050608001529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161352d5761352d613505565b5060010190565b602080825260119082015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b604082015260600190565b8082018082111561045e5761045e613505565b6001600160e01b031991909116815260200190565b60006020828403121561359957600080fd5b8151610488816131dd565b6000602082840312156135b657600080fd5b5051919050565b8181038181111561045e5761045e613505565b6000602082840312156135e257600080fd5b815161048881612b0f565b6000602082840312156135ff57600080fd5b81516001600160401b038082111561361657600080fd5b818401915084601f83011261362a57600080fd5b81518181111561363c5761363c612d00565b61364f601f8201601f1916602001612d16565b915080825285602082850101111561366657600080fd5b613677816020840160208601612b68565b50949350505050565b60ff818116838216019081111561045e5761045e613505565b6000606082840312156136ab57600080fd5b604051606081018181106001600160401b03821117156136cd576136cd612d00565b60405282516136db81612b0f565b815260208301516001600160601b03811681146136f757600080fd5b60208201526040928301519281019290925250919050565b6000806040838503121561372257600080fd5b825161372d81612b0f565b6020939093015192949293505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220dd35e01b3d5bb322459da51c840dca65e2930280789ce6b05a632718b33e491864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 196,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3595,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_numAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3598,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3600,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "registerer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2648,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_ercInterfaceIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes4)dyn_storage"
      },
      {
        "astId": 5626,
        "contract": "src/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_interfaceIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes4)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}