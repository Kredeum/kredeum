{
  "address": "0x471a2F4e4DDf948aA1BDeecCA382e12D33899FBC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "checkErcInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "ercInterfacesChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "erc",
          "type": "bool"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNFTsResolverCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNFTsResolverCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "name": "setRegisterer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64ba3676c66f72b5ad3d7719492fb12b95e236e078f6ecdb6cfdf6419af8d2e7",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x471a2F4e4DDf948aA1BDeecCA382e12D33899FBC",
    "transactionIndex": 22,
    "gasUsed": "1895712",
    "logsBloom": "0x
    "blockHash": "0x2a658483c86a02fa8e4ab89b0a0ab8da087d18e14d749bba583c19e008ffe9ce",
    "transactionHash": "0x64ba3676c66f72b5ad3d7719492fb12b95e236e078f6ecdb6cfdf6419af8d2e7",
    "logs": [],
    "blockNumber": 7457530,
    "cumulativeGasUsed": "5710496",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 24,
  "solcInputHash": "a23f51798f773656648d21a004e0df4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"checkErcInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"ercInterfacesChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"erc\",\"type\":\"bool\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNFTsResolverCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNFTsResolverCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"name\":\"setRegisterer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/NFTsResolver.sol\":\"NFTsResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x81871e2ef1c2b73b0de3701981d67e65b9b3f0c9c0f9b203b6efdf5cc0d46c3b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    /// _ercInterfaceIds : ERC interfacesIds\\n    /// 0xffffffff :  O Invalid\\n    /// 0x01ffc9a7 :  1 ERC165\\n    /// 0x80ac58cd :  2 ERC721\\n    /// 0x5b5e139f :  3 ERC721Metadata\\n    /// 0x780e9d63 :  4 ERC721Enumerable\\n    /// 0x150b7a02 :  5 ERC721TokenReceiver\\n    /// 0xd9b67a26 :  6 ERC1155\\n    /// 0x0e89341c :  7 ERC1155MetadataURI\\n    /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n    /// 0x7f5828d0 :  9 ERC173\\n    /// 0x2a55205a : 10 ERC2981\\n    bytes4[] private _ercInterfaceIds = [\\n        bytes4(0xffffffff),\\n        bytes4(0x01ffc9a7),\\n        bytes4(0x80ac58cd),\\n        bytes4(0x5b5e139f),\\n        bytes4(0x780e9d63),\\n        bytes4(0x150b7a02),\\n        bytes4(0xd9b67a26),\\n        bytes4(0x0e89341c),\\n        bytes4(0x4e2312e0),\\n        bytes4(0x7f5828d0),\\n        bytes4(0x2a55205a)\\n    ];\\n\\n    function isCollection(address collection) public view override(IOpenChecker) returns (bool) {\\n        bool[] memory checks = checkErcInterfaces(collection);\\n\\n        return !checks[0] && checks[1] && (checks[2] || checks[6]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function checkErcInterfaces(address smartcontract)\\n        public\\n        view\\n        override(IOpenChecker)\\n        returns (bool[] memory ercInterfacesChecks)\\n    {\\n        ercInterfacesChecks = checkSupportedInterfaces(smartcontract, true, new bytes4[](0));\\n    }\\n\\n    function checkSupportedInterfaces(\\n        address smartcontract,\\n        bool erc,\\n        bytes4[] memory interfaceIds\\n    ) public view override(IOpenChecker) returns (bool[] memory interfaceIdsChecks) {\\n        uint256 i;\\n        uint256 len = (erc ? _ercInterfaceIds.length : 0) + interfaceIds.length;\\n\\n        interfaceIdsChecks = new bool[](len);\\n\\n        if (erc) {\\n            for (uint256 j = 0; j < _ercInterfaceIds.length; j++) {\\n                interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(_ercInterfaceIds[j]);\\n            }\\n        }\\n        for (uint256 k = 0; k < interfaceIds.length; k++) {\\n            interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(interfaceIds[k]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1ab7728042567e59df1e79aafcff29a9f0fbf31ad00503a7623fe5e5f718125b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenChecker\\n//        |\\n//  OpenGetter \\u2014\\u2014 IOpenGetter\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenGetter is IOpenGetter, OpenChecker {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenChecker) returns (bool) {\\n        return interfaceId == type(IOpenGetter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionInfos(address collection)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (CollectionInfos memory collectionInfos)\\n    {\\n        collectionInfos = _getCollectionInfos(collection, msg.sender, new bytes4[](0));\\n    }\\n\\n    function _getCollectionInfos(\\n        address collection,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (CollectionInfos memory collectionInfos) {\\n        require(collection.code.length != 0, \\\"Not smartcontract\\\");\\n\\n        bool[] memory supported = checkSupportedInterfaces(collection, true, interfaceIds);\\n        collectionInfos.supported = supported;\\n\\n        // ERC165 must be supported\\n        require(!supported[0] && supported[1], \\\"Not ERC165\\\");\\n\\n        // ERC721 or ERC1155 must be supported\\n        require(supported[2] || supported[6], \\\"Not NFT smartcontract\\\");\\n\\n        collectionInfos.collection = collection;\\n\\n        // IF ERC173 supported\\n        if (supported[9]) {\\n            collectionInfos.owner = IERC173(collection).owner();\\n        }\\n\\n        // IF ERC721 supported\\n        if (supported[2]) {\\n            // IF ERC721Metadata supported\\n            if (supported[3]) {\\n                collectionInfos.name = IERC721Metadata(collection).name();\\n                collectionInfos.symbol = IERC721Metadata(collection).symbol();\\n            }\\n\\n            // IF ERC721Enumerable supported\\n            if (supported[4]) {\\n                collectionInfos.totalSupply = IERC721Enumerable(collection).totalSupply();\\n            }\\n\\n            if (account != address(0)) {\\n                collectionInfos.balanceOf = IERC721(collection).balanceOf(account);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa84822709938e0dc338bd4964dc60429d094bc73f7b309fb25212c14135dd44\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenRegistry \\u2014\\u2014 IOpenRegistry\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\\\";\\nimport \\\"forge-std/console.sol\\\";\\n\\nabstract contract OpenRegistry is IOpenRegistry, OpenERC173 {\\n    mapping(address => uint256) private _numAddress;\\n    address[] private _addresses;\\n    address private _registerer;\\n\\n    /// @notice onlyRegisterer, by default owner is registerer and can add addresses, can be overriden\\n    modifier onlyRegisterer() virtual {\\n        require(msg.sender == owner() || msg.sender == _registerer, \\\"Not registerer\\\");\\n        _;\\n    }\\n\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address) virtual {\\n        _;\\n    }\\n\\n    function setRegisterer(address registerer_) external override(IOpenRegistry) onlyOwner {\\n        _registerer = registerer_;\\n    }\\n\\n    function addAddresses(address[] memory addrs) external override(IOpenRegistry) {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            _addAddress(addrs[i]);\\n        }\\n    }\\n\\n    function addAddress(address addr) external override(IOpenRegistry) {\\n        _addAddress(addr);\\n    }\\n\\n    function removeAddress(address addr) external override(IOpenRegistry) {\\n        _removeAddress(addr);\\n    }\\n\\n    function countAddresses() external view override(IOpenRegistry) returns (uint256) {\\n        return _addresses.length;\\n    }\\n\\n    function isRegistered(address addr) public view returns (bool) {\\n        return _numAddress[addr] >= 1;\\n    }\\n\\n    function getAddresses() public view override(IOpenRegistry) returns (address[] memory) {\\n        return _addresses;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenRegistry).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _addAddress(address addr) private onlyRegisterer onlyValid(addr) {\\n        if (!isRegistered(addr)) {\\n            _addresses.push(addr);\\n            _numAddress[addr] = _addresses.length;\\n        }\\n    }\\n\\n    function _removeAddress(address addr) private onlyRegisterer {\\n        require(isRegistered(addr), \\\"Not registered\\\");\\n\\n        uint256 num = _numAddress[addr];\\n        if (num != _addresses.length) {\\n            address addrLast = _addresses[_addresses.length - 1];\\n            _addresses[num - 1] = addrLast;\\n            _numAddress[addrLast] = num;\\n        }\\n\\n        delete (_numAddress[addr]);\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3598db86100f90523e19c5f021540b5b2d1c4ebef9f77b27e73357ce83606a98\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |              |\\n//   OpenChecker     OpenERC173\\n//        |              |\\n//    OpenGetter    OpenRegistry\\n//        |              |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenResolver \\u2014\\u2014 IOpenResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\\\";\\n\\nabstract contract OpenResolver is IOpenResolver, OpenRegistry, OpenGetter {\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address addr) override(OpenRegistry) {\\n        require(isCollection(addr), \\\"Not Collection\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenRegistry, OpenGetter)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) public view override(IOpenResolver) returns (CollectionInfos[] memory collectionsInfos) {\\n        collectionsInfos = new CollectionInfos[](collections.length);\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            collectionsInfos[i] = _getCollectionInfos(collections[i], account, interfaceIds);\\n        }\\n    }\\n\\n    function _getCollectionsInfos(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, interfaceIds);\\n\\n        uint256 len;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) len++;\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](len);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account)\\n                collectionsInfos[j++] = collectionsInfosAll[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0930efb779586fd1834c362247cb37b2a4827c767a288564c9678cb4f10b4515\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155 {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9eab118d391a2e33e6cb8b4bfc66036a234dd8440f7835439e7383f24f7e146d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155METADATAURI.sol)\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155MetadataURI {\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x700fed5a217b4de5451650010fba8b418d7eaba14b1ba972b9832a6f9e45f8ed\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155TokenReceiver.sol)\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155TokenReceiver {\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external returns (bytes4);\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x954e6550df028d8ef8d217bb5aa0705ec2c09effdbd6bdcc48bcbf031938160b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x713ae97b817d1538f7bd64cf91f5e80cb841ebc296d0e1b3a85ebb10c221bd3f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xfc768e62494276e5b66e370450ffd3f49e2fe59ff574110358b053187b48e2d1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfc39c64f036a9b3fce06ec1cf98922667a256b7c4cc190a9cdd63ec71566321a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Events {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x3b5a8abec7e4e26b63335ddf6c74facfad639ffa72093567d41cb24dfc6f67c1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Infos {\\n    struct CollectionInfos {\\n        address collection;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        uint256 balanceOf;\\n        bool[] supported;\\n    }\\n}\\n\",\"keccak256\":\"0xdbfd903459d097e673eda0d6494b1fbad83e0fc4f0545f9feee450b8bf03d98f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenChecker {\\n    function checkErcInterfaces(address smartcontract) external view returns (bool[] memory interfaceIdsChecks);\\n\\n    function checkSupportedInterfaces(\\n        address smartcontract,\\n        bool erc,\\n        bytes4[] memory interfaceIds\\n    ) external view returns (bool[] memory interfaceIdsChecks);\\n\\n    function isCollection(address collection) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1b16e6b28d13502e4ec9909e49e7ad5e5b85151e499e2360c9f5d6f56cb72ed5\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60960fce3f83de59f194ea6c52cf1328df07f00bb26ef5e8046de87d1b07e69f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\n\\ninterface IOpenGetter is IERC721Infos {\\n    function getCollectionInfos(address collection) external view returns (CollectionInfos memory collectionInfos);\\n}\\n\",\"keccak256\":\"0xdbea61cb018ff8f659a0b4434ebb2dd164d7f326f136d23037349a9a17e1e050\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(uint256 tokenID, uint256 price, address payer, address payee);\\n\\n    receive() external payable;\\n\\n    function defaultPrice() external returns (uint256 defPrice);\\n\\n    function tokenPrice(uint256 tokenID) external returns (uint256 price);\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x61d50af2bdb355384e1219561bc0d583d2422d2d757bcf39ca21408084d44b6d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function withdraw(address token) external;\\n}\\n\",\"keccak256\":\"0xd6db9618029d25ceb6fe3d8d2fa5823502c336b25316f148b912c3f716a67a53\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenRegistry {\\n    function setRegisterer(address registerer) external;\\n\\n    function removeAddress(address addr) external;\\n\\n    function addAddress(address addr) external;\\n\\n    function addAddresses(address[] memory addrs) external;\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function countAddresses() external view returns (uint256);\\n\\n    function isRegistered(address addr) external view returns (bool registered);\\n}\\n\",\"keccak256\":\"0x2867fcb0e64d079c58c51489714ee2e9ff1d0b058c1bd0cb58dad1a0f079b6b5\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\n\\ninterface IOpenResolver is IERC721Infos {\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) external view returns (CollectionInfos[] memory collectionsInfos);\\n}\\n\",\"keccak256\":\"0x583d36d1d26947f7f2be3011aa496bc6e862a07559487e4ff207cb0196dc55dd\",\"license\":\"MIT\"},\"contracts/interfaces/IAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Events.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nimport \\\"./ICloneFactory.sol\\\";\\nimport \\\"./ICloneFactoryV2.sol\\\";\\nimport \\\"./INFTsFactory.sol\\\";\\nimport \\\"./INFTsFactoryV2.sol\\\";\\nimport \\\"./INFTsFactoryV3.sol\\\";\\n\\nimport \\\"./IOpenNFTsV0.sol\\\";\\nimport \\\"./IOpenNFTsV1.sol\\\";\\nimport \\\"./IOpenNFTsV2.sol\\\";\\nimport \\\"./IOpenNFTsV3.sol\\\";\\nimport \\\"./IOpenNFTsV4.sol\\\";\\nimport \\\"./IOpenBound.sol\\\";\\n\",\"keccak256\":\"0x03d36bf8f6eb32e46406278372837220a4b68fce033583fbaa1befaad9adbc0c\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactory {\\n    function addImplementation(address implementation_) external;\\n\\n    function setDefaultTemplate(address defaultTemplate_) external;\\n\\n    function setContractProbe(address contractProbe_) external;\\n\\n    function template() external view returns (address template_);\\n\\n    function implementations(uint256 index) external view returns (address implementation_);\\n\\n    function implementationsCount() external view returns (uint256 implementationsCount_);\\n}\\n\",\"keccak256\":\"0x1e8aa9d32ce6e91ad12269195265637a48bf6608011f878b31acb13f7228d7a8\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    /// @notice New Implementation Event\\n    /// @param implementation Address of the implementation\\n    /// @param creator Address of the creator\\n    /// @return index Index inside implementations array (starts at 0)\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 index);\\n\\n    /// @notice Set Template Event\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    event TemplateSet(string indexed templateName, address indexed template);\\n\\n    /// @notice Set Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    /// @notice Add Implementation\\n    /// @param implementationToAdd Addresses of implementations to add\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n\\n    /// @notice Get Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templates(string calldata templateName) external view returns (address template);\\n\\n    /// @notice Count Implementations\\n    /// @return count Number of implementations\\n    function implementationsCount() external view returns (uint256 count);\\n\\n    /// @notice Get Implementation from Implementations array\\n    /// @param index Index of implementation\\n    /// @return implementation Address of implementation\\n    function implementations(uint256 index) external view returns (address implementation);\\n}\\n\",\"keccak256\":\"0x35d10451fed638bd375b4b1c5ce204672a60bc88c02e2e05bddd1a390fd24dba\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactory {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function withdrawEther() external;\\n\\n    function clone(string memory name, string memory symbol) external returns (address clone_);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory nftDatas_);\\n\\n    function balanceOf(address nft, address owner) external view returns (NftData memory nftData_);\\n}\\n\",\"keccak256\":\"0x46e466f2a11b8c8379abb6b32c4aabe5695d09c2c2c610078af3709c483b5e0a\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n}\\n\",\"keccak256\":\"0x47eb8674dd1aca360ae359cfe5352c5d668743c8facb8f014fa86163e8f4b222\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV3 {\\n    event Clone(string indexed templateName, address indexed clone, string indexed name, string symbol, bool[] options);\\n\\n    event SetResolver(address indexed resolver);\\n\\n    event SetTemplate(string indexed templateName, address indexed template, uint256 index);\\n\\n    function setResolver(address resolver) external;\\n\\n    function setTemplate(string memory templateName, address template) external;\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function template(string memory templateName) external view returns (address);\\n\\n    function templates(uint256 num) external view returns (address);\\n\\n    function countTemplates() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5177191d432e202c24874cf7fa2db72e8373c299a0b42b88765a0b2aa6e8a151\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\n\\ninterface INFTsResolver is IERC721Infos {\\n    function initialize(address owner) external;\\n\\n    function getNFTsResolverCollectionsInfos(address account)\\n        external\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos);\\n\\n    function getNFTsResolverCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos);\\n}\\n\",\"keccak256\":\"0x35217f97f37ce420b13d10ee052da5d17967538530cc2ca0194023aea5e700fd\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32589afb6590b5214f04bba67d1ee4b5dba7b83261504067789e2b278fb5f395\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV0 {\\n    function addUser(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xe409f8641290b1e34b3e748b1b83fb35e9a061302332353a8d096d8d20fa8fbe\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV1 {\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xc2298aa6c7becd112e6af3a96913fbfda48ff6fffe8ae938b25070e2e3d1a208\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID_);\\n\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x80f5c8bb99040e627368daefd93db5e81fd7c9847121abebe99413136c54bfa2\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n\\n    function open() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9aad4d4b8e93a3fa770afe4d158fa3dd78ba714c964192918c49e3225e3eea28\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 defaultPrice,\\n        address receiver,\\n        uint96 fee,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function parent() external view returns (address);\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e43e18f3338f0e49664e6cff3dd76476c1a9437fdb8fc72506212931dbce5e6\",\"license\":\"MIT\"},\"contracts/next/NFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//    OpenERC165\\n//        |\\n//  OpenResolver\\n//        |\\n//  NFTsResolver \\u2014\\u2014 INFTsResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\\\";\\nimport \\\"../interfaces/INFTsResolver.sol\\\";\\nimport \\\"../interfaces/IAll.sol\\\";\\n\\ncontract NFTsResolver is INFTsResolver, OpenResolver {\\n    bytes4[] private _interfaceIds = new bytes4[](11);\\n\\n    function initialize(address owner_) external override(INFTsResolver) {\\n        OpenERC173._initialize(owner_);\\n\\n        uint256 i;\\n\\n        _interfaceIds[i++] = type(IOpenNFTs).interfaceId;\\n        _interfaceIds[i++] = type(IOpenChecker).interfaceId;\\n        _interfaceIds[i++] = type(IOpenCloneable).interfaceId;\\n        _interfaceIds[i++] = type(IOpenMarketable).interfaceId;\\n        _interfaceIds[i++] = type(IOpenPauseable).interfaceId;\\n\\n        _interfaceIds[i++] = type(IOpenNFTsV0).interfaceId;\\n        _interfaceIds[i++] = type(IOpenNFTsV1).interfaceId;\\n        _interfaceIds[i++] = type(IOpenNFTsV2).interfaceId;\\n        _interfaceIds[i++] = type(IOpenNFTsV3).interfaceId;\\n        _interfaceIds[i++] = type(IOpenNFTsV4).interfaceId;\\n        _interfaceIds[i++] = type(IOpenBound).interfaceId;\\n    }\\n\\n    function getNFTsResolverCollectionInfos(address collection, address account)\\n        external\\n        view\\n        override(INFTsResolver)\\n        returns (CollectionInfos memory collectionInfos)\\n    {\\n        collectionInfos = _getCollectionInfos(collection, account, _interfaceIds);\\n    }\\n\\n    function getNFTsResolverCollectionsInfos(address account)\\n        external\\n        view\\n        override(INFTsResolver)\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        collectionsInfos = _getCollectionsInfos(account, _interfaceIds);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenResolver) returns (bool) {\\n        return interfaceId == type(INFTsResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa6f7eb3bba884923132783eebe5c2d5b3dde4abf35249bac8e88debe09da7b45\",\"license\":\"MIT\"},\"forge-std/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040526001600160e01b031960809081526301ffc9a760e01b60a0526380ac58cd60e01b60c052635b5e139f60e01b60e05263780e9d6360e01b61010052630a85bd0160e11b61012052636cdb3d1360e11b610140526303a24d0760e21b61016052630271189760e51b610180526307f5828d60e41b6101a05263152a902d60e11b6101c0526200009890600490600b620000e2565b5060408051600b808252610180820190925290602082016101608036833750508151620000cd926005925060200190620000e2565b50348015620000db57600080fd5b50620001ac565b82805482825590600052602060002090600701600890048101928215620001835791602002820160005b838211156200014f57835183826101000a81548163ffffffff021916908360e01c021790555092602001926004016020816003010492830192600103026200010c565b8015620001815782816101000a81549063ffffffff02191690556004016020816003010492830192600103026200014f565b505b506200019192915062000195565b5090565b5b8082111562000191576000815560010162000196565b611f4f80620001bc6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635fa15ebb116100a2578063a39fac1211610071578063a39fac1214610266578063c3c5a5471461027b578063c4d66de8146102a9578063ec530de6146102bc578063f2fde38b146102cd57600080fd5b80635fa15ebb14610204578063690682a4146102175780637600c24c1461022a5780638da5cb5b1461023d57600080fd5b8063490f06eb116100e9578063490f06eb1461018b5780634ba79dfe146101ab57806350da677b146101be578063570cd8aa146101de5780635ee9a1d2146101f157600080fd5b806301ffc9a71461011b57806314e8b079146101435780633628731c1461016357806338eada1c14610178575b600080fd5b61012e6101293660046118d1565b6102e0565b60405190151581526020015b60405180910390f35b610156610151366004611901565b61030b565b60405161013a9190611a58565b610176610171366004611b4a565b6103a2565b005b610176610186366004611b87565b6103e6565b61019e610199366004611b87565b6103f2565b60405161013a9190611ba4565b6101766101b9366004611b87565b61042b565b6101d16101cc366004611c19565b610434565b60405161013a9190611c91565b6101d16101ec366004611b87565b6104f4565b6101766101ff366004611b87565b61057d565b61012e610212366004611b87565b6105ef565b61019e610225366004611d01565b610686565b610156610238366004611b87565b6108fd565b60005461010090046001600160a01b03166040516001600160a01b03909116815260200161013a565b61026e610921565b60405161013a9190611d59565b61012e610289366004611b87565b6001600160a01b0316600090815260016020819052604090912054101590565b6101766102b7366004611b87565b610983565b60025460405190815260200161013a565b6101766102db366004611b87565b610d4e565b60006001600160e01b03198216638732053b60e01b1480610305575061030582610da2565b92915050565b610313611865565b61039b8383600580548060200260200160405190810160405280929190818152602001828054801561039157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103535790505b5050505050610dc7565b9392505050565b60005b81518110156103e2576103d08282815181106103c3576103c3611da6565b602002602001015161123e565b806103da81611dd2565b9150506103a5565b5050565b6103ef8161123e565b50565b60606103058260016000604051908082528060200260200182016040528015610425578160200160208202803683370190505b50610686565b6103ef81611380565b6060835167ffffffffffffffff81111561045057610450611a6b565b60405190808252806020026020018201604052801561048957816020015b610476611865565b81526020019060019003908161046e5790505b50905060005b84518110156104ec576104bc8582815181106104ad576104ad611da6565b60200260200101518585610dc7565b8282815181106104ce576104ce611da6565b602002602001018190525080806104e490611dd2565b91505061048f565b509392505050565b606061030582600580548060200260200160405190810160405280929190818152602001828054801561057357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105355790505b5050505050611558565b60005461010090046001600160a01b031633146105cd5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806105fb836103f2565b90508060008151811061061057610610611da6565b602002602001015115801561063c57508060018151811061063357610633611da6565b60200260200101515b801561039b57508060028151811061065657610656611da6565b60200260200101518061039b57508060068151811061067757610677611da6565b60200260200101519392505050565b606060008083518561069957600061069d565b6004545b6106a79190611ded565b90508067ffffffffffffffff8111156106c2576106c2611a6b565b6040519080825280602002602001820160405280156106eb578160200160208202803683370190505b50925084156108035760005b60045481101561080157866001600160a01b03166301ffc9a76004838154811061072357610723611da6565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b815260040161077291906001600160e01b031991909116815260200190565b60206040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c29190611e05565b84846107cd81611dd2565b9550815181106107df576107df611da6565b91151560209283029190910190910152806107f981611dd2565b9150506106f7565b505b60005b84518110156108f357866001600160a01b03166301ffc9a786838151811061083057610830611da6565b60200260200101516040518263ffffffff1660e01b815260040161086491906001600160e01b031991909116815260200190565b60206040518083038186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b49190611e05565b84846108bf81611dd2565b9550815181106108d1576108d1611da6565b91151560209283029190910190910152806108eb81611dd2565b915050610806565b5050509392505050565b610905611865565b6040805160008152602081019091526103059083903390610dc7565b6060600280548060200260200160405190810160405280929190818152602001828054801561097957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161095b575b5050505050905090565b61098c8161171e565b6000630c38761960e41b6005826109a281611dd2565b9350815481106109b4576109b4611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550631fea36bd60e21b600582806109f990611dd2565b935081548110610a0b57610a0b611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550632e5e69fd60e01b60058280610a5090611dd2565b935081548110610a6257610a62611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550638351879960e01b60058280610aa790611dd2565b935081548110610ab957610ab9611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506398396bd360e01b60058280610afe90611dd2565b935081548110610b1057610b10611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550634b68d43160e01b60058280610b5590611dd2565b935081548110610b6757610b67611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550633ab2af8560e21b60058280610bac90611dd2565b935081548110610bbe57610bbe611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550636ca50ed960e11b60058280610c0390611dd2565b935081548110610c1557610c15611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550635f5f00ef60e01b60058280610c5a90611dd2565b935081548110610c6c57610c6c611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506330323f1960e01b60058280610cb190611dd2565b935081548110610cc357610cc3611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506317812f2360e11b60058280610d0890611dd2565b935081548110610d1a57610d1a611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505050565b60005461010090046001600160a01b03163314610d995760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016105c4565b6103ef81611777565b60006001600160e01b031982166350da677b60e01b14806103055750610305826117d0565b610dcf611865565b6001600160a01b0384163b610e1a5760405162461bcd60e51b8152602060048201526011602482015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b60448201526064016105c4565b6000610e2885600185610686565b9050808260c0018190525080600081518110610e4657610e46611da6565b6020026020010151158015610e72575080600181518110610e6957610e69611da6565b60200260200101515b610eab5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b60448201526064016105c4565b80600281518110610ebe57610ebe611da6565b602002602001015180610ee8575080600681518110610edf57610edf611da6565b60200260200101515b610f2c5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b60448201526064016105c4565b6001600160a01b0385168252805181906009908110610f4d57610f4d611da6565b602002602001015115610fda57846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9357600080fd5b505afa158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb9190611e22565b6001600160a01b031660208301525b80600281518110610fed57610fed611da6565b6020026020010151156104ec578060038151811061100d5761100d611da6565b60200260200101511561111257846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108f9190810190611e3f565b8260400181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110d057600080fd5b505afa1580156110e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261110c9190810190611e3f565b60608301525b8060048151811061112557611125611da6565b6020026020010151156111a957846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a39190611ed3565b60808301525b6001600160a01b038416156104ec576040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190611ed3565b60a0830152509392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061127857506003546001600160a01b031633145b6112b55760405162461bcd60e51b815260206004820152600e60248201526d2737ba103932b3b4b9ba32b932b960911b60448201526064016105c4565b806112bf816105ef565b6112fc5760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b60448201526064016105c4565b6001600160a01b03821660009081526001602081905260409091205410156103e2575060028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b0394909416938417905590546000928352602091909152604090912055565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b031614806113ba57506003546001600160a01b031633145b6113f75760405162461bcd60e51b815260206004820152600e60248201526d2737ba103932b3b4b9ba32b932b960911b60448201526064016105c4565b6001600160a01b03811660009081526001602081905260409091205410156114525760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b60448201526064016105c4565b6001600160a01b038116600090815260016020526040902054600254811461150857600280546000919061148890600190611eec565b8154811061149857611498611da6565b6000918252602090912001546001600160a01b031690508060026114bd600185611eec565b815481106114cd576114cd611da6565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b038216600090815260016020526040812055600280548061153257611532611f03565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6060600061156e611567610921565b8585610434565b90506000805b82518110156115fc57600083828151811061159157611591611da6565b602002602001015160a0015111806115d75750856001600160a01b03168382815181106115c0576115c0611da6565b6020026020010151602001516001600160a01b0316145b156115ea57816115e681611dd2565b9250505b806115f481611dd2565b915050611574565b508067ffffffffffffffff81111561161657611616611a6b565b60405190808252806020026020018201604052801561164f57816020015b61163c611865565b8152602001906001900390816116345790505b5092506000805b835181101561171457600084828151811061167357611673611da6565b602002602001015160a0015111806116b95750866001600160a01b03168482815181106116a2576116a2611da6565b6020026020010151602001516001600160a01b0316145b15611702578381815181106116d0576116d0611da6565b60200260200101518583806116e490611dd2565b9450815181106116f6576116f6611da6565b60200260200101819052505b8061170c81611dd2565b915050611656565b5050505092915050565b60005460ff16156117655760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b60448201526064016105c4565b6000805460ff191660011790556103ef815b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216631d80309360e21b148061030557506103058260006001600160e01b03198216631fea36bd60e21b148061030557506103058260006001600160e01b03198216639785919f60e01b148061030557506103058260006307f5828d60e41b6001600160e01b03198316148061030557506001600160e01b031982166301ffc9a760e01b14610305565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001606081525090565b80356001600160e01b0319811681146118cc57600080fd5b919050565b6000602082840312156118e357600080fd5b61039b826118b4565b6001600160a01b03811681146103ef57600080fd5b6000806040838503121561191457600080fd5b823561191f816118ec565b9150602083013561192f816118ec565b809150509250929050565b60005b8381101561195557818101518382015260200161193d565b83811115611964576000848401525b50505050565b6000815180845261198281602086016020860161193a565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156119c85781511515875295820195908201906001016119aa565b509495945050505050565b600060018060a01b0380835116845280602084015116602085015250604082015160e06040850152611a0860e085018261196a565b905060608301518482036060860152611a21828261196a565b9150506080830151608085015260a083015160a085015260c083015184820360c0860152611a4f8282611996565b95945050505050565b60208152600061039b60208301846119d3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aaa57611aaa611a6b565b604052919050565b600067ffffffffffffffff821115611acc57611acc611a6b565b5060051b60200190565b600082601f830112611ae757600080fd5b81356020611afc611af783611ab2565b611a81565b82815260059290921b84018101918181019086841115611b1b57600080fd5b8286015b84811015611b3f578035611b32816118ec565b8352918301918301611b1f565b509695505050505050565b600060208284031215611b5c57600080fd5b813567ffffffffffffffff811115611b7357600080fd5b611b7f84828501611ad6565b949350505050565b600060208284031215611b9957600080fd5b813561039b816118ec565b60208152600061039b6020830184611996565b600082601f830112611bc857600080fd5b81356020611bd8611af783611ab2565b82815260059290921b84018101918181019086841115611bf757600080fd5b8286015b84811015611b3f57611c0c816118b4565b8352918301918301611bfb565b600080600060608486031215611c2e57600080fd5b833567ffffffffffffffff80821115611c4657600080fd5b611c5287838801611ad6565b945060208601359150611c64826118ec565b90925060408501359080821115611c7a57600080fd5b50611c8786828701611bb7565b9150509250925092565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611ce657603f19888603018452611cd48583516119d3565b94509285019290850190600101611cb8565b5092979650505050505050565b80151581146103ef57600080fd5b600080600060608486031215611d1657600080fd5b8335611d21816118ec565b92506020840135611d3181611cf3565b9150604084013567ffffffffffffffff811115611d4d57600080fd5b611c8786828701611bb7565b6020808252825182820181905260009190848201906040850190845b81811015611d9a5783516001600160a01b031683529284019291840191600101611d75565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611de657611de6611dbc565b5060010190565b60008219821115611e0057611e00611dbc565b500190565b600060208284031215611e1757600080fd5b815161039b81611cf3565b600060208284031215611e3457600080fd5b815161039b816118ec565b600060208284031215611e5157600080fd5b815167ffffffffffffffff80821115611e6957600080fd5b818401915084601f830112611e7d57600080fd5b815181811115611e8f57611e8f611a6b565b611ea2601f8201601f1916602001611a81565b9150808252856020828501011115611eb957600080fd5b611eca81602084016020860161193a565b50949350505050565b600060208284031215611ee557600080fd5b5051919050565b600082821015611efe57611efe611dbc565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c4427561da5fefd4d7fc6ee9815d70059646d8f3abaa5db51caad2c052b8daac64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80635fa15ebb116100a2578063a39fac1211610071578063a39fac1214610266578063c3c5a5471461027b578063c4d66de8146102a9578063ec530de6146102bc578063f2fde38b146102cd57600080fd5b80635fa15ebb14610204578063690682a4146102175780637600c24c1461022a5780638da5cb5b1461023d57600080fd5b8063490f06eb116100e9578063490f06eb1461018b5780634ba79dfe146101ab57806350da677b146101be578063570cd8aa146101de5780635ee9a1d2146101f157600080fd5b806301ffc9a71461011b57806314e8b079146101435780633628731c1461016357806338eada1c14610178575b600080fd5b61012e6101293660046118d1565b6102e0565b60405190151581526020015b60405180910390f35b610156610151366004611901565b61030b565b60405161013a9190611a58565b610176610171366004611b4a565b6103a2565b005b610176610186366004611b87565b6103e6565b61019e610199366004611b87565b6103f2565b60405161013a9190611ba4565b6101766101b9366004611b87565b61042b565b6101d16101cc366004611c19565b610434565b60405161013a9190611c91565b6101d16101ec366004611b87565b6104f4565b6101766101ff366004611b87565b61057d565b61012e610212366004611b87565b6105ef565b61019e610225366004611d01565b610686565b610156610238366004611b87565b6108fd565b60005461010090046001600160a01b03166040516001600160a01b03909116815260200161013a565b61026e610921565b60405161013a9190611d59565b61012e610289366004611b87565b6001600160a01b0316600090815260016020819052604090912054101590565b6101766102b7366004611b87565b610983565b60025460405190815260200161013a565b6101766102db366004611b87565b610d4e565b60006001600160e01b03198216638732053b60e01b1480610305575061030582610da2565b92915050565b610313611865565b61039b8383600580548060200260200160405190810160405280929190818152602001828054801561039157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116103535790505b5050505050610dc7565b9392505050565b60005b81518110156103e2576103d08282815181106103c3576103c3611da6565b602002602001015161123e565b806103da81611dd2565b9150506103a5565b5050565b6103ef8161123e565b50565b60606103058260016000604051908082528060200260200182016040528015610425578160200160208202803683370190505b50610686565b6103ef81611380565b6060835167ffffffffffffffff81111561045057610450611a6b565b60405190808252806020026020018201604052801561048957816020015b610476611865565b81526020019060019003908161046e5790505b50905060005b84518110156104ec576104bc8582815181106104ad576104ad611da6565b60200260200101518585610dc7565b8282815181106104ce576104ce611da6565b602002602001018190525080806104e490611dd2565b91505061048f565b509392505050565b606061030582600580548060200260200160405190810160405280929190818152602001828054801561057357602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105355790505b5050505050611558565b60005461010090046001600160a01b031633146105cd5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806105fb836103f2565b90508060008151811061061057610610611da6565b602002602001015115801561063c57508060018151811061063357610633611da6565b60200260200101515b801561039b57508060028151811061065657610656611da6565b60200260200101518061039b57508060068151811061067757610677611da6565b60200260200101519392505050565b606060008083518561069957600061069d565b6004545b6106a79190611ded565b90508067ffffffffffffffff8111156106c2576106c2611a6b565b6040519080825280602002602001820160405280156106eb578160200160208202803683370190505b50925084156108035760005b60045481101561080157866001600160a01b03166301ffc9a76004838154811061072357610723611da6565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b815260040161077291906001600160e01b031991909116815260200190565b60206040518083038186803b15801561078a57600080fd5b505afa15801561079e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c29190611e05565b84846107cd81611dd2565b9550815181106107df576107df611da6565b91151560209283029190910190910152806107f981611dd2565b9150506106f7565b505b60005b84518110156108f357866001600160a01b03166301ffc9a786838151811061083057610830611da6565b60200260200101516040518263ffffffff1660e01b815260040161086491906001600160e01b031991909116815260200190565b60206040518083038186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b49190611e05565b84846108bf81611dd2565b9550815181106108d1576108d1611da6565b91151560209283029190910190910152806108eb81611dd2565b915050610806565b5050509392505050565b610905611865565b6040805160008152602081019091526103059083903390610dc7565b6060600280548060200260200160405190810160405280929190818152602001828054801561097957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161095b575b5050505050905090565b61098c8161171e565b6000630c38761960e41b6005826109a281611dd2565b9350815481106109b4576109b4611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550631fea36bd60e21b600582806109f990611dd2565b935081548110610a0b57610a0b611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550632e5e69fd60e01b60058280610a5090611dd2565b935081548110610a6257610a62611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550638351879960e01b60058280610aa790611dd2565b935081548110610ab957610ab9611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506398396bd360e01b60058280610afe90611dd2565b935081548110610b1057610b10611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550634b68d43160e01b60058280610b5590611dd2565b935081548110610b6757610b67611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550633ab2af8560e21b60058280610bac90611dd2565b935081548110610bbe57610bbe611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550636ca50ed960e11b60058280610c0390611dd2565b935081548110610c1557610c15611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550635f5f00ef60e01b60058280610c5a90611dd2565b935081548110610c6c57610c6c611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506330323f1960e01b60058280610cb190611dd2565b935081548110610cc357610cc3611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506317812f2360e11b60058280610d0890611dd2565b935081548110610d1a57610d1a611da6565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505050565b60005461010090046001600160a01b03163314610d995760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016105c4565b6103ef81611777565b60006001600160e01b031982166350da677b60e01b14806103055750610305826117d0565b610dcf611865565b6001600160a01b0384163b610e1a5760405162461bcd60e51b8152602060048201526011602482015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b60448201526064016105c4565b6000610e2885600185610686565b9050808260c0018190525080600081518110610e4657610e46611da6565b6020026020010151158015610e72575080600181518110610e6957610e69611da6565b60200260200101515b610eab5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b60448201526064016105c4565b80600281518110610ebe57610ebe611da6565b602002602001015180610ee8575080600681518110610edf57610edf611da6565b60200260200101515b610f2c5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b60448201526064016105c4565b6001600160a01b0385168252805181906009908110610f4d57610f4d611da6565b602002602001015115610fda57846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9357600080fd5b505afa158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb9190611e22565b6001600160a01b031660208301525b80600281518110610fed57610fed611da6565b6020026020010151156104ec578060038151811061100d5761100d611da6565b60200260200101511561111257846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561105357600080fd5b505afa158015611067573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108f9190810190611e3f565b8260400181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110d057600080fd5b505afa1580156110e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261110c9190810190611e3f565b60608301525b8060048151811061112557611125611da6565b6020026020010151156111a957846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116b57600080fd5b505afa15801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a39190611ed3565b60808301525b6001600160a01b038416156104ec576040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190611ed3565b60a0830152509392505050565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061127857506003546001600160a01b031633145b6112b55760405162461bcd60e51b815260206004820152600e60248201526d2737ba103932b3b4b9ba32b932b960911b60448201526064016105c4565b806112bf816105ef565b6112fc5760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b60448201526064016105c4565b6001600160a01b03821660009081526001602081905260409091205410156103e2575060028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b0394909416938417905590546000928352602091909152604090912055565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b031614806113ba57506003546001600160a01b031633145b6113f75760405162461bcd60e51b815260206004820152600e60248201526d2737ba103932b3b4b9ba32b932b960911b60448201526064016105c4565b6001600160a01b03811660009081526001602081905260409091205410156114525760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b60448201526064016105c4565b6001600160a01b038116600090815260016020526040902054600254811461150857600280546000919061148890600190611eec565b8154811061149857611498611da6565b6000918252602090912001546001600160a01b031690508060026114bd600185611eec565b815481106114cd576114cd611da6565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b038216600090815260016020526040812055600280548061153257611532611f03565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6060600061156e611567610921565b8585610434565b90506000805b82518110156115fc57600083828151811061159157611591611da6565b602002602001015160a0015111806115d75750856001600160a01b03168382815181106115c0576115c0611da6565b6020026020010151602001516001600160a01b0316145b156115ea57816115e681611dd2565b9250505b806115f481611dd2565b915050611574565b508067ffffffffffffffff81111561161657611616611a6b565b60405190808252806020026020018201604052801561164f57816020015b61163c611865565b8152602001906001900390816116345790505b5092506000805b835181101561171457600084828151811061167357611673611da6565b602002602001015160a0015111806116b95750866001600160a01b03168482815181106116a2576116a2611da6565b6020026020010151602001516001600160a01b0316145b15611702578381815181106116d0576116d0611da6565b60200260200101518583806116e490611dd2565b9450815181106116f6576116f6611da6565b60200260200101819052505b8061170c81611dd2565b915050611656565b5050505092915050565b60005460ff16156117655760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b60448201526064016105c4565b6000805460ff191660011790556103ef815b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216631d80309360e21b148061030557506103058260006001600160e01b03198216631fea36bd60e21b148061030557506103058260006001600160e01b03198216639785919f60e01b148061030557506103058260006307f5828d60e41b6001600160e01b03198316148061030557506001600160e01b031982166301ffc9a760e01b14610305565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001606081525090565b80356001600160e01b0319811681146118cc57600080fd5b919050565b6000602082840312156118e357600080fd5b61039b826118b4565b6001600160a01b03811681146103ef57600080fd5b6000806040838503121561191457600080fd5b823561191f816118ec565b9150602083013561192f816118ec565b809150509250929050565b60005b8381101561195557818101518382015260200161193d565b83811115611964576000848401525b50505050565b6000815180845261198281602086016020860161193a565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156119c85781511515875295820195908201906001016119aa565b509495945050505050565b600060018060a01b0380835116845280602084015116602085015250604082015160e06040850152611a0860e085018261196a565b905060608301518482036060860152611a21828261196a565b9150506080830151608085015260a083015160a085015260c083015184820360c0860152611a4f8282611996565b95945050505050565b60208152600061039b60208301846119d3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aaa57611aaa611a6b565b604052919050565b600067ffffffffffffffff821115611acc57611acc611a6b565b5060051b60200190565b600082601f830112611ae757600080fd5b81356020611afc611af783611ab2565b611a81565b82815260059290921b84018101918181019086841115611b1b57600080fd5b8286015b84811015611b3f578035611b32816118ec565b8352918301918301611b1f565b509695505050505050565b600060208284031215611b5c57600080fd5b813567ffffffffffffffff811115611b7357600080fd5b611b7f84828501611ad6565b949350505050565b600060208284031215611b9957600080fd5b813561039b816118ec565b60208152600061039b6020830184611996565b600082601f830112611bc857600080fd5b81356020611bd8611af783611ab2565b82815260059290921b84018101918181019086841115611bf757600080fd5b8286015b84811015611b3f57611c0c816118b4565b8352918301918301611bfb565b600080600060608486031215611c2e57600080fd5b833567ffffffffffffffff80821115611c4657600080fd5b611c5287838801611ad6565b945060208601359150611c64826118ec565b90925060408501359080821115611c7a57600080fd5b50611c8786828701611bb7565b9150509250925092565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611ce657603f19888603018452611cd48583516119d3565b94509285019290850190600101611cb8565b5092979650505050505050565b80151581146103ef57600080fd5b600080600060608486031215611d1657600080fd5b8335611d21816118ec565b92506020840135611d3181611cf3565b9150604084013567ffffffffffffffff811115611d4d57600080fd5b611c8786828701611bb7565b6020808252825182820181905260009190848201906040850190845b81811015611d9a5783516001600160a01b031683529284019291840191600101611d75565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611de657611de6611dbc565b5060010190565b60008219821115611e0057611e00611dbc565b500190565b600060208284031215611e1757600080fd5b815161039b81611cf3565b600060208284031215611e3457600080fd5b815161039b816118ec565b600060208284031215611e5157600080fd5b815167ffffffffffffffff80821115611e6957600080fd5b818401915084601f830112611e7d57600080fd5b815181811115611e8f57611e8f611a6b565b611ea2601f8201601f1916602001611a81565b9150808252856020828501011115611eb957600080fd5b611eca81602084016020860161193a565b50949350505050565b600060208284031215611ee557600080fd5b5051919050565b600082821015611efe57611efe611dbc565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c4427561da5fefd4d7fc6ee9815d70059646d8f3abaa5db51caad2c052b8daac64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6531,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6533,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9127,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_numAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9130,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9132,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_registerer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8728,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_ercInterfaceIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes4)dyn_storage"
      },
      {
        "astId": 19641,
        "contract": "contracts/next/NFTsResolver.sol:NFTsResolver",
        "label": "_interfaceIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes4)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}