{
  "address": "0x6b064c1BAf83C7ABA8412461c83eBfd319019c23",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecker",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getCID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "getMyTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "myTokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x623d438bd61f859296d6729de7b2b51118883432a022bb9801469693977b75dd",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x6b064c1BAf83C7ABA8412461c83eBfd319019c23",
    "transactionIndex": 9,
    "gasUsed": "1891724",
    "logsBloom": "0x
    "blockHash": "0x620918f7be55b6ebb96358857df3ca4a0f181f869ad10f8faee17a094ad10de6",
    "transactionHash": "0x623d438bd61f859296d6729de7b2b51118883432a022bb9801469693977b75dd",
    "logs": [],
    "blockNumber": 7306199,
    "cumulativeGasUsed": "4230403",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "8adcb0a7060b9626bf10f4eca40d8aa4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecker\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getCID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"getMyTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OpenBound smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,string,address,uint256)\":{\"notice\":\"IOpenBound\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165\"},\"tokenURI(uint256)\":{\"notice\":\"IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"IERC721Enumerable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/OpenBound.sol\":\"OpenBound\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenCheckable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCheckable.sol\\\";\\n\\nabstract contract OpenCheckable is OpenERC165, IOpenCheckable {\\n    function checkSupportedInterfaces(bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (bool[] memory interfaceIdsChecker)\\n    {\\n        interfaceIdsChecker = new bool[](interfaceIds.length);\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            interfaceIdsChecker[i] = supportsInterface(interfaceIds[i]);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCheckable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfc766c770ded2caf5513898b19e435ee6d698814936d6bfd483e154692376eab\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool private _once;\\n    string private _template;\\n    uint256 private _version;\\n\\n    function getTemplate() external view override (IOpenCloneable) returns (string memory) {\\n        return _template;\\n    }\\n\\n    function getVersion() external view override (IOpenCloneable) returns (uint256) {\\n        return _version;\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(_once == false, \\\"Only once!\\\");\\n        _once = true;\\n\\n        _template = template_;\\n        _version = version_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd325e0c93c985eee87c37194a80e6987046350babd7468c42580a8501b829b49\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0x2264549ce317a09ca3f53739bd775315953258c91f88c7f693dc3ca007ef9184\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC721 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC721) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _setOwner(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6cdeec5fcbaddb3b50fe43202bf3581da5c1e8a68d1dbec69ef37182a025b737\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//               OpenCheckable\\n//                     |\\n//                OpenERC721\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenCheckable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenCheckable {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    function approve(address spender, uint256 tokenID) external override(IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override(IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override(IERC721) {\\n        safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) public override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenCheckable) returns (bool) {\\n        return\\n            interfaceId == 0x80ac58cd || // = type(IERC721).interfaceId\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override(IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Zero address not valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID) public view override(IERC721) returns (address owner) {\\n        require((owner = _owners[tokenID]) != address(0), \\\"Invalid token ID\\\");\\n    }\\n\\n    function getApproved(uint256 tokenID) public view override(IERC721) returns (address) {\\n        require(_exists(tokenID), \\\"Invalid token ID\\\");\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mintNft(address to, uint256 tokenID) internal {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(!_exists(tokenID), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burnNft(uint256 tokenID) internal {\\n        address owner = ownerOf(tokenID);\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal onlyTokenOwnerOrApproved(tokenID) {\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual;\\n\\n    function _exists(uint256 tokenID) internal view returns (bool) {\\n        return _owners[tokenID] != address(0);\\n    }\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenID);\\n        return (owner == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID) internal view returns (bool) {\\n        return (_isOwnerOrOperator(spender, tokenID) || getApproved(tokenID) == spender);\\n    }\\n\\n    function _isERC721Receiver(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private returns (bool) {\\n        return\\n            to.code.length == 0 ||\\n            IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data) ==\\n            IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x485940ee128bd3802eb26074a7506419454de130120ce359a500df7123c25931\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//                     |\\n//               OpenPauseable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override (IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override (IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x83799c85f8627d4ad626eedcfdb8c1114b769ce211e2f9867498d667e3250449\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa39e9770ae9ec18032ae66aed65dbbc82b733f15a56b8208cfaf69d16ea28bfd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCheckable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCheckable {\\n    function checkSupportedInterfaces(bytes4[] memory interfaceIds) external view returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x8c58b670c8074b66fa7dde616bb8a4ca7d4b7beed26e91b584494a9f7921d829\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function getTemplate() external view returns (string memory);\\n\\n    function getVersion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x152901133233a3b58d7f9391a4c9fe920b899d1b720f473f8b9bc04790fb760d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/libraries/Bafkrey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Bafkrey {\\n    bytes32 private constant _BASE32_SYMBOLS = \\\"abcdefghijklmnopqrstuvwxyz234567\\\";\\n\\n    /// Transfom uint256 to IPFS CID V1 base32 raw (starting with \\\"bafkrei\\\")\\n    function uint256ToCid(uint256 id) internal pure returns (string memory) {\\n        // IPFS CID V1 base32 raw \\\"bafrei...\\\" => 5 bits => uint32\\n        // uint256 id  = 256 bits = 1 bit + 51 uint32 = 1 + 51 * 5 = 256\\n        // 00 added right =>\\n        // uint8 + uint256 + 00 = 258 bits = uint8 + 50 uint32 + (3 bits + 00) = uint8 + 51 uint32 = 3 + 51 * 5 = 258\\n\\n        bytes memory buffer = new bytes(52);\\n        uint8 high3 = uint8(id >> 253);\\n        buffer[0] = _BASE32_SYMBOLS[high3 & 0x1f];\\n\\n        id <<= 2;\\n        for (uint256 i = 51; i > 0; i--) {\\n            buffer[i] = _BASE32_SYMBOLS[id & 0x1f];\\n            id >>= 5;\\n        }\\n\\n        return string(abi.encodePacked(\\\"bafkrei\\\", buffer));\\n    }\\n}\\n\",\"keccak256\":\"0xc2ecc036f6b79a8ab8642fa3a869b20008158d0c6cc13e4829283a5841f53522\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32589afb6590b5214f04bba67d1ee4b5dba7b83261504067789e2b278fb5f395\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/templates/OpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//                         OpenERC165 (supports)\\n//                             |\\n//                             \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//                             |                      |\\n//                         OpenERC721 (NFT)     OpenCloneable\\n//                             |                      |\\n//                             |                      |\\n//                        OpenERC173                  |\\n//                         (Ownable)                  |\\n//                             |                      |\\n//                       OpenPauseable                |\\n//                             |                      |\\n//                             \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//                             |\\n//                         OpenBound --- IOpenBound --- IERC721Enumerable --- IERC721Metadata\\n//\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenCloneable.sol\\\";\\n\\nimport \\\"../interfaces/IOpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenBound.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/libraries/Bafkrey.sol\\\";\\n\\n/// @title OpenBound smartcontract\\ncontract OpenBound is IOpenBound, IERC721Enumerable, IERC721Metadata, OpenCloneable, OpenPauseable {\\n    uint256 public maxSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    mapping(address => uint256) internal _tokenOfOwner;\\n    mapping(address => uint256) internal _tokenIndexOfOwner;\\n    mapping(uint256 => uint256) internal _cidOfToken;\\n    uint256[] internal _tokens;\\n\\n    string private constant _BASE_URI = \\\"ipfs://\\\";\\n\\n    /// IOpenBound\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 maxSupply_\\n    ) public override(IOpenBound) {\\n        OpenCloneable._initialize(\\\"OpenBound\\\", 1);\\n        OpenERC173._initialize(owner_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        maxSupply = maxSupply_;\\n    }\\n\\n    function mint(uint256 cid) external override(IOpenBound) onlyWhenNotPaused returns (uint256 tokenID) {\\n        tokenID = _mint(msg.sender, cid);\\n    }\\n\\n    function claim(uint256 tokenID, uint256 cid) external override(IOpenBound) onlyWhenNotPaused {\\n        require(tokenID == _tokenID(msg.sender, cid), \\\"Not owner\\\");\\n        _mint(msg.sender, cid);\\n    }\\n\\n    function burn(uint256 tokenID) external override(IOpenBound) {\\n        address from = ownerOf(tokenID);\\n        require(from == msg.sender, \\\"Not owner\\\");\\n\\n        _burn(tokenID);\\n    }\\n\\n    function getMyTokenID(uint256 cid) external view override(IOpenBound) returns (uint256 myTokenID) {\\n        myTokenID = _tokenID(msg.sender, cid);\\n    }\\n\\n    function getTokenID(address addr, uint256 cid) external pure override(IOpenBound) returns (uint256 tokenID) {\\n        tokenID = _tokenID(addr, cid);\\n    }\\n\\n    function getCID(uint256 tokenID) external view override(IOpenBound) returns (uint256 cid) {\\n        cid = _cidOfToken[tokenID];\\n    }\\n\\n    /// IERC721Enumerable\\n    function totalSupply() external view override(IERC721Enumerable) returns (uint256 tokensLength) {\\n        tokensLength = _tokens.length;\\n    }\\n\\n    function tokenOfOwnerByIndex(address tokenOwner, uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256 tokenID)\\n    {\\n        require(index == 0 && balanceOf(tokenOwner) == 1, \\\"Invalid index\\\");\\n\\n        tokenID = _tokenOfOwner[tokenOwner];\\n    }\\n\\n    function tokenByIndex(uint256 index) external view override(IERC721Enumerable) returns (uint256 tokenID) {\\n        require(index < _tokens.length, \\\"Invalid index\\\");\\n\\n        tokenID = _tokens[index];\\n    }\\n\\n    /// IERC721Metadata\\n    function tokenURI(uint256 tokenID) external view override(IERC721Metadata) returns (string memory) {\\n        require(_exists(tokenID), \\\"NFT doesn't exists\\\");\\n\\n        return string(abi.encodePacked(_BASE_URI, Bafkrey.uint256ToCid(_cidOfToken[tokenID])));\\n    }\\n\\n    /// IERC165\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenPauseable, OpenCloneable) returns (bool) {\\n        return\\n            interfaceId == type(IOpenNFTs).interfaceId ||\\n            interfaceId == type(IOpenBound).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// internal\\n    function _mintEnumerable(\\n        address to,\\n        uint256 tokenID,\\n        uint256 cid\\n    ) internal {\\n        _tokens.push(tokenID);\\n        _tokenOfOwner[to] = tokenID;\\n        _tokenIndexOfOwner[to] = _tokens.length - 1;\\n        _cidOfToken[tokenID] = cid;\\n    }\\n\\n    function _mint(address to, uint256 cid) internal returns (uint256 tokenID) {\\n        require((maxSupply == 0) || _tokens.length < maxSupply, \\\"Max supply reached\\\");\\n        require(balanceOf(to) == 0, \\\"Already minted or claimed\\\");\\n\\n        tokenID = _tokenID(to, cid);\\n\\n        _mintEnumerable(to, tokenID, cid);\\n        _mintNft(to, tokenID);\\n    }\\n\\n    function _burnEnumerable(uint256 tokenID) internal {\\n        address from = ownerOf(tokenID);\\n        uint256 index = _tokenIndexOfOwner[from];\\n        uint256 lastIndex = _tokens.length - 1;\\n\\n        if (index != lastIndex) {\\n            _tokens[index] = _tokens[lastIndex];\\n            _tokenIndexOfOwner[ownerOf(_tokens[lastIndex])] = index;\\n        }\\n        _tokens.pop();\\n\\n        delete _cidOfToken[tokenID];\\n        delete _tokenIndexOfOwner[from];\\n        delete _tokenOfOwner[from];\\n    }\\n\\n    function _burn(uint256 tokenID) internal {\\n        _burnEnumerable(tokenID);\\n        _burnNft(tokenID);\\n    }\\n\\n    function _tokenID(address addr, uint256 cid) internal pure returns (uint256 tokenID) {\\n        tokenID = uint256(keccak256(abi.encodePacked(cid, addr)));\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 // tokenId\\n    ) internal pure override {\\n        require(from == address(0) || to == address(0), \\\"Non transferable NFT\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x07598a40db20bf5c6f5a0c6ef0bd0777f366895da17f1bb555aafcee34e80b50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612142806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636352211e1161010f578063b88d4fde116100a2578063d5abeb0111610071578063d5abeb011461040b578063e985e9c514610414578063f2fde38b14610450578063f542033f1461046357600080fd5b8063b88d4fde146103ca578063c3490263146103dd578063c4ae3168146103f0578063c87b56dd146103f857600080fd5b8063913a2ffe116100de578063913a2ffe1461037c57806395d89b411461039c578063a0712d68146103a4578063a22cb465146103b757600080fd5b80636352211e146103205780636a0506681461033357806370a08231146103535780638da5cb5b1461036657600080fd5b80632f745c591161018757806342966c681161015657806342966c68146102d55780634f6ccce7146102e85780635615f604146102fb5780635c975abb1461030e57600080fd5b80632f745c5914610294578063321c48f2146102a75780633cc1c7e0146102af57806342842e0e146102c257600080fd5b8063095ea7b3116101c3578063095ea7b3146102525780630d8e6e2c1461026757806318160ddd1461027957806323b872dd1461028157600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611aca565b610476565b60405190151581526020015b60405180910390f35b61021a6104f1565b6040516102099190611b3f565b61023a610235366004611b52565b61057f565b6040516001600160a01b039091168152602001610209565b610265610260366004611b82565b6105f7565b005b6002545b604051908152602001610209565b600e5461026b565b61026561028f366004611bac565b6106bb565b61026b6102a2366004611b82565b6106cb565b61021a61073c565b61026b6102bd366004611b82565b6107ce565b6102656102d0366004611bac565b6107e1565b6102656102e3366004611b52565b6107fc565b61026b6102f6366004611b52565b61083e565b61026b610309366004611b52565b6108a7565b600754600160a81b900460ff166101fd565b61023a61032e366004611b52565b6108b3565b610346610341366004611c2f565b610910565b6040516102099190611ce1565b61026b610361366004611d27565b6109c0565b60075461010090046001600160a01b031661023a565b61026b61038a366004611b52565b6000908152600d602052604090205490565b61021a610a34565b61026b6103b2366004611b52565b610a41565b6102656103c5366004611d42565b610a92565b6102656103d8366004611dd6565b610afe565b6102656103eb366004611e52565b610b5c565b610265610bd2565b61021a610406366004611b52565b610c1a565b61026b60085481565b6101fd610422366004611e74565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61026561045e366004611d27565b610cd9565b610265610471366004611ec7565b610d14565b60006001600160e01b0319821662f7235960e21b14806104a657506001600160e01b031982166317812f2360e11b145b806104c157506001600160e01b03198216635b5e139f60e01b145b806104dc57506001600160e01b0319821663780e9d6360e01b145b806104eb57506104eb82610d79565b92915050565b600980546104fe90611f43565b80601f016020809104026020016040519081016040528092919081815260200182805461052a90611f43565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b03166105db5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6106013382610d9e565b61064d5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016105d2565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610682826108b3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6106c6838383610df9565b505050565b6000811580156106e357506106df836109c0565b6001145b61071f5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016105d2565b50506001600160a01b03166000908152600b602052604090205490565b60606001805461074b90611f43565b80601f016020809104026020016040519081016040528092919081815260200182805461077790611f43565b80156107c45780601f10610799576101008083540402835291602001916107c4565b820191906000526020600020905b8154815290600101906020018083116107a757829003601f168201915b5050505050905090565b60006107da838361105b565b9392505050565b6106c683838360405180602001604052806000815250610afe565b6000610807826108b3565b90506001600160a01b03811633146108315760405162461bcd60e51b81526004016105d290611f78565b61083a826110aa565b5050565b600e5460009082106108825760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016105d2565b600e828154811061089557610895611f9b565b90600052602060002001549050919050565b60006104eb338361105b565b6000818152600360205260409020546001600160a01b03168061090b5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064016105d2565b919050565b6060815167ffffffffffffffff81111561092c5761092c611be8565b604051908082528060200260200182016040528015610955578160200160208202803683370190505b50905060005b82518110156109ba5761098683828151811061097957610979611f9b565b6020026020010151610476565b82828151811061099857610998611f9b565b91151560209283029190910190910152806109b281611fc7565b91505061095b565b50919050565b60006001600160a01b038216610a185760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2061646472657373206e6f742076616c6964206f776e65720000000060448201526064016105d2565b506001600160a01b031660009081526004602052604090205490565b600a80546104fe90611f43565b600754600090600160a81b900460ff1615610a885760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016105d2565b6104eb33836110bc565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610b09848484610df9565b610b158484848461118a565b610b565760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016105d2565b50505050565b600754600160a81b900460ff1615610ba05760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016105d2565b610baa338261105b565b8214610bc85760405162461bcd60e51b81526004016105d290611f78565b6106c633826110bc565b60075461010090046001600160a01b03163314610c015760405162461bcd60e51b81526004016105d290611f78565b600754610c1890600160a81b900460ff1615611239565b565b6000818152600360205260409020546060906001600160a01b0316610c765760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b60448201526064016105d2565b60405180604001604052806007815260200166697066733a2f2f60c81b815250610cb2600d600085815260200190815260200160002054611290565b604051602001610cc3929190611fe2565b6040516020818303038152906040529050919050565b60075461010090046001600160a01b03163314610d085760405162461bcd60e51b81526004016105d290611f78565b610d11816113ce565b50565b610d406040518060400160405280600981526020016813dc195b909bdd5b9960ba1b8152506001611428565b610d4982611490565b8351610d5c906009906020870190611a1b565b508251610d7090600a906020860190611a1b565b50600855505050565b60006001600160e01b031982166398396bd360e01b14806104eb57506104eb826114ed565b600080610daa836108b3565b9050836001600160a01b0316816001600160a01b03161480610df157506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b80610e043382611512565b610e505760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f7665640000000060448201526064016105d2565b610e59826108b3565b6001600160a01b0316846001600160a01b031614610eaa5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016105d2565b6001600160a01b038416610f005760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016105d2565b6001600160a01b038316610f565760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016105d2565b610f61848484611548565b600082815260056020526040902080546001600160a01b03191690556001600160a01b0384811690841614611014576001600160a01b0384166000908152600460205260408120805460019290610fb9908490612011565b90915550506001600160a01b0383166000908152600460205260408120805460019290610fe7908490612028565b9091555050600082815260036020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000818360405160200161108b92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209392505050565b6110b3816115a8565b610d11816116cb565b6000600854600014806110d25750600854600e54105b6111135760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b60448201526064016105d2565b61111c836109c0565b156111695760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206d696e746564206f7220636c61696d65640000000000000060448201526064016105d2565b611173838361105b565b9050611180838284611796565b6104eb838261181d565b60006001600160a01b0384163b15806112305750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906111d29033908a9089908990600401612040565b602060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611224919061207d565b6001600160e01b031916145b95945050505050565b6007805460ff60a81b1916600160a81b83151581029190911791829055604051339260ff929004919091161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b60408051603480825260608281019093526000919060208201818036833701905050905060fd83901c7f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363781602081106112eb576112eb611f9b565b1a60f81b8260008151811061130257611302611f9b565b60200101906001600160f81b031916908160001a90535060029390931b9260335b80156113a4577f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363785601f166020811061135e5761135e611f9b565b1a60f81b83828151811061137457611374611f9b565b60200101906001600160f81b031916908160001a90535060059490941c938061139c8161209a565b915050611323565b50816040516020016113b691906120b1565b60405160208183030381529060405292505050919050565b600780546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff16156114685760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b60448201526064016105d2565b6000805460ff19166001908117909155825161148991906020850190611a1b565b5060025550565b60075460ff16156114d75760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b60448201526064016105d2565b6007805460ff19166001179055610d11816113ce565b60006307f5828d60e41b6001600160e01b0319831614806104eb57506104eb826119a6565b600061151e8383610d9e565b806107da5750826001600160a01b03166115378361057f565b6001600160a01b0316149392505050565b6001600160a01b038316158061156557506001600160a01b038216155b6106c65760405162461bcd60e51b8152602060048201526014602482015273139bdb881d1c985b9cd9995c98589b194813919560621b60448201526064016105d2565b60006115b3826108b3565b6001600160a01b0381166000908152600c6020526040812054600e54929350916115df90600190612011565b905080821461166d57600e81815481106115fb576115fb611f9b565b9060005260206000200154600e838154811061161957611619611f9b565b906000526020600020018190555081600c6000611652600e858154811061164257611642611f9b565b90600052602060002001546108b3565b6001600160a01b031681526020810191909152604001600020555b600e80548061167e5761167e6120e0565b600082815260208082208301600019908101839055909201909255948152600d855260408082208290556001600160a01b039094168152600c8552838120819055600b9094525050812055565b60006116d6826108b3565b6001600160a01b0381166000908152600460205260409020549091506116fe576116fe6120f6565b6001600160a01b0381166000908152600460205260408120805460019290611727908490612011565b9091555050600082815260056020908152604080832080546001600160a01b031990811690915560039092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600e8054600181810183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9091018490556001600160a01b0385166000908152600b6020526040902084905590546117ef9190612011565b6001600160a01b039093166000908152600c6020908152604080832095909555928152600d90925291902055565b6001600160a01b03821661186a5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016105d2565b6000818152600360205260409020546001600160a01b0316156118c65760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016105d2565b6001600160a01b03821660009081526004602052604081208054600192906118ef908490612028565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611965600083836040518060200160405280600081525061118a565b61083a5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016105d2565b60006380ac58cd60e01b6001600160e01b0319831614806104eb57506104eb8260006001600160e01b03198216630d40a0cd60e31b14806104eb57506104eb8260006001600160e01b03198216631fc9136f60e11b14806104eb57506001600160e01b031982166301ffc9a760e01b146104eb565b828054611a2790611f43565b90600052602060002090601f016020900481019282611a495760008555611a8f565b82601f10611a6257805160ff1916838001178555611a8f565b82800160010185558215611a8f579182015b82811115611a8f578251825591602001919060010190611a74565b50611a9b929150611a9f565b5090565b5b80821115611a9b5760008155600101611aa0565b6001600160e01b031981168114610d1157600080fd5b600060208284031215611adc57600080fd5b81356107da81611ab4565b60005b83811015611b02578181015183820152602001611aea565b83811115610b565750506000910152565b60008151808452611b2b816020860160208601611ae7565b601f01601f19169290920160200192915050565b6020815260006107da6020830184611b13565b600060208284031215611b6457600080fd5b5035919050565b80356001600160a01b038116811461090b57600080fd5b60008060408385031215611b9557600080fd5b611b9e83611b6b565b946020939093013593505050565b600080600060608486031215611bc157600080fd5b611bca84611b6b565b9250611bd860208501611b6b565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c2757611c27611be8565b604052919050565b60006020808385031215611c4257600080fd5b823567ffffffffffffffff80821115611c5a57600080fd5b818501915085601f830112611c6e57600080fd5b813581811115611c8057611c80611be8565b8060051b9150611c91848301611bfe565b8181529183018401918481019088841115611cab57600080fd5b938501935b83851015611cd55784359250611cc583611ab4565b8282529385019390850190611cb0565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d1b578351151583529284019291840191600101611cfd565b50909695505050505050565b600060208284031215611d3957600080fd5b6107da82611b6b565b60008060408385031215611d5557600080fd5b611d5e83611b6b565b915060208301358015158114611d7357600080fd5b809150509250929050565b600067ffffffffffffffff831115611d9857611d98611be8565b611dab601f8401601f1916602001611bfe565b9050828152838383011115611dbf57600080fd5b828260208301376000602084830101529392505050565b60008060008060808587031215611dec57600080fd5b611df585611b6b565b9350611e0360208601611b6b565b925060408501359150606085013567ffffffffffffffff811115611e2657600080fd5b8501601f81018713611e3757600080fd5b611e4687823560208401611d7e565b91505092959194509250565b60008060408385031215611e6557600080fd5b50508035926020909101359150565b60008060408385031215611e8757600080fd5b611e9083611b6b565b9150611e9e60208401611b6b565b90509250929050565b600082601f830112611eb857600080fd5b6107da83833560208501611d7e565b60008060008060808587031215611edd57600080fd5b843567ffffffffffffffff80821115611ef557600080fd5b611f0188838901611ea7565b95506020870135915080821115611f1757600080fd5b50611f2487828801611ea7565b935050611f3360408601611b6b565b9396929550929360600135925050565b600181811c90821680611f5757607f821691505b602082108114156109ba57634e487b7160e01b600052602260045260246000fd5b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611fdb57611fdb611fb1565b5060010190565b60008351611ff4818460208801611ae7565b835190830190612008818360208801611ae7565b01949350505050565b60008282101561202357612023611fb1565b500390565b6000821982111561203b5761203b611fb1565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061207390830184611b13565b9695505050505050565b60006020828403121561208f57600080fd5b81516107da81611ab4565b6000816120a9576120a9611fb1565b506000190190565b666261666b72656960c81b8152600082516120d3816007850160208701611ae7565b9190910160070192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220bf267d7c56d03797b1ebf9cf13face00c70f277bc0f4ca0ccc2207fc742db22c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80636352211e1161010f578063b88d4fde116100a2578063d5abeb0111610071578063d5abeb011461040b578063e985e9c514610414578063f2fde38b14610450578063f542033f1461046357600080fd5b8063b88d4fde146103ca578063c3490263146103dd578063c4ae3168146103f0578063c87b56dd146103f857600080fd5b8063913a2ffe116100de578063913a2ffe1461037c57806395d89b411461039c578063a0712d68146103a4578063a22cb465146103b757600080fd5b80636352211e146103205780636a0506681461033357806370a08231146103535780638da5cb5b1461036657600080fd5b80632f745c591161018757806342966c681161015657806342966c68146102d55780634f6ccce7146102e85780635615f604146102fb5780635c975abb1461030e57600080fd5b80632f745c5914610294578063321c48f2146102a75780633cc1c7e0146102af57806342842e0e146102c257600080fd5b8063095ea7b3116101c3578063095ea7b3146102525780630d8e6e2c1461026757806318160ddd1461027957806323b872dd1461028157600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611aca565b610476565b60405190151581526020015b60405180910390f35b61021a6104f1565b6040516102099190611b3f565b61023a610235366004611b52565b61057f565b6040516001600160a01b039091168152602001610209565b610265610260366004611b82565b6105f7565b005b6002545b604051908152602001610209565b600e5461026b565b61026561028f366004611bac565b6106bb565b61026b6102a2366004611b82565b6106cb565b61021a61073c565b61026b6102bd366004611b82565b6107ce565b6102656102d0366004611bac565b6107e1565b6102656102e3366004611b52565b6107fc565b61026b6102f6366004611b52565b61083e565b61026b610309366004611b52565b6108a7565b600754600160a81b900460ff166101fd565b61023a61032e366004611b52565b6108b3565b610346610341366004611c2f565b610910565b6040516102099190611ce1565b61026b610361366004611d27565b6109c0565b60075461010090046001600160a01b031661023a565b61026b61038a366004611b52565b6000908152600d602052604090205490565b61021a610a34565b61026b6103b2366004611b52565b610a41565b6102656103c5366004611d42565b610a92565b6102656103d8366004611dd6565b610afe565b6102656103eb366004611e52565b610b5c565b610265610bd2565b61021a610406366004611b52565b610c1a565b61026b60085481565b6101fd610422366004611e74565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61026561045e366004611d27565b610cd9565b610265610471366004611ec7565b610d14565b60006001600160e01b0319821662f7235960e21b14806104a657506001600160e01b031982166317812f2360e11b145b806104c157506001600160e01b03198216635b5e139f60e01b145b806104dc57506001600160e01b0319821663780e9d6360e01b145b806104eb57506104eb82610d79565b92915050565b600980546104fe90611f43565b80601f016020809104026020016040519081016040528092919081815260200182805461052a90611f43565b80156105775780601f1061054c57610100808354040283529160200191610577565b820191906000526020600020905b81548152906001019060200180831161055a57829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b03166105db5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6106013382610d9e565b61064d5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016105d2565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610682826108b3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6106c6838383610df9565b505050565b6000811580156106e357506106df836109c0565b6001145b61071f5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016105d2565b50506001600160a01b03166000908152600b602052604090205490565b60606001805461074b90611f43565b80601f016020809104026020016040519081016040528092919081815260200182805461077790611f43565b80156107c45780601f10610799576101008083540402835291602001916107c4565b820191906000526020600020905b8154815290600101906020018083116107a757829003601f168201915b5050505050905090565b60006107da838361105b565b9392505050565b6106c683838360405180602001604052806000815250610afe565b6000610807826108b3565b90506001600160a01b03811633146108315760405162461bcd60e51b81526004016105d290611f78565b61083a826110aa565b5050565b600e5460009082106108825760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016105d2565b600e828154811061089557610895611f9b565b90600052602060002001549050919050565b60006104eb338361105b565b6000818152600360205260409020546001600160a01b03168061090b5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064016105d2565b919050565b6060815167ffffffffffffffff81111561092c5761092c611be8565b604051908082528060200260200182016040528015610955578160200160208202803683370190505b50905060005b82518110156109ba5761098683828151811061097957610979611f9b565b6020026020010151610476565b82828151811061099857610998611f9b565b91151560209283029190910190910152806109b281611fc7565b91505061095b565b50919050565b60006001600160a01b038216610a185760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2061646472657373206e6f742076616c6964206f776e65720000000060448201526064016105d2565b506001600160a01b031660009081526004602052604090205490565b600a80546104fe90611f43565b600754600090600160a81b900460ff1615610a885760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016105d2565b6104eb33836110bc565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610b09848484610df9565b610b158484848461118a565b610b565760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016105d2565b50505050565b600754600160a81b900460ff1615610ba05760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016105d2565b610baa338261105b565b8214610bc85760405162461bcd60e51b81526004016105d290611f78565b6106c633826110bc565b60075461010090046001600160a01b03163314610c015760405162461bcd60e51b81526004016105d290611f78565b600754610c1890600160a81b900460ff1615611239565b565b6000818152600360205260409020546060906001600160a01b0316610c765760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b60448201526064016105d2565b60405180604001604052806007815260200166697066733a2f2f60c81b815250610cb2600d600085815260200190815260200160002054611290565b604051602001610cc3929190611fe2565b6040516020818303038152906040529050919050565b60075461010090046001600160a01b03163314610d085760405162461bcd60e51b81526004016105d290611f78565b610d11816113ce565b50565b610d406040518060400160405280600981526020016813dc195b909bdd5b9960ba1b8152506001611428565b610d4982611490565b8351610d5c906009906020870190611a1b565b508251610d7090600a906020860190611a1b565b50600855505050565b60006001600160e01b031982166398396bd360e01b14806104eb57506104eb826114ed565b600080610daa836108b3565b9050836001600160a01b0316816001600160a01b03161480610df157506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b80610e043382611512565b610e505760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f7665640000000060448201526064016105d2565b610e59826108b3565b6001600160a01b0316846001600160a01b031614610eaa5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016105d2565b6001600160a01b038416610f005760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016105d2565b6001600160a01b038316610f565760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016105d2565b610f61848484611548565b600082815260056020526040902080546001600160a01b03191690556001600160a01b0384811690841614611014576001600160a01b0384166000908152600460205260408120805460019290610fb9908490612011565b90915550506001600160a01b0383166000908152600460205260408120805460019290610fe7908490612028565b9091555050600082815260036020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000818360405160200161108b92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209392505050565b6110b3816115a8565b610d11816116cb565b6000600854600014806110d25750600854600e54105b6111135760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b60448201526064016105d2565b61111c836109c0565b156111695760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206d696e746564206f7220636c61696d65640000000000000060448201526064016105d2565b611173838361105b565b9050611180838284611796565b6104eb838261181d565b60006001600160a01b0384163b15806112305750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906111d29033908a9089908990600401612040565b602060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611224919061207d565b6001600160e01b031916145b95945050505050565b6007805460ff60a81b1916600160a81b83151581029190911791829055604051339260ff929004919091161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b60408051603480825260608281019093526000919060208201818036833701905050905060fd83901c7f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363781602081106112eb576112eb611f9b565b1a60f81b8260008151811061130257611302611f9b565b60200101906001600160f81b031916908160001a90535060029390931b9260335b80156113a4577f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363785601f166020811061135e5761135e611f9b565b1a60f81b83828151811061137457611374611f9b565b60200101906001600160f81b031916908160001a90535060059490941c938061139c8161209a565b915050611323565b50816040516020016113b691906120b1565b60405160208183030381529060405292505050919050565b600780546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff16156114685760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b60448201526064016105d2565b6000805460ff19166001908117909155825161148991906020850190611a1b565b5060025550565b60075460ff16156114d75760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b60448201526064016105d2565b6007805460ff19166001179055610d11816113ce565b60006307f5828d60e41b6001600160e01b0319831614806104eb57506104eb826119a6565b600061151e8383610d9e565b806107da5750826001600160a01b03166115378361057f565b6001600160a01b0316149392505050565b6001600160a01b038316158061156557506001600160a01b038216155b6106c65760405162461bcd60e51b8152602060048201526014602482015273139bdb881d1c985b9cd9995c98589b194813919560621b60448201526064016105d2565b60006115b3826108b3565b6001600160a01b0381166000908152600c6020526040812054600e54929350916115df90600190612011565b905080821461166d57600e81815481106115fb576115fb611f9b565b9060005260206000200154600e838154811061161957611619611f9b565b906000526020600020018190555081600c6000611652600e858154811061164257611642611f9b565b90600052602060002001546108b3565b6001600160a01b031681526020810191909152604001600020555b600e80548061167e5761167e6120e0565b600082815260208082208301600019908101839055909201909255948152600d855260408082208290556001600160a01b039094168152600c8552838120819055600b9094525050812055565b60006116d6826108b3565b6001600160a01b0381166000908152600460205260409020549091506116fe576116fe6120f6565b6001600160a01b0381166000908152600460205260408120805460019290611727908490612011565b9091555050600082815260056020908152604080832080546001600160a01b031990811690915560039092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600e8054600181810183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9091018490556001600160a01b0385166000908152600b6020526040902084905590546117ef9190612011565b6001600160a01b039093166000908152600c6020908152604080832095909555928152600d90925291902055565b6001600160a01b03821661186a5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016105d2565b6000818152600360205260409020546001600160a01b0316156118c65760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016105d2565b6001600160a01b03821660009081526004602052604081208054600192906118ef908490612028565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611965600083836040518060200160405280600081525061118a565b61083a5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016105d2565b60006380ac58cd60e01b6001600160e01b0319831614806104eb57506104eb8260006001600160e01b03198216630d40a0cd60e31b14806104eb57506104eb8260006001600160e01b03198216631fc9136f60e11b14806104eb57506001600160e01b031982166301ffc9a760e01b146104eb565b828054611a2790611f43565b90600052602060002090601f016020900481019282611a495760008555611a8f565b82601f10611a6257805160ff1916838001178555611a8f565b82800160010185558215611a8f579182015b82811115611a8f578251825591602001919060010190611a74565b50611a9b929150611a9f565b5090565b5b80821115611a9b5760008155600101611aa0565b6001600160e01b031981168114610d1157600080fd5b600060208284031215611adc57600080fd5b81356107da81611ab4565b60005b83811015611b02578181015183820152602001611aea565b83811115610b565750506000910152565b60008151808452611b2b816020860160208601611ae7565b601f01601f19169290920160200192915050565b6020815260006107da6020830184611b13565b600060208284031215611b6457600080fd5b5035919050565b80356001600160a01b038116811461090b57600080fd5b60008060408385031215611b9557600080fd5b611b9e83611b6b565b946020939093013593505050565b600080600060608486031215611bc157600080fd5b611bca84611b6b565b9250611bd860208501611b6b565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c2757611c27611be8565b604052919050565b60006020808385031215611c4257600080fd5b823567ffffffffffffffff80821115611c5a57600080fd5b818501915085601f830112611c6e57600080fd5b813581811115611c8057611c80611be8565b8060051b9150611c91848301611bfe565b8181529183018401918481019088841115611cab57600080fd5b938501935b83851015611cd55784359250611cc583611ab4565b8282529385019390850190611cb0565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d1b578351151583529284019291840191600101611cfd565b50909695505050505050565b600060208284031215611d3957600080fd5b6107da82611b6b565b60008060408385031215611d5557600080fd5b611d5e83611b6b565b915060208301358015158114611d7357600080fd5b809150509250929050565b600067ffffffffffffffff831115611d9857611d98611be8565b611dab601f8401601f1916602001611bfe565b9050828152838383011115611dbf57600080fd5b828260208301376000602084830101529392505050565b60008060008060808587031215611dec57600080fd5b611df585611b6b565b9350611e0360208601611b6b565b925060408501359150606085013567ffffffffffffffff811115611e2657600080fd5b8501601f81018713611e3757600080fd5b611e4687823560208401611d7e565b91505092959194509250565b60008060408385031215611e6557600080fd5b50508035926020909101359150565b60008060408385031215611e8757600080fd5b611e9083611b6b565b9150611e9e60208401611b6b565b90509250929050565b600082601f830112611eb857600080fd5b6107da83833560208501611d7e565b60008060008060808587031215611edd57600080fd5b843567ffffffffffffffff80821115611ef557600080fd5b611f0188838901611ea7565b95506020870135915080821115611f1757600080fd5b50611f2487828801611ea7565b935050611f3360408601611b6b565b9396929550929360600135925050565b600181811c90821680611f5757607f821691505b602082108114156109ba57634e487b7160e01b600052602260045260246000fd5b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611fdb57611fdb611fb1565b5060010190565b60008351611ff4818460208801611ae7565b835190830190612008818360208801611ae7565b01949350505050565b60008282101561202357612023611fb1565b500390565b6000821982111561203b5761203b611fb1565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061207390830184611b13565b9695505050505050565b60006020828403121561208f57600080fd5b81516107da81611ab4565b6000816120a9576120a9611fb1565b506000190190565b666261666b72656960c81b8152600082516120d3816007850160208701611ae7565b9190910160070192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220bf267d7c56d03797b1ebf9cf13face00c70f277bc0f4ca0ccc2207fc742db22c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "OpenBound smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(string,string,address,uint256)": {
        "notice": "IOpenBound"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165"
      },
      "tokenURI(uint256)": {
        "notice": "IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "IERC721Enumerable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6586,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_once",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6588,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_template",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6590,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6901,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6905,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6909,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6915,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6688,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 6690,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_owner",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8182,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_paused",
        "offset": 21,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 17488,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "maxSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 17490,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 17492,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 17496,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenOfOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17500,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenIndexOfOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17504,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_cidOfToken",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17507,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokens",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}