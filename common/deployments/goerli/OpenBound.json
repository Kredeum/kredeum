{
  "address": "0x39F3Ad85CAbba0630E2875379c8334Ee3C5F87b2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getCID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "getMyTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "myTokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b14c4436609e9a625f9560a59c54301c146c5c0ab4c2d7d217ed226f58e4b7a",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x39F3Ad85CAbba0630E2875379c8334Ee3C5F87b2",
    "transactionIndex": 23,
    "gasUsed": "1764931",
    "logsBloom": "0x
    "blockHash": "0xff7d7d30e1127f1abd690bb658f384b82c81a5a90a10cb755e3f932c8d6e6cdc",
    "transactionHash": "0x7b14c4436609e9a625f9560a59c54301c146c5c0ab4c2d7d217ed226f58e4b7a",
    "logs": [],
    "blockNumber": 7288671,
    "cumulativeGasUsed": "13090087",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "ee0c301fcce9b7a705c621c909f3418c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getCID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"getMyTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OpenBound smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,string,address,uint256)\":{\"notice\":\"IOpenBound\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165\"},\"tokenURI(uint256)\":{\"notice\":\"IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"IERC721Enumerable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/OpenBound.sol\":\"OpenBound\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa39e9770ae9ec18032ae66aed65dbbc82b733f15a56b8208cfaf69d16ea28bfd\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3728f14ffbb28fe4976dbd6fb2d50c8abf6d144c28fafdcf274cabb7d116c3c2\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function getTemplate() external view returns (string memory);\\n\\n    function getVersion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x152901133233a3b58d7f9391a4c9fe920b899d1b720f473f8b9bc04790fb760d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"contracts/library/Bafkrey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Bafkrey {\\n    bytes32 private constant _BASE32_SYMBOLS = \\\"abcdefghijklmnopqrstuvwxyz234567\\\";\\n\\n    /// Transfom uint256 to IPFS CID V1 base32 raw (starting with \\\"bafkrei\\\")\\n    function uint256ToCid(uint256 id) internal pure returns (string memory) {\\n        // IPFS CID V1 base32 raw \\\"bafrei...\\\" => 5 bits => uint32\\n        // uint256 id  = 256 bits = 1 bit + 51 uint32 = 1 + 51 * 5 = 256\\n        // 00 added right =>\\n        // uint8 + uint256 + 00 = 258 bits = uint8 + 50 uint32 + (3 bits + 00) = uint8 + 51 uint32 = 3 + 51 * 5 = 258\\n\\n        bytes memory buffer = new bytes(52);\\n        uint8 high3 = uint8(id >> 253);\\n        buffer[0] = _BASE32_SYMBOLS[high3 & 0x1f];\\n\\n        id <<= 2;\\n        for (uint256 i = 51; i > 0; i--) {\\n            buffer[i] = _BASE32_SYMBOLS[id & 0x1f];\\n            id >>= 5;\\n        }\\n\\n        return string(abi.encodePacked(\\\"bafkrei\\\", buffer));\\n    }\\n}\\n\",\"keccak256\":\"0xc2ecc036f6b79a8ab8642fa3a869b20008158d0c6cc13e4829283a5841f53522\",\"license\":\"MIT\"},\"contracts/open/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IOpenCloneable.sol\\\";\\nimport \\\"./OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool private _once;\\n    string private _template;\\n    uint256 private _version;\\n\\n    function getTemplate() external view override(IOpenCloneable) returns (string memory) {\\n        return _template;\\n    }\\n\\n    function getVersion() external view override(IOpenCloneable) returns (uint256) {\\n        return _version;\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(_once == false, \\\"Only once!\\\");\\n        _once = true;\\n\\n        _template = template_;\\n        _version = version_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0816c409d158848e778501a685af4c180ab93baab9881c654f6a5e644f9b310e\",\"license\":\"MIT\"},\"contracts/open/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7;\\n    }\\n}\\n\",\"keccak256\":\"0x54c433b2c810d2639739d9507ffc4d8bc14bf4d08191aaa8f2ecf2945ec69c72\",\"license\":\"MIT\"},\"contracts/open/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC721.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC721 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC721) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _setOwner(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x77f775626a4c1521cba23d4d72e881d652c86720dd22741ee2a52519e7f3cdf8\",\"license\":\"MIT\"},\"contracts/open/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC165.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    function approve(address spender, uint256 tokenID) external override(IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override(IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override(IERC721) {\\n        safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) public override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return\\n            interfaceId == 0x80ac58cd || // = type(IERC721).interfaceId\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override(IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Zero address not valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID) public view override(IERC721) returns (address owner) {\\n        require((owner = _owners[tokenID]) != address(0), \\\"Invalid token ID\\\");\\n    }\\n\\n    function getApproved(uint256 tokenID) public view override(IERC721) returns (address) {\\n        require(_exists(tokenID), \\\"Invalid token ID\\\");\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mintNft(address to, uint256 tokenID) internal {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(!_exists(tokenID), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burnNft(uint256 tokenID) internal {\\n        address owner = ownerOf(tokenID);\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal onlyTokenOwnerOrApproved(tokenID) {\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual;\\n\\n    function _exists(uint256 tokenID) internal view returns (bool) {\\n        return _owners[tokenID] != address(0);\\n    }\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenID);\\n        return (owner == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID) internal view returns (bool) {\\n        return (_isOwnerOrOperator(spender, tokenID) || getApproved(tokenID) == spender);\\n    }\\n\\n    function _isERC721Receiver(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private returns (bool) {\\n        return\\n            to.code.length == 0 ||\\n            IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data) ==\\n            IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xff97949778ef85fcc2649a2f9d92378888d257dd19f16ee0f64c5790e7143816\",\"license\":\"MIT\"},\"contracts/open/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//                     |\\n//               OpenPauseable\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC173.sol\\\";\\nimport \\\"../interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override(IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override(IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb4b4fd2fa4a5a9df9a73dbfc27f2c66c30ec145eaf894a8f88a0278cdb42975d\",\"license\":\"MIT\"},\"contracts/templates/OpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//                         OpenERC165 (supports)\\n//                             |\\n//                             \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//                             |                      |\\n//                         OpenERC721 (NFT)     OpenCloneable\\n//                             |                      |\\n//                             |                      |\\n//                        OpenERC173                  |\\n//                         (Ownable)                  |\\n//                             |                      |\\n//                       OpenPauseable                |\\n//                             |                      |\\n//                             \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//                             |\\n//                         OpenBound --- IOpenBound --- IERC721Enumerable --- IERC721Metadata\\n//\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../open/OpenPauseable.sol\\\";\\nimport \\\"../open/OpenCloneable.sol\\\";\\n\\nimport \\\"../interfaces/IOpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenBound.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\nimport \\\"../library/Bafkrey.sol\\\";\\n\\n/// @title OpenBound smartcontract\\ncontract OpenBound is IOpenBound, IERC721Enumerable, IERC721Metadata, OpenCloneable, OpenPauseable {\\n    uint256 public maxSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    mapping(address => uint256) internal _tokenOfOwner;\\n    mapping(address => uint256) internal _tokenIndexOfOwner;\\n    mapping(uint256 => uint256) internal _cidOfToken;\\n    uint256[] internal _tokens;\\n\\n    string private constant _BASE_URI = \\\"ipfs://\\\";\\n\\n    /// IOpenBound\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 maxSupply_\\n    ) public override(IOpenBound) {\\n        OpenCloneable._initialize(\\\"OpenBound\\\", 1);\\n        OpenERC173._initialize(owner_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        maxSupply = maxSupply_;\\n    }\\n\\n    function mint(uint256 cid) external override(IOpenBound) onlyWhenNotPaused returns (uint256 tokenID) {\\n        tokenID = _mint(msg.sender, cid);\\n    }\\n\\n    function claim(uint256 tokenID, uint256 cid) external override(IOpenBound) onlyWhenNotPaused {\\n        require(tokenID == _tokenID(msg.sender, cid), \\\"Not owner\\\");\\n        _mint(msg.sender, cid);\\n    }\\n\\n    function burn(uint256 tokenID) external override(IOpenBound) {\\n        address from = ownerOf(tokenID);\\n        require(from == msg.sender, \\\"Not owner\\\");\\n\\n        _burn(tokenID);\\n    }\\n\\n    function getMyTokenID(uint256 cid) external view override(IOpenBound) returns (uint256 myTokenID) {\\n        myTokenID = _tokenID(msg.sender, cid);\\n    }\\n\\n    function getCID(uint256 tokenID) external view override(IOpenBound) returns (uint256 cid) {\\n        cid = _cidOfToken[tokenID];\\n    }\\n\\n    /// IERC721Enumerable\\n    function totalSupply() external view override(IERC721Enumerable) returns (uint256 tokensLength) {\\n        tokensLength = _tokens.length;\\n    }\\n\\n    function tokenOfOwnerByIndex(address tokenOwner, uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256 tokenID)\\n    {\\n        require(index == 0 && balanceOf(tokenOwner) == 1, \\\"Invalid index\\\");\\n\\n        tokenID = _tokenOfOwner[tokenOwner];\\n    }\\n\\n    function tokenByIndex(uint256 index) external view override(IERC721Enumerable) returns (uint256 tokenID) {\\n        require(index < _tokens.length, \\\"Invalid index\\\");\\n\\n        tokenID = _tokens[index];\\n    }\\n\\n    /// IERC721Metadata\\n    function tokenURI(uint256 tokenID) external view override(IERC721Metadata) returns (string memory) {\\n        require(_exists(tokenID), \\\"NFT doesn't exists\\\");\\n\\n        return string(abi.encodePacked(_BASE_URI, Bafkrey.uint256ToCid(_cidOfToken[tokenID])));\\n    }\\n\\n    /// IERC165\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenPauseable, OpenCloneable) returns (bool) {\\n        return\\n            interfaceId == type(IOpenNFTs).interfaceId ||\\n            interfaceId == type(IOpenBound).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// internal\\n    function _mintEnumerable(\\n        address to,\\n        uint256 tokenID,\\n        uint256 cid\\n    ) internal {\\n        _tokens.push(tokenID);\\n        _tokenOfOwner[to] = tokenID;\\n        _tokenIndexOfOwner[to] = _tokens.length - 1;\\n        _cidOfToken[tokenID] = cid;\\n    }\\n\\n    function _mint(address to, uint256 cid) internal returns (uint256 tokenID) {\\n        require((maxSupply == 0) || _tokens.length < maxSupply, \\\"Max supply reached\\\");\\n        require(balanceOf(to) == 0, \\\"Already minted or claimed\\\");\\n\\n        tokenID = _tokenID(to, cid);\\n\\n        _mintEnumerable(to, tokenID, cid);\\n        _mintNft(to, tokenID);\\n    }\\n\\n    function _burnEnumerable(uint256 tokenID) internal {\\n        address from = ownerOf(tokenID);\\n        uint256 index = _tokenIndexOfOwner[from];\\n        uint256 lastIndex = _tokens.length - 1;\\n\\n        if (index != lastIndex) {\\n            _tokens[index] = _tokens[lastIndex];\\n            _tokenIndexOfOwner[ownerOf(_tokens[lastIndex])] = index;\\n        }\\n        _tokens.pop();\\n\\n        delete _cidOfToken[tokenID];\\n        delete _tokenIndexOfOwner[from];\\n        delete _tokenOfOwner[from];\\n    }\\n\\n    function _burn(uint256 tokenID) internal {\\n        _burnEnumerable(tokenID);\\n        _burnNft(tokenID);\\n    }\\n\\n    function _tokenID(address addr, uint256 cid) internal pure returns (uint256 tokenID) {\\n        tokenID = uint256(keccak256(abi.encodePacked(cid, addr)));\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 // tokenId\\n    ) internal pure override {\\n        require(from == address(0) || to == address(0), \\\"Non transferable NFT\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2d4320da4ccaf94002b255411cb06b9da5a48b896a97ccb9e93f8a34b436ef13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ef7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063b88d4fde116100a2578063d5abeb0111610071578063d5abeb01146103c2578063e985e9c5146103cb578063f2fde38b14610407578063f542033f1461041a57600080fd5b8063b88d4fde14610381578063c349026314610394578063c4ae3168146103a7578063c87b56dd146103af57600080fd5b8063913a2ffe116100de578063913a2ffe1461033357806395d89b4114610353578063a0712d681461035b578063a22cb4651461036e57600080fd5b80636352211e146102f757806370a082311461030a5780638da5cb5b1461031d57600080fd5b80632f745c591161017157806342966c681161014b57806342966c68146102ac5780634f6ccce7146102bf5780635615f604146102d25780635c975abb146102e557600080fd5b80632f745c591461027e578063321c48f21461029157806342842e0e1461029957600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780630d8e6e2c1461025157806318160ddd1461026357806323b872dd1461026b57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e236600461199f565b61042d565b60405190151581526020015b60405180910390f35b6102046104a8565b6040516101f39190611a14565b61022461021f366004611a27565b610536565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611a57565b6105ae565b005b6002545b6040519081526020016101f3565b600e54610255565b61024f610279366004611a81565b610672565b61025561028c366004611a57565b610682565b6102046106f3565b61024f6102a7366004611a81565b610785565b61024f6102ba366004611a27565b6107a0565b6102556102cd366004611a27565b6107e2565b6102556102e0366004611a27565b61084b565b600754600160a81b900460ff166101e7565b610224610305366004611a27565b610857565b610255610318366004611abd565b6108b4565b60075461010090046001600160a01b0316610224565b610255610341366004611a27565b6000908152600d602052604090205490565b610204610928565b610255610369366004611a27565b610935565b61024f61037c366004611ad8565b610986565b61024f61038f366004611ba0565b6109f2565b61024f6103a2366004611c1c565b610a50565b61024f610ac6565b6102046103bd366004611a27565b610b0e565b61025560085481565b6101e76103d9366004611c3e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61024f610415366004611abd565b610bcd565b61024f610428366004611c91565b610c08565b60006001600160e01b0319821662f7235960e21b148061045d57506001600160e01b031982166309e1ccd360e11b145b8061047857506001600160e01b03198216635b5e139f60e01b145b8061049357506001600160e01b0319821663780e9d6360e01b145b806104a257506104a282610c6d565b92915050565b600980546104b590611d0d565b80601f01602080910402602001604051908101604052809291908181526020018280546104e190611d0d565b801561052e5780601f106105035761010080835404028352916020019161052e565b820191906000526020600020905b81548152906001019060200180831161051157829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b03166105925760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6105b83382610c92565b6106045760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f72000000006044820152606401610589565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061063982610857565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61067d838383610ced565b505050565b60008115801561069a5750610696836108b4565b6001145b6106d65760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610589565b50506001600160a01b03166000908152600b602052604090205490565b60606001805461070290611d0d565b80601f016020809104026020016040519081016040528092919081815260200182805461072e90611d0d565b801561077b5780601f106107505761010080835404028352916020019161077b565b820191906000526020600020905b81548152906001019060200180831161075e57829003601f168201915b5050505050905090565b61067d838383604051806020016040528060008152506109f2565b60006107ab82610857565b90506001600160a01b03811633146107d55760405162461bcd60e51b815260040161058990611d48565b6107de82610f4f565b5050565b600e5460009082106108265760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610589565b600e828154811061083957610839611d6b565b90600052602060002001549050919050565b60006104a23383610f61565b6000818152600360205260409020546001600160a01b0316806108af5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610589565b919050565b60006001600160a01b03821661090c5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2061646472657373206e6f742076616c6964206f776e6572000000006044820152606401610589565b506001600160a01b031660009081526004602052604090205490565b600a80546104b590611d0d565b600754600090600160a81b900460ff161561097c5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610589565b6104a23383610fb0565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6109fd848484610ced565b610a098484848461107e565b610a4a5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610589565b50505050565b600754600160a81b900460ff1615610a945760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610589565b610a9e3382610f61565b8214610abc5760405162461bcd60e51b815260040161058990611d48565b61067d3382610fb0565b60075461010090046001600160a01b03163314610af55760405162461bcd60e51b815260040161058990611d48565b600754610b0c90600160a81b900460ff161561112d565b565b6000818152600360205260409020546060906001600160a01b0316610b6a5760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b6044820152606401610589565b60405180604001604052806007815260200166697066733a2f2f60c81b815250610ba6600d600085815260200190815260200160002054611184565b604051602001610bb7929190611d81565b6040516020818303038152906040529050919050565b60075461010090046001600160a01b03163314610bfc5760405162461bcd60e51b815260040161058990611d48565b610c05816112c2565b50565b610c346040518060400160405280600981526020016813dc195b909bdd5b9960ba1b815250600161131c565b610c3d82611384565b8351610c509060099060208701906118f0565b508251610c6490600a9060208601906118f0565b50600855505050565b60006001600160e01b031982166398396bd360e01b14806104a257506104a2826113e1565b600080610c9e83610857565b9050836001600160a01b0316816001600160a01b03161480610ce557506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b80610cf83382611406565b610d445760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f766564000000006044820152606401610589565b610d4d82610857565b6001600160a01b0316846001600160a01b031614610d9e5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b6044820152606401610589565b6001600160a01b038416610df45760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f20616464726573730000000000006044820152606401610589565b6001600160a01b038316610e4a5760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f206164647265737300000000000000006044820152606401610589565b610e5584848461143d565b600082815260056020526040902080546001600160a01b03191690556001600160a01b0384811690841614610f08576001600160a01b0384166000908152600460205260408120805460019290610ead908490611dc6565b90915550506001600160a01b0383166000908152600460205260408120805460019290610edb908490611ddd565b9091555050600082815260036020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b610f588161149d565b610c05816115c0565b60008183604051602001610f9192919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209392505050565b600060085460001480610fc65750600854600e54105b6110075760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606401610589565b611010836108b4565b1561105d5760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206d696e746564206f7220636c61696d6564000000000000006044820152606401610589565b6110678383610f61565b905061107483828461168b565b6104a28382611712565b60006001600160a01b0384163b15806111245750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906110c69033908a9089908990600401611df5565b602060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111189190611e32565b6001600160e01b031916145b95945050505050565b6007805460ff60a81b1916600160a81b83151581029190911791829055604051339260ff929004919091161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b60408051603480825260608281019093526000919060208201818036833701905050905060fd83901c7f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363781602081106111df576111df611d6b565b1a60f81b826000815181106111f6576111f6611d6b565b60200101906001600160f81b031916908160001a90535060029390931b9260335b8015611298577f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363785601f166020811061125257611252611d6b565b1a60f81b83828151811061126857611268611d6b565b60200101906001600160f81b031916908160001a90535060059490941c938061129081611e4f565b915050611217565b50816040516020016112aa9190611e66565b60405160208183030381529060405292505050919050565b600780546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff161561135c5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b6044820152606401610589565b6000805460ff19166001908117909155825161137d919060208501906118f0565b5060025550565b60075460ff16156113cb5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b6044820152606401610589565b6007805460ff19166001179055610c05816112c2565b60006307f5828d60e41b6001600160e01b0319831614806104a257506104a28261189b565b60006114128383610c92565b806114365750826001600160a01b031661142b83610536565b6001600160a01b0316145b9392505050565b6001600160a01b038316158061145a57506001600160a01b038216155b61067d5760405162461bcd60e51b8152602060048201526014602482015273139bdb881d1c985b9cd9995c98589b194813919560621b6044820152606401610589565b60006114a882610857565b6001600160a01b0381166000908152600c6020526040812054600e54929350916114d490600190611dc6565b905080821461156257600e81815481106114f0576114f0611d6b565b9060005260206000200154600e838154811061150e5761150e611d6b565b906000526020600020018190555081600c6000611547600e858154811061153757611537611d6b565b9060005260206000200154610857565b6001600160a01b031681526020810191909152604001600020555b600e80548061157357611573611e95565b600082815260208082208301600019908101839055909201909255948152600d855260408082208290556001600160a01b039094168152600c8552838120819055600b9094525050812055565b60006115cb82610857565b6001600160a01b0381166000908152600460205260409020549091506115f3576115f3611eab565b6001600160a01b038116600090815260046020526040812080546001929061161c908490611dc6565b9091555050600082815260056020908152604080832080546001600160a01b031990811690915560039092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600e8054600181810183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9091018490556001600160a01b0385166000908152600b6020526040902084905590546116e49190611dc6565b6001600160a01b039093166000908152600c6020908152604080832095909555928152600d90925291902055565b6001600160a01b03821661175f5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b6044820152606401610589565b6000818152600360205260409020546001600160a01b0316156117bb5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b6044820152606401610589565b6001600160a01b03821660009081526004602052604081208054600192906117e4908490611ddd565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461185a600083836040518060200160405280600081525061107e565b6107de5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610589565b60006380ac58cd60e01b6001600160e01b0319831614806104a257506104a28260006001600160e01b03198216631fc9136f60e11b14806104a257506001600160e01b031982166301ffc9a760e01b146104a2565b8280546118fc90611d0d565b90600052602060002090601f01602090048101928261191e5760008555611964565b82601f1061193757805160ff1916838001178555611964565b82800160010185558215611964579182015b82811115611964578251825591602001919060010190611949565b50611970929150611974565b5090565b5b808211156119705760008155600101611975565b6001600160e01b031981168114610c0557600080fd5b6000602082840312156119b157600080fd5b813561143681611989565b60005b838110156119d75781810151838201526020016119bf565b83811115610a4a5750506000910152565b60008151808452611a008160208601602086016119bc565b601f01601f19169290920160200192915050565b60208152600061143660208301846119e8565b600060208284031215611a3957600080fd5b5035919050565b80356001600160a01b03811681146108af57600080fd5b60008060408385031215611a6a57600080fd5b611a7383611a40565b946020939093013593505050565b600080600060608486031215611a9657600080fd5b611a9f84611a40565b9250611aad60208501611a40565b9150604084013590509250925092565b600060208284031215611acf57600080fd5b61143682611a40565b60008060408385031215611aeb57600080fd5b611af483611a40565b915060208301358015158114611b0957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611b4557611b45611b14565b604051601f8501601f19908116603f01168101908282118183101715611b6d57611b6d611b14565b81604052809350858152868686011115611b8657600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215611bb657600080fd5b611bbf85611a40565b9350611bcd60208601611a40565b925060408501359150606085013567ffffffffffffffff811115611bf057600080fd5b8501601f81018713611c0157600080fd5b611c1087823560208401611b2a565b91505092959194509250565b60008060408385031215611c2f57600080fd5b50508035926020909101359150565b60008060408385031215611c5157600080fd5b611c5a83611a40565b9150611c6860208401611a40565b90509250929050565b600082601f830112611c8257600080fd5b61143683833560208501611b2a565b60008060008060808587031215611ca757600080fd5b843567ffffffffffffffff80821115611cbf57600080fd5b611ccb88838901611c71565b95506020870135915080821115611ce157600080fd5b50611cee87828801611c71565b935050611cfd60408601611a40565b9396929550929360600135925050565b600181811c90821680611d2157607f821691505b60208210811415611d4257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60008351611d938184602088016119bc565b835190830190611da78183602088016119bc565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611dd857611dd8611db0565b500390565b60008219821115611df057611df0611db0565b500190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e28908301846119e8565b9695505050505050565b600060208284031215611e4457600080fd5b815161143681611989565b600081611e5e57611e5e611db0565b506000190190565b666261666b72656960c81b815260008251611e888160078501602087016119bc565b9190910160070192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea264697066735822122050bfcbfc07997daea305c8eb8f2adf8a89d439002afdb9cf66f80b33991900d764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063b88d4fde116100a2578063d5abeb0111610071578063d5abeb01146103c2578063e985e9c5146103cb578063f2fde38b14610407578063f542033f1461041a57600080fd5b8063b88d4fde14610381578063c349026314610394578063c4ae3168146103a7578063c87b56dd146103af57600080fd5b8063913a2ffe116100de578063913a2ffe1461033357806395d89b4114610353578063a0712d681461035b578063a22cb4651461036e57600080fd5b80636352211e146102f757806370a082311461030a5780638da5cb5b1461031d57600080fd5b80632f745c591161017157806342966c681161014b57806342966c68146102ac5780634f6ccce7146102bf5780635615f604146102d25780635c975abb146102e557600080fd5b80632f745c591461027e578063321c48f21461029157806342842e0e1461029957600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780630d8e6e2c1461025157806318160ddd1461026357806323b872dd1461026b57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e236600461199f565b61042d565b60405190151581526020015b60405180910390f35b6102046104a8565b6040516101f39190611a14565b61022461021f366004611a27565b610536565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611a57565b6105ae565b005b6002545b6040519081526020016101f3565b600e54610255565b61024f610279366004611a81565b610672565b61025561028c366004611a57565b610682565b6102046106f3565b61024f6102a7366004611a81565b610785565b61024f6102ba366004611a27565b6107a0565b6102556102cd366004611a27565b6107e2565b6102556102e0366004611a27565b61084b565b600754600160a81b900460ff166101e7565b610224610305366004611a27565b610857565b610255610318366004611abd565b6108b4565b60075461010090046001600160a01b0316610224565b610255610341366004611a27565b6000908152600d602052604090205490565b610204610928565b610255610369366004611a27565b610935565b61024f61037c366004611ad8565b610986565b61024f61038f366004611ba0565b6109f2565b61024f6103a2366004611c1c565b610a50565b61024f610ac6565b6102046103bd366004611a27565b610b0e565b61025560085481565b6101e76103d9366004611c3e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61024f610415366004611abd565b610bcd565b61024f610428366004611c91565b610c08565b60006001600160e01b0319821662f7235960e21b148061045d57506001600160e01b031982166309e1ccd360e11b145b8061047857506001600160e01b03198216635b5e139f60e01b145b8061049357506001600160e01b0319821663780e9d6360e01b145b806104a257506104a282610c6d565b92915050565b600980546104b590611d0d565b80601f01602080910402602001604051908101604052809291908181526020018280546104e190611d0d565b801561052e5780601f106105035761010080835404028352916020019161052e565b820191906000526020600020905b81548152906001019060200180831161051157829003601f168201915b505050505081565b6000818152600360205260408120546001600160a01b03166105925760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6105b83382610c92565b6106045760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f72000000006044820152606401610589565b600081815260056020526040902080546001600160a01b0319166001600160a01b038416908117909155819061063982610857565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61067d838383610ced565b505050565b60008115801561069a5750610696836108b4565b6001145b6106d65760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610589565b50506001600160a01b03166000908152600b602052604090205490565b60606001805461070290611d0d565b80601f016020809104026020016040519081016040528092919081815260200182805461072e90611d0d565b801561077b5780601f106107505761010080835404028352916020019161077b565b820191906000526020600020905b81548152906001019060200180831161075e57829003601f168201915b5050505050905090565b61067d838383604051806020016040528060008152506109f2565b60006107ab82610857565b90506001600160a01b03811633146107d55760405162461bcd60e51b815260040161058990611d48565b6107de82610f4f565b5050565b600e5460009082106108265760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610589565b600e828154811061083957610839611d6b565b90600052602060002001549050919050565b60006104a23383610f61565b6000818152600360205260409020546001600160a01b0316806108af5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610589565b919050565b60006001600160a01b03821661090c5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2061646472657373206e6f742076616c6964206f776e6572000000006044820152606401610589565b506001600160a01b031660009081526004602052604090205490565b600a80546104b590611d0d565b600754600090600160a81b900460ff161561097c5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610589565b6104a23383610fb0565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6109fd848484610ced565b610a098484848461107e565b610a4a5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610589565b50505050565b600754600160a81b900460ff1615610a945760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610589565b610a9e3382610f61565b8214610abc5760405162461bcd60e51b815260040161058990611d48565b61067d3382610fb0565b60075461010090046001600160a01b03163314610af55760405162461bcd60e51b815260040161058990611d48565b600754610b0c90600160a81b900460ff161561112d565b565b6000818152600360205260409020546060906001600160a01b0316610b6a5760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b6044820152606401610589565b60405180604001604052806007815260200166697066733a2f2f60c81b815250610ba6600d600085815260200190815260200160002054611184565b604051602001610bb7929190611d81565b6040516020818303038152906040529050919050565b60075461010090046001600160a01b03163314610bfc5760405162461bcd60e51b815260040161058990611d48565b610c05816112c2565b50565b610c346040518060400160405280600981526020016813dc195b909bdd5b9960ba1b815250600161131c565b610c3d82611384565b8351610c509060099060208701906118f0565b508251610c6490600a9060208601906118f0565b50600855505050565b60006001600160e01b031982166398396bd360e01b14806104a257506104a2826113e1565b600080610c9e83610857565b9050836001600160a01b0316816001600160a01b03161480610ce557506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b80610cf83382611406565b610d445760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f766564000000006044820152606401610589565b610d4d82610857565b6001600160a01b0316846001600160a01b031614610d9e5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b6044820152606401610589565b6001600160a01b038416610df45760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f20616464726573730000000000006044820152606401610589565b6001600160a01b038316610e4a5760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f206164647265737300000000000000006044820152606401610589565b610e5584848461143d565b600082815260056020526040902080546001600160a01b03191690556001600160a01b0384811690841614610f08576001600160a01b0384166000908152600460205260408120805460019290610ead908490611dc6565b90915550506001600160a01b0383166000908152600460205260408120805460019290610edb908490611ddd565b9091555050600082815260036020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b610f588161149d565b610c05816115c0565b60008183604051602001610f9192919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209392505050565b600060085460001480610fc65750600854600e54105b6110075760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606401610589565b611010836108b4565b1561105d5760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206d696e746564206f7220636c61696d6564000000000000006044820152606401610589565b6110678383610f61565b905061107483828461168b565b6104a28382611712565b60006001600160a01b0384163b15806111245750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906110c69033908a9089908990600401611df5565b602060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111189190611e32565b6001600160e01b031916145b95945050505050565b6007805460ff60a81b1916600160a81b83151581029190911791829055604051339260ff929004919091161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b60408051603480825260608281019093526000919060208201818036833701905050905060fd83901c7f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363781602081106111df576111df611d6b565b1a60f81b826000815181106111f6576111f6611d6b565b60200101906001600160f81b031916908160001a90535060029390931b9260335b8015611298577f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363785601f166020811061125257611252611d6b565b1a60f81b83828151811061126857611268611d6b565b60200101906001600160f81b031916908160001a90535060059490941c938061129081611e4f565b915050611217565b50816040516020016112aa9190611e66565b60405160208183030381529060405292505050919050565b600780546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff161561135c5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b6044820152606401610589565b6000805460ff19166001908117909155825161137d919060208501906118f0565b5060025550565b60075460ff16156113cb5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b6044820152606401610589565b6007805460ff19166001179055610c05816112c2565b60006307f5828d60e41b6001600160e01b0319831614806104a257506104a28261189b565b60006114128383610c92565b806114365750826001600160a01b031661142b83610536565b6001600160a01b0316145b9392505050565b6001600160a01b038316158061145a57506001600160a01b038216155b61067d5760405162461bcd60e51b8152602060048201526014602482015273139bdb881d1c985b9cd9995c98589b194813919560621b6044820152606401610589565b60006114a882610857565b6001600160a01b0381166000908152600c6020526040812054600e54929350916114d490600190611dc6565b905080821461156257600e81815481106114f0576114f0611d6b565b9060005260206000200154600e838154811061150e5761150e611d6b565b906000526020600020018190555081600c6000611547600e858154811061153757611537611d6b565b9060005260206000200154610857565b6001600160a01b031681526020810191909152604001600020555b600e80548061157357611573611e95565b600082815260208082208301600019908101839055909201909255948152600d855260408082208290556001600160a01b039094168152600c8552838120819055600b9094525050812055565b60006115cb82610857565b6001600160a01b0381166000908152600460205260409020549091506115f3576115f3611eab565b6001600160a01b038116600090815260046020526040812080546001929061161c908490611dc6565b9091555050600082815260056020908152604080832080546001600160a01b031990811690915560039092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600e8054600181810183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9091018490556001600160a01b0385166000908152600b6020526040902084905590546116e49190611dc6565b6001600160a01b039093166000908152600c6020908152604080832095909555928152600d90925291902055565b6001600160a01b03821661175f5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b6044820152606401610589565b6000818152600360205260409020546001600160a01b0316156117bb5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b6044820152606401610589565b6001600160a01b03821660009081526004602052604081208054600192906117e4908490611ddd565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461185a600083836040518060200160405280600081525061107e565b6107de5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610589565b60006380ac58cd60e01b6001600160e01b0319831614806104a257506104a28260006001600160e01b03198216631fc9136f60e11b14806104a257506001600160e01b031982166301ffc9a760e01b146104a2565b8280546118fc90611d0d565b90600052602060002090601f01602090048101928261191e5760008555611964565b82601f1061193757805160ff1916838001178555611964565b82800160010185558215611964579182015b82811115611964578251825591602001919060010190611949565b50611970929150611974565b5090565b5b808211156119705760008155600101611975565b6001600160e01b031981168114610c0557600080fd5b6000602082840312156119b157600080fd5b813561143681611989565b60005b838110156119d75781810151838201526020016119bf565b83811115610a4a5750506000910152565b60008151808452611a008160208601602086016119bc565b601f01601f19169290920160200192915050565b60208152600061143660208301846119e8565b600060208284031215611a3957600080fd5b5035919050565b80356001600160a01b03811681146108af57600080fd5b60008060408385031215611a6a57600080fd5b611a7383611a40565b946020939093013593505050565b600080600060608486031215611a9657600080fd5b611a9f84611a40565b9250611aad60208501611a40565b9150604084013590509250925092565b600060208284031215611acf57600080fd5b61143682611a40565b60008060408385031215611aeb57600080fd5b611af483611a40565b915060208301358015158114611b0957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611b4557611b45611b14565b604051601f8501601f19908116603f01168101908282118183101715611b6d57611b6d611b14565b81604052809350858152868686011115611b8657600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215611bb657600080fd5b611bbf85611a40565b9350611bcd60208601611a40565b925060408501359150606085013567ffffffffffffffff811115611bf057600080fd5b8501601f81018713611c0157600080fd5b611c1087823560208401611b2a565b91505092959194509250565b60008060408385031215611c2f57600080fd5b50508035926020909101359150565b60008060408385031215611c5157600080fd5b611c5a83611a40565b9150611c6860208401611a40565b90509250929050565b600082601f830112611c8257600080fd5b61143683833560208501611b2a565b60008060008060808587031215611ca757600080fd5b843567ffffffffffffffff80821115611cbf57600080fd5b611ccb88838901611c71565b95506020870135915080821115611ce157600080fd5b50611cee87828801611c71565b935050611cfd60408601611a40565b9396929550929360600135925050565b600181811c90821680611d2157607f821691505b60208210811415611d4257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60008351611d938184602088016119bc565b835190830190611da78183602088016119bc565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611dd857611dd8611db0565b500390565b60008219821115611df057611df0611db0565b500190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e28908301846119e8565b9695505050505050565b600060208284031215611e4457600080fd5b815161143681611989565b600081611e5e57611e5e611db0565b506000190190565b666261666b72656960c81b815260008251611e888160078501602087016119bc565b9190910160070192915050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052600160045260246000fdfea264697066735822122050bfcbfc07997daea305c8eb8f2adf8a89d439002afdb9cf66f80b33991900d764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "OpenBound smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(string,string,address,uint256)": {
        "notice": "IOpenBound"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165"
      },
      "tokenURI(uint256)": {
        "notice": "IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "IERC721Enumerable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11130,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_once",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11132,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_template",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11134,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11445,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11449,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11453,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11459,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11232,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 11234,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_owner",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12726,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_paused",
        "offset": 21,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 12822,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "maxSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12824,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 12826,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 12830,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenOfOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12834,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenIndexOfOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12838,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_cidOfToken",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12841,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokens",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}