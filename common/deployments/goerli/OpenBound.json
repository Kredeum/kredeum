{
  "address": "0xCA230531EC03D2879Cbd285F855D9D9A53Ed0B67",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecker",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getCID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "getMyTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "myTokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cid",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff6dee5e90401b2d4094b34d14bb84bc97e8d203165d468b811b5237d12fe496",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xCA230531EC03D2879Cbd285F855D9D9A53Ed0B67",
    "transactionIndex": 15,
    "gasUsed": "2024386",
    "logsBloom": "0x
    "blockHash": "0x91fd98c8c023767a651cedec36a5da3f9838cd856be2c7efa9fabcb2931b462e",
    "transactionHash": "0xff6dee5e90401b2d4094b34d14bb84bc97e8d203165d468b811b5237d12fe496",
    "logs": [],
    "blockNumber": 7352329,
    "cumulativeGasUsed": "9626810",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "f997d8441d9ebfecfbd0af11467bd0ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecker\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getCID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"getMyTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"OpenBound smartcontract limited to one nft per address\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(string,string,address,uint256)\":{\"notice\":\"IOpenBound\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165\"},\"tokenURI(uint256)\":{\"notice\":\"IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"IERC721Enumerable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/OpenBound.sol\":\"OpenBound\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _setOwner(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7f8017535a61cc04597eaaf9220812ef3645647418d73ae0880b72a06cddbf36\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    function approve(address spender, uint256 tokenID) external payable override(IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override(IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external payable override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) external payable override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) public payable override(IERC721) {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return\\n            interfaceId == 0x80ac58cd || // = type(IERC721).interfaceId\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override(IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID) public view override(IERC721) returns (address owner) {\\n        require((owner = _owners[tokenID]) != address(0), \\\"Invalid token ID\\\");\\n    }\\n\\n    function getApproved(uint256 tokenID) public view override(IERC721) returns (address) {\\n        require(_exists(tokenID), \\\"Invalid token ID\\\");\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(\\n        address to,\\n        string memory,\\n        uint256 tokenID\\n    ) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(!_exists(tokenID), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private {\\n        _transferFrom(from, to, tokenID);\\n\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) private onlyTokenOwnerOrApproved(tokenID) {\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual {}\\n\\n    function _exists(uint256 tokenID) internal view returns (bool exists) {\\n        exists = _owners[tokenID] != address(0);\\n    }\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID) internal view virtual returns (bool ownerOrOperator) {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID) private view returns (bool ownerOrApproved) {\\n        ownerOrApproved = (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n\\n    function _isERC721Receiver(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private returns (bool) {\\n        return\\n            to.code.length == 0 ||\\n            IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data) ==\\n            IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xf38de15a653fd61846a17613a8481012e713c43a0efc0864993556a22582cdc1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool private _openCloneableInitialized;\\n    string private _template;\\n    uint256 private _version;\\n\\n    function getTemplate() external view override(IOpenCloneable) returns (string memory) {\\n        return _template;\\n    }\\n\\n    function getVersion() external view override(IOpenCloneable) returns (uint256) {\\n        return _version;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(_openCloneableInitialized == false, \\\"Only once!\\\");\\n        _openCloneableInitialized = true;\\n\\n        _template = template_;\\n        _version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0x95319280953990e2d64e9d6be40953ac33996efc97c1e2e0a4e576a63fac682d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenPauseable \\u2013\\u2013 IOpenPauseable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override(IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override(IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb4fb38f26ab8ceb546ac9fb91af6f8292a053708fa798076f768c79025e71a1a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    function checkSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        public\\n        view\\n        returns (bool[] memory interfaceIdsChecker)\\n    {\\n        interfaceIdsChecker = new bool[](interfaceIds.length);\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            interfaceIdsChecker[i] = IERC165(account).supportsInterface(interfaceIds[i]);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa0b683c138c50c8d2ea7604dcb068b02598ad922af31b56e9c6f12782ed019e7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x20b9c6d46e0d1c375cf965480c3ffc6805eb5fa8811a1e755ecddaf150774e40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenChecker {\\n    function checkSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x0ba63f5b22b78e8695bc384ca71cf416e9c1078c3f3a8e329841a1ba7b91e349\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function getTemplate() external view returns (string memory);\\n\\n    function getVersion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x152901133233a3b58d7f9391a4c9fe920b899d1b720f473f8b9bc04790fb760d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/libraries/Bafkrey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Bafkrey {\\n    bytes32 private constant _BASE32_SYMBOLS = \\\"abcdefghijklmnopqrstuvwxyz234567\\\";\\n\\n    /// Transfom uint256 to IPFS CID V1 base32 raw (starting with \\\"bafkrei\\\")\\n    function uint256ToCid(uint256 id) internal pure returns (string memory) {\\n        // IPFS CID V1 base32 raw \\\"bafrei...\\\" => 5 bits => uint32\\n        // uint256 id  = 256 bits = 1 bit + 51 uint32 = 1 + 51 * 5 = 256\\n        // 00 added right =>\\n        // uint8 + uint256 + 00 = 258 bits = uint8 + 50 uint32 + (3 bits + 00) = uint8 + 51 uint32 = 3 + 51 * 5 = 258\\n\\n        bytes memory buffer = new bytes(52);\\n        uint8 high3 = uint8(id >> 253);\\n        buffer[0] = _BASE32_SYMBOLS[high3 & 0x1f];\\n\\n        id <<= 2;\\n        for (uint256 i = 51; i > 0; i--) {\\n            buffer[i] = _BASE32_SYMBOLS[id & 0x1f];\\n            id >>= 5;\\n        }\\n\\n        return string(abi.encodePacked(\\\"bafkrei\\\", buffer));\\n    }\\n}\\n\",\"keccak256\":\"0xc2ecc036f6b79a8ab8642fa3a869b20008158d0c6cc13e4829283a5841f53522\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32589afb6590b5214f04bba67d1ee4b5dba7b83261504067789e2b278fb5f395\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/templates/OpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//  OpenERC165 (supports)\\n//      |\\n//      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//      |                 |             |             |\\n//  OpenERC721 (NFT)  OpenERC173  OpenChecker  OpenCloneable\\n//      |             (ownable)         |             |\\n//      |                 |             |             |\\n//      |                 |             |             |\\n//      |            OpenPauseable      |             |\\n//      |                 |             |             |\\n//      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//      |\\n//  OpenBound --- IOpenBound --- IERC721Enumerable --- IERC721Metadata\\n//\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/libraries/Bafkrey.sol\\\";\\n\\nimport \\\"../interfaces/IOpenBound.sol\\\";\\nimport {IOpenNFTs as IOpenNFTsOld} from \\\"../interfaces/IOpenNFTs.sol\\\";\\n\\n/// @title OpenBound smartcontract\\n/// limited to one nft per address\\ncontract OpenBound is\\n    IOpenBound,\\n    IERC721Enumerable,\\n    IERC721Metadata,\\n    OpenCloneable,\\n    OpenChecker,\\n    OpenPauseable,\\n    OpenERC721\\n{\\n    uint256 public maxSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    mapping(address => uint256) internal _tokenOfOwner;\\n    mapping(address => uint256) internal _tokenIndexOfOwner;\\n    mapping(uint256 => uint256) internal _cidOfToken;\\n    uint256[] internal _tokens;\\n\\n    string private constant _BASE_URI = \\\"ipfs://\\\";\\n\\n    /// IOpenBound\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 maxSupply_\\n    ) external override(IOpenBound) {\\n        OpenCloneable._initialize(\\\"OpenBound\\\", 1);\\n        OpenERC173._initialize(owner_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        maxSupply = maxSupply_;\\n    }\\n\\n    function mint(uint256 cid) external override(IOpenBound) onlyWhenNotPaused returns (uint256 tokenID) {\\n        tokenID = _mint(msg.sender, cid);\\n    }\\n\\n    function claim(uint256 tokenID, uint256 cid) external override(IOpenBound) onlyWhenNotPaused {\\n        require(tokenID == _tokenID(msg.sender, cid), \\\"Not owner\\\");\\n        _mint(msg.sender, cid);\\n    }\\n\\n    function burn(uint256 tokenID) external override(IOpenBound) {\\n        address from = ownerOf(tokenID);\\n        require(from == msg.sender, \\\"Not owner\\\");\\n\\n        _burn(tokenID);\\n    }\\n\\n    function getMyTokenID(uint256 cid) external view override(IOpenBound) returns (uint256 myTokenID) {\\n        myTokenID = _tokenID(msg.sender, cid);\\n    }\\n\\n    function getCID(uint256 tokenID) external view override(IOpenBound) returns (uint256 cid) {\\n        cid = _cidOfToken[tokenID];\\n    }\\n\\n    /// IERC721Enumerable\\n    function totalSupply() external view override(IERC721Enumerable) returns (uint256 tokensLength) {\\n        tokensLength = _tokens.length;\\n    }\\n\\n    function tokenOfOwnerByIndex(address tokenOwner, uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256 tokenID)\\n    {\\n        require(index == 0 && balanceOf(tokenOwner) == 1, \\\"Invalid index\\\");\\n\\n        tokenID = _tokenOfOwner[tokenOwner];\\n    }\\n\\n    function tokenByIndex(uint256 index) external view override(IERC721Enumerable) returns (uint256 tokenID) {\\n        require(index < _tokens.length, \\\"Invalid index\\\");\\n\\n        tokenID = _tokens[index];\\n    }\\n\\n    /// IERC721Metadata\\n    function tokenURI(uint256 tokenID) external view override(IERC721Metadata) returns (string memory) {\\n        require(_exists(tokenID), \\\"NFT doesn't exists\\\");\\n\\n        return _tokenURI(_cidOfToken[tokenID]);\\n    }\\n\\n    function getTokenID(address addr, uint256 cid) external pure override(IOpenBound) returns (uint256 tokenID) {\\n        tokenID = _tokenID(addr, cid);\\n    }\\n\\n    /// IERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(OpenPauseable, OpenCloneable, OpenERC721, OpenChecker)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenBound).interfaceId ||\\n            interfaceId == type(IOpenNFTsOld).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, uint256 cid) internal returns (uint256 tokenID) {\\n        require((maxSupply == 0) || _tokens.length < maxSupply, \\\"Max supply reached\\\");\\n        require(balanceOf(to) == 0, \\\"Already minted or claimed\\\");\\n\\n        tokenID = _tokenID(to, cid);\\n\\n        _tokens.push(tokenID);\\n        _tokenOfOwner[to] = tokenID;\\n        _tokenIndexOfOwner[to] = _tokens.length - 1;\\n        _cidOfToken[tokenID] = cid;\\n\\n        _mint(to, _tokenURI(cid), tokenID);\\n    }\\n\\n    function _mint(\\n        address to,\\n        string memory newTokenURI,\\n        uint256 tokenID\\n    ) internal override(OpenERC721) {\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal override(OpenERC721) {\\n        address from = ownerOf(tokenID);\\n        uint256 index = _tokenIndexOfOwner[from];\\n        uint256 lastIndex = _tokens.length - 1;\\n\\n        if (index != lastIndex) {\\n            _tokens[index] = _tokens[lastIndex];\\n            _tokenIndexOfOwner[ownerOf(_tokens[lastIndex])] = index;\\n        }\\n        _tokens.pop();\\n\\n        delete _cidOfToken[tokenID];\\n        delete _tokenIndexOfOwner[from];\\n        delete _tokenOfOwner[from];\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _tokenID(address addr, uint256 cid) internal pure returns (uint256 tokenID) {\\n        tokenID = uint256(keccak256(abi.encodePacked(cid, addr)));\\n    }\\n\\n    function _tokenURI(uint256 cid) internal pure returns (string memory) {\\n        return string(abi.encodePacked(_BASE_URI, Bafkrey.uint256ToCid(cid)));\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 // tokenId\\n    ) internal pure override {\\n        require(from == address(0) || to == address(0), \\\"Non transferable NFT\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x30eb68d07c79d3fec6c431d30c4ffa1e5dc187931a9e0e9bcadc7f967fdd091f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506123a9806100206000396000f3fe6080604052600436106101d85760003560e01c80635fc83aae11610102578063b88d4fde11610095578063d5abeb0111610064578063d5abeb0114610529578063e985e9c51461053f578063f2fde38b14610588578063f542033f146105a857600080fd5b8063b88d4fde146104c1578063c3490263146104d4578063c4ae3168146104f4578063c87b56dd1461050957600080fd5b8063913a2ffe116100d1578063913a2ffe1461043f57806395d89b411461046c578063a0712d6814610481578063a22cb465146104a157600080fd5b80635fc83aae146103af5780636352211e146103dc57806370a08231146103fc5780638da5cb5b1461041c57600080fd5b80632f745c591161017a57806342966c681161014957806342966c68146103305780634f6ccce7146103505780635615f604146103705780635c975abb1461039057600080fd5b80632f745c59146102c8578063321c48f2146102e85780633cc1c7e0146102fd57806342842e0e1461031d57600080fd5b8063095ea7b3116101b6578063095ea7b31461026c5780630d8e6e2c1461028157806318160ddd146102a057806323b872dd146102b557600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611cf2565b6105c8565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b50610227610643565b6040516102099190611d67565b34801561024057600080fd5b5061025461024f366004611d7a565b6106d1565b6040516001600160a01b039091168152602001610209565b61027f61027a366004611daa565b610749565b005b34801561028d57600080fd5b506002545b604051908152602001610209565b3480156102ac57600080fd5b50600e54610292565b61027f6102c3366004611dd4565b61080d565b3480156102d457600080fd5b506102926102e3366004611daa565b61081d565b3480156102f457600080fd5b5061022761088e565b34801561030957600080fd5b50610292610318366004611daa565b610920565b61027f61032b366004611dd4565b610933565b34801561033c57600080fd5b5061027f61034b366004611d7a565b61094e565b34801561035c57600080fd5b5061029261036b366004611d7a565b610990565b34801561037c57600080fd5b5061029261038b366004611d7a565b6109f9565b34801561039c57600080fd5b50600354600160a81b900460ff166101fd565b3480156103bb57600080fd5b506103cf6103ca366004611e57565b610a05565b6040516102099190611f1c565b3480156103e857600080fd5b506102546103f7366004611d7a565b610b39565b34801561040857600080fd5b50610292610417366004611f62565b610b96565b34801561042857600080fd5b5060035461010090046001600160a01b0316610254565b34801561044b57600080fd5b5061029261045a366004611d7a565b6000908152600d602052604090205490565b34801561047857600080fd5b50610227610c01565b34801561048d57600080fd5b5061029261049c366004611d7a565b610c0e565b3480156104ad57600080fd5b5061027f6104bc366004611f8b565b610c5f565b61027f6104cf36600461201a565b610ccb565b3480156104e057600080fd5b5061027f6104ef366004612096565b610d29565b34801561050057600080fd5b5061027f610d9f565b34801561051557600080fd5b50610227610524366004611d7a565b610de7565b34801561053557600080fd5b5061029260085481565b34801561054b57600080fd5b506101fd61055a3660046120b8565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561059457600080fd5b5061027f6105a3366004611f62565b610e5b565b3480156105b457600080fd5b5061027f6105c336600461210b565b610e96565b60006001600160e01b031982166317812f2360e11b14806105f857506001600160e01b0319821662f7235960e21b145b8061061357506001600160e01b03198216635b5e139f60e01b145b8061062e57506001600160e01b0319821663780e9d6360e01b145b8061063d575061063d82610efb565b92915050565b6009805461065090612187565b80601f016020809104026020016040519081016040528092919081815260200182805461067c90612187565b80156106c95780601f1061069e576101008083540402835291602001916106c9565b820191906000526020600020905b8154815290600101906020018083116106ac57829003601f168201915b505050505081565b6000818152600460205260408120546001600160a01b031661072d5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6107533382610f20565b61079f5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f72000000006044820152606401610724565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107d482610b39565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610818838383610f7b565b505050565b600081158015610835575061083183610b96565b6001145b6108715760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610724565b50506001600160a01b03166000908152600b602052604090205490565b60606001805461089d90612187565b80601f01602080910402602001604051908101604052809291908181526020018280546108c990612187565b80156109165780601f106108eb57610100808354040283529160200191610916565b820191906000526020600020905b8154815290600101906020018083116108f957829003601f168201915b5050505050905090565b600061092c83836111dd565b9392505050565b6108188383836040518060200160405280600081525061122c565b600061095982610b39565b90506001600160a01b03811633146109835760405162461bcd60e51b8152600401610724906121c2565b61098c82611284565b5050565b600e5460009082106109d45760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610724565b600e82815481106109e7576109e76121e5565b90600052602060002001549050919050565b600061063d33836111dd565b6060815167ffffffffffffffff811115610a2157610a21611e10565b604051908082528060200260200182016040528015610a4a578160200160208202803683370190505b50905060005b8251811015610b3257836001600160a01b03166301ffc9a7848381518110610a7a57610a7a6121e5565b60200260200101516040518263ffffffff1660e01b8152600401610aae91906001600160e01b031991909116815260200190565b60206040518083038186803b158015610ac657600080fd5b505afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe91906121fb565b828281518110610b1057610b106121e5565b9115156020928302919091019091015280610b2a8161222e565b915050610a50565b5092915050565b6000818152600460205260409020546001600160a01b031680610b915760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610724565b919050565b60006001600160a01b038216610be55760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b6044820152606401610724565b506001600160a01b031660009081526005602052604090205490565b600a805461065090612187565b600354600090600160a81b900460ff1615610c555760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610724565b61063d33836113ab565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cd6848484610f7b565b610ce2848484846114fa565b610d235760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610724565b50505050565b600354600160a81b900460ff1615610d6d5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610724565b610d7733826111dd565b8214610d955760405162461bcd60e51b8152600401610724906121c2565b61081833826113ab565b60035461010090046001600160a01b03163314610dce5760405162461bcd60e51b8152600401610724906121c2565b600354610de590600160a81b900460ff16156115a9565b565b6000818152600460205260409020546060906001600160a01b0316610e435760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b6044820152606401610724565b6000828152600d602052604090205461063d90611600565b60035461010090046001600160a01b03163314610e8a5760405162461bcd60e51b8152600401610724906121c2565b610e9381611652565b50565b610ec26040518060400160405280600981526020016813dc195b909bdd5b9960ba1b81525060016116ac565b610ecb82611714565b8351610ede906009906020870190611c43565b508251610ef290600a906020860190611c43565b50600855505050565b60006380ac58cd60e01b6001600160e01b03198316148061063d575061063d82611771565b600080610f2c83610b39565b9050836001600160a01b0316816001600160a01b03161480610f7357506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b80610f863382611796565b610fd25760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f766564000000006044820152606401610724565b610fdb82610b39565b6001600160a01b0316846001600160a01b03161461102c5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b6044820152606401610724565b6001600160a01b0384166110825760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f20616464726573730000000000006044820152606401610724565b6001600160a01b0383166110d85760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f206164647265737300000000000000006044820152606401610724565b6110e38484846117cc565b600082815260066020526040902080546001600160a01b03191690556001600160a01b0384811690841614611196576001600160a01b038416600090815260056020526040812080546001929061113b908490612249565b90915550506001600160a01b0383166000908152600560205260408120805460019290611169908490612260565b9091555050600082815260046020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000818360405160200161120d92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209392505050565b611237848484610f7b565b611243848484846114fa565b610d235760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b6044820152606401610724565b600061128f82610b39565b6001600160a01b0381166000908152600c6020526040812054600e54929350916112bb90600190612249565b905080821461134957600e81815481106112d7576112d76121e5565b9060005260206000200154600e83815481106112f5576112f56121e5565b906000526020600020018190555081600c600061132e600e858154811061131e5761131e6121e5565b9060005260206000200154610b39565b6001600160a01b031681526020810191909152604001600020555b600e80548061135a5761135a612278565b600082815260208082208301600019908101839055909201909255858252600d815260408083208390556001600160a01b0386168352600c8252808320839055600b909152812055610d238461182c565b6000600854600014806113c15750600854600e54105b6114025760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606401610724565b61140b83610b96565b156114585760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206d696e746564206f7220636c61696d6564000000000000006044820152606401610724565b61146283836111dd565b600e8054600181810183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9091018390556001600160a01b0386166000908152600b6020526040902083905590549192506114bd91612249565b6001600160a01b0384166000908152600c6020908152604080832093909355838252600d90522082905561063d836114f484611600565b836118f7565b60006001600160a01b0384163b15806115a05750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906115429033908a908990899060040161228e565b602060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159491906122cb565b6001600160e01b031916145b95945050505050565b6003805460ff60a81b1916600160a81b83151581029190911791829055604051339260ff929004919091161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b606060405180604001604052806007815260200166697066733a2f2f60c81b81525061162b83611902565b60405160200161163c9291906122e8565b6040516020818303038152906040529050919050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff16156116ec5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b6044820152606401610724565b6000805460ff19166001908117909155825161170d91906020850190611c43565b5060025550565b60035460ff161561175b5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b6044820152606401610724565b6003805460ff19166001179055610e9381611652565b60006001600160e01b031982166398396bd360e01b148061063d575061063d82611a40565b60006117a28383610f20565b8061092c5750826001600160a01b03166117bb836106d1565b6001600160a01b0316149392505050565b6001600160a01b03831615806117e957506001600160a01b038216155b6108185760405162461bcd60e51b8152602060048201526014602482015273139bdb881d1c985b9cd9995c98589b194813919560621b6044820152606401610724565b600061183782610b39565b6001600160a01b03811660009081526005602052604090205490915061185f5761185f612317565b6001600160a01b0381166000908152600560205260408120805460019290611888908490612249565b9091555050600082815260066020908152604080832080546001600160a01b031990811690915560049092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610818838383611a65565b60408051603480825260608281019093526000919060208201818036833701905050905060fd83901c7f6162636465666768696a6b6c6d6e6f707172737475767778797a323334353637816020811061195d5761195d6121e5565b1a60f81b82600081518110611974576119746121e5565b60200101906001600160f81b031916908160001a90535060029390931b9260335b8015611a16577f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363785601f16602081106119d0576119d06121e5565b1a60f81b8382815181106119e6576119e66121e5565b60200101906001600160f81b031916908160001a90535060059490941c9380611a0e8161232d565b915050611995565b5081604051602001611a289190612344565b60405160208183030381529060405292505050919050565b60006307f5828d60e41b6001600160e01b03198316148061063d575061063d82611bee565b6001600160a01b038316611ab25760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b6044820152606401610724565b6000818152600460205260409020546001600160a01b031615611b0e5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b6044820152606401610724565b6001600160a01b0383166000908152600560205260408120805460019290611b37908490612260565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611bad60008483604051806020016040528060008152506114fa565b6108185760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610724565b60006001600160e01b03198216632fe41d5760e11b148061063d575061063d8260006001600160e01b03198216631fc9136f60e11b148061063d57506001600160e01b031982166301ffc9a760e01b1461063d565b828054611c4f90612187565b90600052602060002090601f016020900481019282611c715760008555611cb7565b82601f10611c8a57805160ff1916838001178555611cb7565b82800160010185558215611cb7579182015b82811115611cb7578251825591602001919060010190611c9c565b50611cc3929150611cc7565b5090565b5b80821115611cc35760008155600101611cc8565b6001600160e01b031981168114610e9357600080fd5b600060208284031215611d0457600080fd5b813561092c81611cdc565b60005b83811015611d2a578181015183820152602001611d12565b83811115610d235750506000910152565b60008151808452611d53816020860160208601611d0f565b601f01601f19169290920160200192915050565b60208152600061092c6020830184611d3b565b600060208284031215611d8c57600080fd5b5035919050565b80356001600160a01b0381168114610b9157600080fd5b60008060408385031215611dbd57600080fd5b611dc683611d93565b946020939093013593505050565b600080600060608486031215611de957600080fd5b611df284611d93565b9250611e0060208501611d93565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e4f57611e4f611e10565b604052919050565b60008060408385031215611e6a57600080fd5b611e7383611d93565b915060208084013567ffffffffffffffff80821115611e9157600080fd5b818601915086601f830112611ea557600080fd5b813581811115611eb757611eb7611e10565b8060051b9150611ec8848301611e26565b8181529183018401918481019089841115611ee257600080fd5b938501935b83851015611f0c5784359250611efc83611cdc565b8282529385019390850190611ee7565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611f56578351151583529284019291840191600101611f38565b50909695505050505050565b600060208284031215611f7457600080fd5b61092c82611d93565b8015158114610e9357600080fd5b60008060408385031215611f9e57600080fd5b611fa783611d93565b91506020830135611fb781611f7d565b809150509250929050565b600067ffffffffffffffff831115611fdc57611fdc611e10565b611fef601f8401601f1916602001611e26565b905082815283838301111561200357600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561203057600080fd5b61203985611d93565b935061204760208601611d93565b925060408501359150606085013567ffffffffffffffff81111561206a57600080fd5b8501601f8101871361207b57600080fd5b61208a87823560208401611fc2565b91505092959194509250565b600080604083850312156120a957600080fd5b50508035926020909101359150565b600080604083850312156120cb57600080fd5b6120d483611d93565b91506120e260208401611d93565b90509250929050565b600082601f8301126120fc57600080fd5b61092c83833560208501611fc2565b6000806000806080858703121561212157600080fd5b843567ffffffffffffffff8082111561213957600080fd5b612145888389016120eb565b9550602087013591508082111561215b57600080fd5b50612168878288016120eb565b93505061217760408601611d93565b9396929550929360600135925050565b600181811c9082168061219b57607f821691505b602082108114156121bc57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561220d57600080fd5b815161092c81611f7d565b634e487b7160e01b600052601160045260246000fd5b600060001982141561224257612242612218565b5060010190565b60008282101561225b5761225b612218565b500390565b6000821982111561227357612273612218565b500190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122c190830184611d3b565b9695505050505050565b6000602082840312156122dd57600080fd5b815161092c81611cdc565b600083516122fa818460208801611d0f565b83519083019061230e818360208801611d0f565b01949350505050565b634e487b7160e01b600052600160045260246000fd5b60008161233c5761233c612218565b506000190190565b666261666b72656960c81b815260008251612366816007850160208701611d0f565b919091016007019291505056fea264697066735822122024b354c7a75f0e6ccc85cf2c82ab5ca2a53c5c70aa4908b3a17cc3eb8a395bb664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80635fc83aae11610102578063b88d4fde11610095578063d5abeb0111610064578063d5abeb0114610529578063e985e9c51461053f578063f2fde38b14610588578063f542033f146105a857600080fd5b8063b88d4fde146104c1578063c3490263146104d4578063c4ae3168146104f4578063c87b56dd1461050957600080fd5b8063913a2ffe116100d1578063913a2ffe1461043f57806395d89b411461046c578063a0712d6814610481578063a22cb465146104a157600080fd5b80635fc83aae146103af5780636352211e146103dc57806370a08231146103fc5780638da5cb5b1461041c57600080fd5b80632f745c591161017a57806342966c681161014957806342966c68146103305780634f6ccce7146103505780635615f604146103705780635c975abb1461039057600080fd5b80632f745c59146102c8578063321c48f2146102e85780633cc1c7e0146102fd57806342842e0e1461031d57600080fd5b8063095ea7b3116101b6578063095ea7b31461026c5780630d8e6e2c1461028157806318160ddd146102a057806323b872dd146102b557600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611cf2565b6105c8565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b50610227610643565b6040516102099190611d67565b34801561024057600080fd5b5061025461024f366004611d7a565b6106d1565b6040516001600160a01b039091168152602001610209565b61027f61027a366004611daa565b610749565b005b34801561028d57600080fd5b506002545b604051908152602001610209565b3480156102ac57600080fd5b50600e54610292565b61027f6102c3366004611dd4565b61080d565b3480156102d457600080fd5b506102926102e3366004611daa565b61081d565b3480156102f457600080fd5b5061022761088e565b34801561030957600080fd5b50610292610318366004611daa565b610920565b61027f61032b366004611dd4565b610933565b34801561033c57600080fd5b5061027f61034b366004611d7a565b61094e565b34801561035c57600080fd5b5061029261036b366004611d7a565b610990565b34801561037c57600080fd5b5061029261038b366004611d7a565b6109f9565b34801561039c57600080fd5b50600354600160a81b900460ff166101fd565b3480156103bb57600080fd5b506103cf6103ca366004611e57565b610a05565b6040516102099190611f1c565b3480156103e857600080fd5b506102546103f7366004611d7a565b610b39565b34801561040857600080fd5b50610292610417366004611f62565b610b96565b34801561042857600080fd5b5060035461010090046001600160a01b0316610254565b34801561044b57600080fd5b5061029261045a366004611d7a565b6000908152600d602052604090205490565b34801561047857600080fd5b50610227610c01565b34801561048d57600080fd5b5061029261049c366004611d7a565b610c0e565b3480156104ad57600080fd5b5061027f6104bc366004611f8b565b610c5f565b61027f6104cf36600461201a565b610ccb565b3480156104e057600080fd5b5061027f6104ef366004612096565b610d29565b34801561050057600080fd5b5061027f610d9f565b34801561051557600080fd5b50610227610524366004611d7a565b610de7565b34801561053557600080fd5b5061029260085481565b34801561054b57600080fd5b506101fd61055a3660046120b8565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561059457600080fd5b5061027f6105a3366004611f62565b610e5b565b3480156105b457600080fd5b5061027f6105c336600461210b565b610e96565b60006001600160e01b031982166317812f2360e11b14806105f857506001600160e01b0319821662f7235960e21b145b8061061357506001600160e01b03198216635b5e139f60e01b145b8061062e57506001600160e01b0319821663780e9d6360e01b145b8061063d575061063d82610efb565b92915050565b6009805461065090612187565b80601f016020809104026020016040519081016040528092919081815260200182805461067c90612187565b80156106c95780601f1061069e576101008083540402835291602001916106c9565b820191906000526020600020905b8154815290600101906020018083116106ac57829003601f168201915b505050505081565b6000818152600460205260408120546001600160a01b031661072d5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6107533382610f20565b61079f5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f72000000006044820152606401610724565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107d482610b39565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610818838383610f7b565b505050565b600081158015610835575061083183610b96565b6001145b6108715760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610724565b50506001600160a01b03166000908152600b602052604090205490565b60606001805461089d90612187565b80601f01602080910402602001604051908101604052809291908181526020018280546108c990612187565b80156109165780601f106108eb57610100808354040283529160200191610916565b820191906000526020600020905b8154815290600101906020018083116108f957829003601f168201915b5050505050905090565b600061092c83836111dd565b9392505050565b6108188383836040518060200160405280600081525061122c565b600061095982610b39565b90506001600160a01b03811633146109835760405162461bcd60e51b8152600401610724906121c2565b61098c82611284565b5050565b600e5460009082106109d45760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610724565b600e82815481106109e7576109e76121e5565b90600052602060002001549050919050565b600061063d33836111dd565b6060815167ffffffffffffffff811115610a2157610a21611e10565b604051908082528060200260200182016040528015610a4a578160200160208202803683370190505b50905060005b8251811015610b3257836001600160a01b03166301ffc9a7848381518110610a7a57610a7a6121e5565b60200260200101516040518263ffffffff1660e01b8152600401610aae91906001600160e01b031991909116815260200190565b60206040518083038186803b158015610ac657600080fd5b505afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe91906121fb565b828281518110610b1057610b106121e5565b9115156020928302919091019091015280610b2a8161222e565b915050610a50565b5092915050565b6000818152600460205260409020546001600160a01b031680610b915760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b6044820152606401610724565b919050565b60006001600160a01b038216610be55760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b6044820152606401610724565b506001600160a01b031660009081526005602052604090205490565b600a805461065090612187565b600354600090600160a81b900460ff1615610c555760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610724565b61063d33836113ab565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cd6848484610f7b565b610ce2848484846114fa565b610d235760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610724565b50505050565b600354600160a81b900460ff1615610d6d5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b6044820152606401610724565b610d7733826111dd565b8214610d955760405162461bcd60e51b8152600401610724906121c2565b61081833826113ab565b60035461010090046001600160a01b03163314610dce5760405162461bcd60e51b8152600401610724906121c2565b600354610de590600160a81b900460ff16156115a9565b565b6000818152600460205260409020546060906001600160a01b0316610e435760405162461bcd60e51b81526020600482015260126024820152714e465420646f65736e27742065786973747360701b6044820152606401610724565b6000828152600d602052604090205461063d90611600565b60035461010090046001600160a01b03163314610e8a5760405162461bcd60e51b8152600401610724906121c2565b610e9381611652565b50565b610ec26040518060400160405280600981526020016813dc195b909bdd5b9960ba1b81525060016116ac565b610ecb82611714565b8351610ede906009906020870190611c43565b508251610ef290600a906020860190611c43565b50600855505050565b60006380ac58cd60e01b6001600160e01b03198316148061063d575061063d82611771565b600080610f2c83610b39565b9050836001600160a01b0316816001600160a01b03161480610f7357506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b80610f863382611796565b610fd25760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f766564000000006044820152606401610724565b610fdb82610b39565b6001600160a01b0316846001600160a01b03161461102c5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b6044820152606401610724565b6001600160a01b0384166110825760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f20616464726573730000000000006044820152606401610724565b6001600160a01b0383166110d85760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f206164647265737300000000000000006044820152606401610724565b6110e38484846117cc565b600082815260066020526040902080546001600160a01b03191690556001600160a01b0384811690841614611196576001600160a01b038416600090815260056020526040812080546001929061113b908490612249565b90915550506001600160a01b0383166000908152600560205260408120805460019290611169908490612260565b9091555050600082815260046020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000818360405160200161120d92919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209392505050565b611237848484610f7b565b611243848484846114fa565b610d235760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b6044820152606401610724565b600061128f82610b39565b6001600160a01b0381166000908152600c6020526040812054600e54929350916112bb90600190612249565b905080821461134957600e81815481106112d7576112d76121e5565b9060005260206000200154600e83815481106112f5576112f56121e5565b906000526020600020018190555081600c600061132e600e858154811061131e5761131e6121e5565b9060005260206000200154610b39565b6001600160a01b031681526020810191909152604001600020555b600e80548061135a5761135a612278565b600082815260208082208301600019908101839055909201909255858252600d815260408083208390556001600160a01b0386168352600c8252808320839055600b909152812055610d238461182c565b6000600854600014806113c15750600854600e54105b6114025760405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606401610724565b61140b83610b96565b156114585760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206d696e746564206f7220636c61696d6564000000000000006044820152606401610724565b61146283836111dd565b600e8054600181810183557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd9091018390556001600160a01b0386166000908152600b6020526040902083905590549192506114bd91612249565b6001600160a01b0384166000908152600c6020908152604080832093909355838252600d90522082905561063d836114f484611600565b836118f7565b60006001600160a01b0384163b15806115a05750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906115429033908a908990899060040161228e565b602060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159491906122cb565b6001600160e01b031916145b95945050505050565b6003805460ff60a81b1916600160a81b83151581029190911791829055604051339260ff929004919091161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b606060405180604001604052806007815260200166697066733a2f2f60c81b81525061162b83611902565b60405160200161163c9291906122e8565b6040516020818303038152906040529050919050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff16156116ec5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b6044820152606401610724565b6000805460ff19166001908117909155825161170d91906020850190611c43565b5060025550565b60035460ff161561175b5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b6044820152606401610724565b6003805460ff19166001179055610e9381611652565b60006001600160e01b031982166398396bd360e01b148061063d575061063d82611a40565b60006117a28383610f20565b8061092c5750826001600160a01b03166117bb836106d1565b6001600160a01b0316149392505050565b6001600160a01b03831615806117e957506001600160a01b038216155b6108185760405162461bcd60e51b8152602060048201526014602482015273139bdb881d1c985b9cd9995c98589b194813919560621b6044820152606401610724565b600061183782610b39565b6001600160a01b03811660009081526005602052604090205490915061185f5761185f612317565b6001600160a01b0381166000908152600560205260408120805460019290611888908490612249565b9091555050600082815260066020908152604080832080546001600160a01b031990811690915560049092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610818838383611a65565b60408051603480825260608281019093526000919060208201818036833701905050905060fd83901c7f6162636465666768696a6b6c6d6e6f707172737475767778797a323334353637816020811061195d5761195d6121e5565b1a60f81b82600081518110611974576119746121e5565b60200101906001600160f81b031916908160001a90535060029390931b9260335b8015611a16577f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363785601f16602081106119d0576119d06121e5565b1a60f81b8382815181106119e6576119e66121e5565b60200101906001600160f81b031916908160001a90535060059490941c9380611a0e8161232d565b915050611995565b5081604051602001611a289190612344565b60405160208183030381529060405292505050919050565b60006307f5828d60e41b6001600160e01b03198316148061063d575061063d82611bee565b6001600160a01b038316611ab25760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b6044820152606401610724565b6000818152600460205260409020546001600160a01b031615611b0e5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b6044820152606401610724565b6001600160a01b0383166000908152600560205260408120805460019290611b37908490612260565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4611bad60008483604051806020016040528060008152506114fa565b6108185760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b6044820152606401610724565b60006001600160e01b03198216632fe41d5760e11b148061063d575061063d8260006001600160e01b03198216631fc9136f60e11b148061063d57506001600160e01b031982166301ffc9a760e01b1461063d565b828054611c4f90612187565b90600052602060002090601f016020900481019282611c715760008555611cb7565b82601f10611c8a57805160ff1916838001178555611cb7565b82800160010185558215611cb7579182015b82811115611cb7578251825591602001919060010190611c9c565b50611cc3929150611cc7565b5090565b5b80821115611cc35760008155600101611cc8565b6001600160e01b031981168114610e9357600080fd5b600060208284031215611d0457600080fd5b813561092c81611cdc565b60005b83811015611d2a578181015183820152602001611d12565b83811115610d235750506000910152565b60008151808452611d53816020860160208601611d0f565b601f01601f19169290920160200192915050565b60208152600061092c6020830184611d3b565b600060208284031215611d8c57600080fd5b5035919050565b80356001600160a01b0381168114610b9157600080fd5b60008060408385031215611dbd57600080fd5b611dc683611d93565b946020939093013593505050565b600080600060608486031215611de957600080fd5b611df284611d93565b9250611e0060208501611d93565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e4f57611e4f611e10565b604052919050565b60008060408385031215611e6a57600080fd5b611e7383611d93565b915060208084013567ffffffffffffffff80821115611e9157600080fd5b818601915086601f830112611ea557600080fd5b813581811115611eb757611eb7611e10565b8060051b9150611ec8848301611e26565b8181529183018401918481019089841115611ee257600080fd5b938501935b83851015611f0c5784359250611efc83611cdc565b8282529385019390850190611ee7565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611f56578351151583529284019291840191600101611f38565b50909695505050505050565b600060208284031215611f7457600080fd5b61092c82611d93565b8015158114610e9357600080fd5b60008060408385031215611f9e57600080fd5b611fa783611d93565b91506020830135611fb781611f7d565b809150509250929050565b600067ffffffffffffffff831115611fdc57611fdc611e10565b611fef601f8401601f1916602001611e26565b905082815283838301111561200357600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561203057600080fd5b61203985611d93565b935061204760208601611d93565b925060408501359150606085013567ffffffffffffffff81111561206a57600080fd5b8501601f8101871361207b57600080fd5b61208a87823560208401611fc2565b91505092959194509250565b600080604083850312156120a957600080fd5b50508035926020909101359150565b600080604083850312156120cb57600080fd5b6120d483611d93565b91506120e260208401611d93565b90509250929050565b600082601f8301126120fc57600080fd5b61092c83833560208501611fc2565b6000806000806080858703121561212157600080fd5b843567ffffffffffffffff8082111561213957600080fd5b612145888389016120eb565b9550602087013591508082111561215b57600080fd5b50612168878288016120eb565b93505061217760408601611d93565b9396929550929360600135925050565b600181811c9082168061219b57607f821691505b602082108114156121bc57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561220d57600080fd5b815161092c81611f7d565b634e487b7160e01b600052601160045260246000fd5b600060001982141561224257612242612218565b5060010190565b60008282101561225b5761225b612218565b500390565b6000821982111561227357612273612218565b500190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122c190830184611d3b565b9695505050505050565b6000602082840312156122dd57600080fd5b815161092c81611cdc565b600083516122fa818460208801611d0f565b83519083019061230e818360208801611d0f565b01949350505050565b634e487b7160e01b600052600160045260246000fd5b60008161233c5761233c612218565b506000190190565b666261666b72656960c81b815260008251612366816007850160208701611d0f565b919091016007019291505056fea264697066735822122024b354c7a75f0e6ccc85cf2c82ab5ca2a53c5c70aa4908b3a17cc3eb8a395bb664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "OpenBound smartcontract limited to one nft per address",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(string,string,address,uint256)": {
        "notice": "IOpenBound"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165"
      },
      "tokenURI(uint256)": {
        "notice": "IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "IERC721Enumerable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7870,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_openCloneableInitialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7872,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_template",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 7874,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6531,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6533,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8607,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_paused",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6766,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6770,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6774,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6780,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 19003,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "maxSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 19005,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 19007,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 19011,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenOfOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19015,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokenIndexOfOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19019,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_cidOfToken",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19022,
        "contract": "contracts/templates/OpenBound.sol:OpenBound",
        "label": "_tokens",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}