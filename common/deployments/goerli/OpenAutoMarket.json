{
  "address": "0xD0677855CA6eb922577D302c9ab8f54a842CCd3E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royalties",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unspent",
          "type": "uint256"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetMintPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetTokenPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyalty",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fee",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "minimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
          "name": "receiver",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyalty",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fee",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "minimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOpenReceiverInfos.ReceiverInfos",
          "name": "receiver",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params_",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "receiverFee_",
          "type": "uint96"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parent",
      "outputs": [
        {
          "internalType": "address",
          "name": "parent_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9730f30e65b8914fbe762c4c8458c3570256ddb9bd6f22774ece78a0f225033e",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xD0677855CA6eb922577D302c9ab8f54a842CCd3E",
    "transactionIndex": 64,
    "gasUsed": "2988449",
    "logsBloom": "0x
    "blockHash": "0x5050c58a9d7437532030bcb4abf555638dbddbdb4545fa951e9498abe0dd24b8",
    "transactionHash": "0x9730f30e65b8914fbe762c4c8458c3570256ddb9bd6f22774ece78a0f225033e",
    "logs": [],
    "blockNumber": 8288121,
    "cumulativeGasUsed": "10659468",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0858b02f7af47b16787defa15da068c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalties\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unspent\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetMintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyalty\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyalty\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IOpenReceiverInfos.ReceiverInfos\",\"name\":\"receiver\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params_\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"receiverFee_\",\"type\":\"uint96\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}},\"getDefaultRoyalty()\":{\"returns\":{\"receiver\":\": default royalty receiver infos\"}},\"getTokenRoyalty(uint256)\":{\"params\":{\"tokenID\":\": token ID\"},\"returns\":{\"receiver\":\":  token royalty receiver infos\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setMintPrice(uint256)\":{\"params\":{\"price\":\": default price in wei\"}},\"setTokenPrice(uint256,uint256)\":{\"params\":{\"price\":\": token price in wei\",\"tokenID\":\": token ID\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId to test\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"getDefaultRoyalty()\":{\"notice\":\"GET default royalty info\"},\"getTokenRoyalty(uint256)\":{\"notice\":\"GET token royalty info\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty info\"},\"setMintPrice(uint256)\":{\"notice\":\"SET default mint price\"},\"setTokenPrice(uint256,uint256)\":{\"notice\":\"SET token price\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty info\"},\"supportsInterface(bytes4)\":{\"notice\":\"test if this interface is supported\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"},\"withdraw()\":{\"notice\":\"withdraw eth\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OpenAutoMarket.sol\":\"OpenAutoMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool public initialized;\\n    string public template;\\n    uint256 public version;\\n\\n    function parent() external view override (IOpenCloneable) returns (address parent_) {\\n        // eip1167 deployed code = 45 bytes = 10 bytes + 20 bytes address + 15 bytes\\n        // extract bytes 10 to 30: shift 2 bytes (16 bits) then truncate to address 20 bytes (uint160)\\n        return (address(this).code.length == 45)\\n            ? address(uint160(uint256(bytes32(address(this).code)) >> 16))\\n            : address(0);\\n    }\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    ) public virtual override (IOpenCloneable);\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        initialized = true;\\n\\n        template = template_;\\n        version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0xbd9e0c12a4bee2eeb5d088eee61a40b5bea3ad984003511a6623504b536a3e75\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xd1cd19a5c7736b61bf3b1785ed5552da45967576ac4e86f1cdd47a68fdf9332a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Already initialized\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1097e0e4be4336b21fddba00347ab6cf1bf737e04e67cd38b3cb907bb625448e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-2981: NFT Royalty Standard\\n// https://eips.ethereum.org/EIPS/eip-2981\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/common/ERC2981.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC2981 \\u2014\\u2014 IERC2981 \\u2014\\u2014 IOpenReceiverInfos\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\\\";\\n\\nabstract contract OpenERC2981 is IERC2981, IOpenReceiverInfos, OpenERC165 {\\n    uint256 internal _mintPrice;\\n    ReceiverInfos internal _defaultRoyalty;\\n    mapping(uint256 => ReceiverInfos) internal _tokenRoyalty;\\n\\n    uint96 internal constant _MAX_FEE = 10_000;\\n\\n    modifier notTooExpensive(uint256 price) {\\n        /// otherwise may overflow\\n        require(price < 2 ** 128, \\\"Too expensive\\\");\\n        _;\\n    }\\n\\n    modifier lessThanMaxFee(uint256 fee) {\\n        require(fee <= _MAX_FEE, \\\"Royalty fee exceed price\\\");\\n        _;\\n    }\\n\\n    function royaltyInfo(uint256 tokenID, uint256 price)\\n        public\\n        view\\n        override (IERC2981)\\n        notTooExpensive(price)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        ReceiverInfos memory royalty = _tokenRoyalty[tokenID];\\n\\n        if (royalty.account == address(0)) {\\n            royalty = _defaultRoyalty;\\n        }\\n\\n        royaltyAmount = _calculateAmount(price, royalty.fee);\\n\\n        /// MINIMAL royaltyAmount\\n        if (royalty.minimum > 0) {\\n            /// With zero price, token owner can bypass royalties...\\n            /// SO a defaultRoyaltyAmount is calculated with _mintPrice as a base\\n            /// (can only be modified by collection owner)\\n            /// BUT collection owner can higher too much mintPrice making fees too high\\n            /// SO a royalty.minimum if calculated for each token on minting (and on setTokenRoyalty)\\n\\n            /// MIN(royalty.minimum, defaultRoyaltyAmount)\\n            uint256 defaultRoyaltyAmount = _calculateAmount(_mintPrice, royalty.fee);\\n            uint256 minimumRoyaltyAmount =\\n                royalty.minimum < defaultRoyaltyAmount ? royalty.minimum : defaultRoyaltyAmount;\\n\\n            /// MAX(normalRoyaltyAmount, minimumRoyaltyAmount)\\n            royaltyAmount =\\n                royaltyAmount < minimumRoyaltyAmount ? minimumRoyaltyAmount : royaltyAmount;\\n        }\\n\\n        return (royalty.account, royaltyAmount);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _calculateAmount(uint256 price, uint96 fee) internal pure returns (uint256) {\\n        return (price * fee) / _MAX_FEE;\\n    }\\n}\\n\",\"keccak256\":\"0x8507ed19c515e7a2dd0ff1f9461e08775ab0ac2eb57a63710d86a033246e9aae\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    modifier existsToken(uint256 tokenID) {\\n        require(_owners[tokenID] != address(0), \\\"Invalid token ID\\\");\\n        _;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenID)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, data);\\n    }\\n\\n    function approve(address spender, uint256 tokenID) public override (IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override (IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID)\\n        public\\n        payable\\n        override (IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x80ac58cd // = type(IERC721).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override (IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID)\\n        public\\n        view\\n        override (IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _owners[tokenID];\\n    }\\n\\n    function getApproved(uint256 tokenID)\\n        public\\n        view\\n        override (IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override (IERC721)\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(address to, string memory, uint256 tokenID) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(_owners[tokenID] == address(0), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        require(owner != address(0), \\\"Invalid token ID\\\");\\n\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual {}\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (bool ownerOrOperator)\\n    {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n    {\\n        _transferFrom(from, to, tokenID);\\n\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 tokenID)\\n        private\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _isERC721Receiver(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n        returns (bool)\\n    {\\n        return to.code.length == 0\\n            || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data)\\n                == IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID)\\n        private\\n        view\\n        returns (bool ownerOrApproved)\\n    {\\n        ownerOrApproved =\\n            (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n}\\n\",\"keccak256\":\"0x384b82fce910e7c427200e5b433f55af733146e37b619f4b65ab41ddc495e604\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//      OpenERC165\\n//           |\\n//      OpenERC721\\n//           |\\n//  OpenERC721Enumerable \\u2014\\u2014 IERC721Enumerable\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override (IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0x10b8a1578ad08ed9bbbe6d17d814dc516f7dc7c65eb9363ae3f7c8b0d6729718\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//     OpenERC165\\n//          |\\n//     OpenERC721\\n//          |\\n//  OpenERC721Metadata \\u2014\\u2014 IERC721Metadata\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID)\\n        external\\n        view\\n        virtual\\n        override (IERC721Metadata)\\n        existsToken(tokenID)\\n        returns (string memory)\\n    {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Already initialized\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mint(address to, string memory newTokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _tokenURIs[tokenID] = newTokenURI;\\n\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenURIs[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x9bcd42271d39104bcd9336a24fd92ed9db57c24b278ff7c1302c5c68d838d0c3\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenGuard\\n//\\npragma solidity ^0.8.17;\\n\\nabstract contract OpenGuard {\\n    bool private _locked;\\n\\n    modifier reEntryGuard() {\\n        require(!_locked, \\\"No re-entry!\\\");\\n\\n        _locked = true;\\n\\n        _;\\n\\n        _locked = false;\\n    }\\n}\\n\",\"keccak256\":\"0x98ebdebd3f411a4c8fc7584c8bbd83463410fa4f509fd0c325cf2a1003596dc5\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |            |             |\\n//   OpenERC721    OpenERC173   OpenERC2981\\n//      (NFT)      (Ownable)   (RoyaltyInfo)\\n//        |            |             |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenMarketable \\u2014\\u2014 IOpenMarketable - OpenGuard\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenGuard.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\n\\nabstract contract OpenMarketable is\\n    IOpenMarketable,\\n    OpenERC721,\\n    OpenERC173,\\n    OpenERC2981,\\n    OpenGuard\\n{\\n    mapping(uint256 => uint256) internal _tokenPrice;\\n\\n    bool public minimal;\\n\\n    ReceiverInfos internal _treasury;\\n\\n    receive() external payable override (IOpenMarketable) {}\\n\\n    /// @notice withdraw eth\\n    function withdraw() external override (IOpenMarketable) onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /// @notice SET default mint price\\n    /// @param price : default price in wei\\n    function setMintPrice(uint256 price) public override (IOpenMarketable) onlyOwner {\\n        _setMintPrice(price);\\n    }\\n\\n    /// @notice SET default royalty info\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setDefaultRoyalty(address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(receiver, fee);\\n    }\\n\\n    /// @notice SET token price\\n    /// @param tokenID : token ID\\n    /// @param price : token price in wei\\n    function setTokenPrice(uint256 tokenID, uint256 price)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenPrice(tokenID, price, address(this), Approve.All);\\n    }\\n\\n    /// @notice SET token royalty info\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10_000\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        existsToken(tokenID)\\n        onlyOwner\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function getMintPrice() public view override (IOpenMarketable) returns (uint256) {\\n        return _mintPrice;\\n    }\\n\\n    function getTokenPrice(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (uint256)\\n    {\\n        return _tokenPrice[tokenID];\\n    }\\n\\n    /// @notice GET default royalty info\\n    /// @return receiver : default royalty receiver infos\\n    function getDefaultRoyalty()\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (ReceiverInfos memory receiver)\\n    {\\n        receiver = _defaultRoyalty;\\n    }\\n\\n    /// @notice GET token royalty info\\n    /// @param tokenID : token ID\\n    /// @return receiver :  token royalty receiver infos\\n    function getTokenRoyalty(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (ReceiverInfos memory receiver)\\n    {\\n        receiver = _tokenRoyalty[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721, OpenERC173, OpenERC2981)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenMarketable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(\\n        uint256 mintPrice_,\\n        address receiver_,\\n        uint96 fee_,\\n        address treasury_,\\n        uint96 treasuryFee_,\\n        bool minimal_\\n    ) internal {\\n        minimal = minimal_;\\n        _mintPrice = mintPrice_;\\n        _defaultRoyalty = _createReceiverInfos(receiver_, fee_);\\n        _treasury = _createReceiverInfos(treasury_, treasuryFee_);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _setTokenRoyalty(tokenID, _defaultRoyalty.account, _defaultRoyalty.fee);\\n\\n        if (to != owner()) _pay(tokenID, _mintPrice, to, owner());\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenRoyalty[tokenID];\\n        delete _tokenPrice[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        /// Transfer: pay token price (including royalties) to previous token owner (and royalty receiver)\\n        _pay(tokenID, _tokenPrice[tokenID], to, ownerOf(tokenID));\\n\\n        delete _tokenPrice[tokenID];\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _setDefaultRoyalty(address receiver, uint96 fee) internal lessThanMaxFee(fee) {\\n        _defaultRoyalty = _createReceiverInfos(receiver, fee);\\n\\n        emit SetDefaultRoyalty(receiver, fee);\\n    }\\n\\n    function _setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        internal\\n        lessThanMaxFee(fee)\\n    {\\n        _tokenRoyalty[tokenID] = _createReceiverInfos(receiver, fee);\\n\\n        emit SetTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    /// @notice SET token price\\n    /// @param tokenID : token ID\\n    /// @param price : token price in wei\\n    function _setTokenPrice(uint256 tokenID, uint256 price, address approved, Approve approveType)\\n        internal\\n        onlyTokenOwnerOrApproved(tokenID)\\n        notTooExpensive(price)\\n    {\\n        _tokenPrice[tokenID] = price;\\n\\n        emit SetTokenPrice(tokenID, price);\\n\\n        if (approveType == Approve.All) {\\n            setApprovalForAll(approved, true);\\n        } else if (approveType == Approve.One) {\\n            approve(approved, tokenID);\\n        }\\n    }\\n\\n    function _setMintPrice(uint256 price) internal notTooExpensive(price) {\\n        _mintPrice = price;\\n        _setDefaultRoyalty(_defaultRoyalty.account, _defaultRoyalty.fee);\\n\\n        emit SetMintPrice(price);\\n    }\\n\\n    function _createReceiverInfos(address receiver, uint96 fee)\\n        internal\\n        view\\n        returns (ReceiverInfos memory)\\n    {\\n        return ReceiverInfos(receiver, fee, minimal ? _calculateAmount(_mintPrice, fee) : 0);\\n    }\\n\\n    function _transferValue(address to, uint256 value) private returns (uint256) {\\n        bool success;\\n        if (value > 0) {\\n            (success,) = to.call{value: value, gas: 2300}(\\\"\\\");\\n        }\\n        return success ? value : 0;\\n    }\\n\\n    function _pay(uint256 tokenID, uint256 price, address buyer, address seller)\\n        private\\n        reEntryGuard\\n    {\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n        require(buyer != address(0), \\\"Invalid buyer\\\");\\n        require(seller != address(0), \\\"Invalid seller\\\");\\n\\n        address receiver;\\n        uint256 royalties;\\n        uint256 fee;\\n        uint256 paid;\\n        uint256 unspent;\\n\\n        (receiver, royalties) = royaltyInfo(tokenID, price);\\n        if (receiver == address(0)) royalties = 0;\\n\\n        if (price > 0 || royalties > 0) {\\n            fee = _calculateAmount(price, _treasury.fee);\\n            require(msg.value >= royalties + fee, \\\"Not enough funds\\\");\\n\\n            /// Transfer amount to be paid to seller\\n            if (price > royalties + fee) {\\n                paid = _transferValue(seller, price - (royalties + fee));\\n            }\\n\\n            /// Transfer royalties to receiver\\n            royalties = _transferValue(receiver, royalties);\\n\\n            /// Transfer fee to protocol treasury\\n            fee = _transferValue(_treasury.account, fee);\\n        }\\n        unspent = msg.value - (paid + royalties + fee);\\n\\n        /// Transfer back unspent funds to buyer\\n        unspent = _transferValue(buyer, unspent);\\n\\n        emit Pay(tokenID, price, seller, paid, receiver, royalties, fee, buyer, unspent);\\n    }\\n}\\n\",\"keccak256\":\"0x63da3707d7bc038e8e7a2650f67cfb26f644132d05712a2bf0f313afb9fff56f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                       |             |              |\\n//   OpenERC721                            OpenERC2981    OpenERC173    OpenCloneable\\n//     (NFT)                              (RoyaltyInfo)    (ownable)          |\\n//       |                                        |            |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014   |     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014              |\\n//       |                        |           |   |     |      |              |\\n//  OpenERC721Metadata  OpenERC721Enumerable  |   \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |              |\\n//       |                        |           |   |            |              |\\n//       |                        |      OpenMarketable   OpenPauseable       |\\n//       |                        |             |              |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs \\u2014\\u2014 IOpenNFTs\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\nabstract contract OpenNFTs is\\n    IOpenNFTs,\\n    OpenERC721Metadata,\\n    OpenERC721Enumerable,\\n    OpenMarketable,\\n    OpenPauseable,\\n    OpenCloneable\\n{\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext;\\n\\n    /// @notice onlyMinter, by default only owner can mint, can be overriden\\n    modifier onlyMinter() virtual {\\n        require(msg.sender == owner(), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID)\\n        external\\n        override (IOpenNFTs)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _burn(tokenID);\\n    }\\n\\n    function mint(address minter, string memory tokenURI)\\n        public\\n        override (IOpenNFTs)\\n        onlyMinter\\n        returns (uint256 tokenID)\\n    {\\n        tokenID = tokenIdNext++;\\n        _mint(minter, tokenURI, tokenID);\\n    }\\n\\n    /// @notice test if this interface is supported\\n    /// @param interfaceId interfaceId to test\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (\\n            OpenMarketable, OpenERC721Metadata, OpenERC721Enumerable, OpenCloneable, OpenPauseable\\n        )\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenNFTs).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice _initialize\\n    /// @param name_ name of the NFT Collection\\n    /// @param symbol_ symbol of the NFT Collection\\n    /// @param owner_ owner of the NFT Collection\\n    // solhint-disable-next-line comprehensive-interface\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 mintPrice_,\\n        address receiver_,\\n        uint96 fee_,\\n        address treasury_,\\n        uint96 treasuryFee_,\\n        bool minimal_\\n    ) internal {\\n        tokenIdNext = 1;\\n\\n        OpenCloneable._initialize(\\\"OpenNFTs\\\", 4);\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n        OpenMarketable._initialize(mintPrice_, receiver_, fee_, treasury_, treasuryFee_, minimal_);\\n    }\\n\\n    /// @notice _mint\\n    /// @param minter minter address\\n    /// @param tokenURI token metdata URI\\n    /// @param tokenID token ID\\n    function _mint(address minter, string memory tokenURI, uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        override (OpenERC721, OpenMarketable, OpenERC721Enumerable)\\n    {\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x108d1044a51d89ac044ffc07e648c34d8738f13934659ebcfc81ce7a35fb613b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenPauseable \\u2013\\u2013 IOpenPauseable\\n//\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override (IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override (IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC173)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9c71441208356ffd312b3a55ba078bee609c5194b6cd958e47aba0e05a3a8d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x58013714c651f0d1771fc666fcf671981f83ed655851ab134096147c60b820ca\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x583df9d1c4ec4e0e2e6f9ada93c240d9b0b8e34db7e588c92b44aca15590aa0d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xecaab15447bb869f9e283ea4ade81645dfad23967e8c21e8b283b3058a3b98e4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data)\\n        external\\n        payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0eeba23f32711abca06ec1a3a6c2280853a57d2afc748236ee89e61e3fbacd60\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd04b5e67b7e71e40cc6197df49c279cfa9fb7de3e6e6b2c13a4c1bfd53a077a4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3c399bd3f061c7b2da29e18b01d0b7ea780ac11d0747de3921f1c09d3e491ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0x47c4c29370a130906552a8d76c73ed5a8130591843dfa7357df8af7e19fc00e5\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenCloneable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    ) external;\\n\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function parent() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf6a4650b44aa4f552fdff99b8c89ab231ea479b860733f4bee69257b33489c86\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\\\";\\n\\ninterface IOpenMarketable is IOpenReceiverInfos {\\n    enum Approve {\\n        None,\\n        One,\\n        All\\n    }\\n\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetMintPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(\\n        uint256 tokenID,\\n        uint256 price,\\n        address seller,\\n        uint256 paid,\\n        address receiver,\\n        uint256 royalties,\\n        uint256 fee,\\n        address buyer,\\n        uint256 unspent\\n    );\\n\\n    receive() external payable;\\n\\n    function withdraw() external;\\n\\n    function setMintPrice(uint256 price) external;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function minimal() external view returns (bool);\\n\\n    function getMintPrice() external view returns (uint256 price);\\n\\n    function getDefaultRoyalty() external view returns (ReceiverInfos memory receiver);\\n\\n    function getTokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getTokenRoyalty(uint256 tokenID)\\n        external\\n        view\\n        returns (ReceiverInfos memory receiver);\\n}\\n\",\"keccak256\":\"0x410c7f70174e68b13a9c0425701144862a93e0656e91ae69a128d9fc7088099f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x68bde95ed0001c64f5ff0711707a2675e63a11e7ada541db5f67742174fc837e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0xc1e02716bd0d58193870a7eeac4d30e274bb06dd4e0f32e6f2762d1e3a07e04a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenReceiverInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenReceiverInfos {\\n    struct ReceiverInfos {\\n        address account;\\n        uint96 fee;\\n        uint256 minimum;\\n    }\\n}\\n\",\"keccak256\":\"0x1e67e2eb24e3c9e8f871068866a8e6af4ec00f8da0a692c8bfe07e8e88db38bd\",\"license\":\"MIT\"},\"src/OpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                                         |               |\\n//   OpenERC721                                               OpenERC173     OpenCloneable\\n//     (NFT)                                                   (ownable)           |\\n//       |                                                         |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014               |\\n//       |                        |                  |      |      |               |\\n//  OpenERC721Metadata  OpenERC721Enumerable   OpenERC2981  |      |               |\\n//       |                        |           (RoyaltyInfo) |      |               |\\n//       |                        |                  |      |      |               |\\n//       |                        |                  \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |               |\\n//       |                        |                  |             |               |\\n//       |                        |            OpenMarketable OpenPauseable        |\\n//       |                        |                  |             |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs\\n//       |\\n//   OpenAutoMarket \\u2014\\u2014 IOpenAutoMarket\\n//\\npragma solidity ^0.8.9;\\n\\nimport {OpenNFTs} from \\\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\\\";\\nimport {OpenCloneable} from \\\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\\\";\\nimport {OpenMarketable} from \\\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\\\";\\n\\nimport {IOpenAutoMarket} from \\\"src/interfaces/IOpenAutoMarket.sol\\\";\\nimport {IOpenNFTs as IOpenNFTsOld} from \\\"src/interfaces/IOpenNFTs.old.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenAutoMarket is IOpenAutoMarket, OpenNFTs {\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyMinter() override (OpenNFTs) {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    function gift(address to, uint256 tokenID) external payable override (IOpenAutoMarket) existsToken(tokenID) {\\n        setTokenPrice(tokenID, 0);\\n\\n        safeTransferFrom(msg.sender, to, tokenID);\\n    }\\n\\n    function buy(uint256 tokenID) external payable override (IOpenAutoMarket) existsToken(tokenID) {\\n        /// Get token price\\n        uint256 price = _tokenPrice[tokenID];\\n\\n        /// Require price defined\\n        require(price > 0, \\\"Not to sell\\\");\\n\\n        /// Require enough value sent\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n\\n        /// Get previous token owner\\n        address from = ownerOf(tokenID);\\n        assert(from != address(0));\\n        require(from != msg.sender, \\\"Already token owner!\\\");\\n\\n        /// This AutoMarket approves msg.sender (requires AutoMarket isAprovedForAll)\\n        this.approve(msg.sender, tokenID);\\n\\n        /// Transfer token\\n        safeTransferFrom(from, msg.sender, tokenID);\\n\\n        /// Reset token price (to be eventualy defined by new owner)\\n        delete _tokenPrice[tokenID];\\n    }\\n\\n    function mint(string memory tokenURI) external override (IOpenAutoMarket) returns (uint256 tokenID) {\\n        tokenID = mint(msg.sender, tokenURI, 0, address(0), 0);\\n    }\\n\\n    function mint(address minter_, string memory tokenURI_, uint256 tokenPrice_, address receiver_, uint96 receiverFee_)\\n        public\\n        payable\\n        override (IOpenAutoMarket)\\n        onlyMinter\\n        onlyWhenNotPaused\\n        returns (uint256 tokenID)\\n    {\\n        tokenID = OpenNFTs.mint(minter_, tokenURI_);\\n\\n        if (tokenPrice_ > 0) OpenMarketable._setTokenPrice(tokenID, tokenPrice_, address(this), Approve.All);\\n        if (receiverFee_ > 0) OpenMarketable._setTokenRoyalty(tokenID, receiver_, receiverFee_);\\n    }\\n\\n    function initialize(string memory name_, string memory symbol_, address owner_, bytes memory params_)\\n        public\\n        virtual\\n        override (OpenCloneable)\\n    {\\n        (bytes memory subparams_, address treasury_, uint96 treasuryFee_) =\\n            abi.decode(params_, (bytes, address, uint96));\\n\\n        (uint256 mintPrice_, address receiver_, uint96 receiverFee_, bool[] memory options_) =\\n            abi.decode(subparams_, (uint256, address, uint96, bool[]));\\n        open = options_[0];\\n\\n        OpenNFTs._initialize(\\n            name_, symbol_, owner_, mintPrice_, receiver_, receiverFee_, treasury_, treasuryFee_, options_[1]\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (OpenNFTs) returns (bool) {\\n        return interfaceId == type(IOpenAutoMarket).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x80e271c23c59738d0e246277ca165b87be16d93453548834450a3c4457814109\",\"license\":\"MIT\"},\"src/interfaces/IOpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IOpenAutoMarket {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(address minter, string memory tokenURI, uint256 price, address receiver, uint96 fee)\\n        external\\n        payable\\n        returns (uint256 tokenID);\\n\\n    function gift(address to, uint256 tokenID) external payable;\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2a3219236d28cad1b8869f6a1c7625f2d7e490a9fc4ccab690c89d34a21fc6e2\",\"license\":\"MIT\"},\"src/interfaces/IOpenNFTs.old.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOpenNFTs {\\n    function initialize(string memory name, string memory symbol, address owner, bool[] memory options) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0xfbf4c214fe74cdb176042563f24206850ab1cef597cb59a90797d6bfcf0bfe19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613519806100206000396000f3fe60806040526004361061026b5760003560e01c806370a0823111610144578063c4ae3168116100b6578063d96a094a1161007a578063d96a094a146107c8578063e985e9c5146107db578063eb685c4714610824578063f2fde38b14610844578063f4a0a52814610864578063fcfff16f1461088457600080fd5b8063c4ae316814610740578063c87b56dd14610755578063cbce4c9714610775578063d0def52114610788578063d85d3d27146107a857600080fd5b806394a53d411161010857806394a53d411461069c57806395d89b41146106b6578063a22cb465146106cb578063a7f93ebd146106eb578063b88d4fde14610700578063c457fb371461071357600080fd5b806370a082311461052b578063833b7b781461054b5780638bbf58b3146105fa5780638cabe05a146106105780638da5cb5b1461067957600080fd5b80633ccfd60b116101dd57806354fd4d50116101a157806354fd4d50146104935780635944c753146104a95780635c975abb146104c957806360f96a8f146104e15780636352211e146104f65780636f2ddd931461051657600080fd5b80633ccfd60b1461041857806342842e0e1461042d57806342966c68146104405780634472167b146104605780634f6ccce71461047357600080fd5b8063158ef93e1161022f578063158ef93e1461034857806318160ddd146103675780631eb40e211461038657806323b872dd146103a65780632a55205a146103b95780632f745c59146103f857600080fd5b806301ffc9a71461027757806304634d8d146102ac57806306fdde03146102ce578063081812fc146102f0578063095ea7b31461032857600080fd5b3661027257005b600080fd5b34801561028357600080fd5b50610297610292366004612aae565b61089e565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102cc6102c7366004612af5565b6108c9565b005b3480156102da57600080fd5b506102e361090f565b6040516102a39190612b7e565b3480156102fc57600080fd5b5061031061030b366004612b91565b6109a1565b6040516001600160a01b0390911681526020016102a3565b34801561033457600080fd5b506102cc610343366004612baa565b6109f8565b34801561035457600080fd5b5060165461029790610100900460ff1681565b34801561037357600080fd5b506008545b6040519081526020016102a3565b34801561039257600080fd5b506102cc6103a1366004612c9b565b610abc565b6102cc6103b4366004612d38565b610b69565b3480156103c557600080fd5b506103d96103d4366004612d79565b610b79565b604080516001600160a01b0390931683526020830191909152016102a3565b34801561040457600080fd5b50610378610413366004612baa565b610c95565b34801561042457600080fd5b506102cc610d1c565b6102cc61043b366004612d38565b610d7a565b34801561044c57600080fd5b506102cc61045b366004612b91565b610d95565b61037861046e366004612d9b565b610dc5565b34801561047f57600080fd5b5061037861048e366004612b91565b610ea1565b34801561049f57600080fd5b5061037860185481565b3480156104b557600080fd5b506102cc6104c4366004612e1c565b610f0b565b3480156104d557600080fd5b5060165460ff16610297565b3480156104ed57600080fd5b50610310610fa9565b34801561050257600080fd5b50610310610511366004612b91565b610ff2565b34801561052257600080fd5b506102e3611045565b34801561053757600080fd5b50610378610546366004612e5e565b6110d3565b34801561055757600080fd5b506105c6610566366004612b91565b60408051606080820183526000808352602080840182905292840181905293845260108252928290208251938401835280546001600160a01b0381168552600160a01b90046001600160601b031691840191909152600101549082015290565b6040805182516001600160a01b031681526020808401516001600160601b03169082015291810151908201526060016102a3565b34801561060657600080fd5b5061037860195481565b34801561061c57600080fd5b506105c660408051606081018252600080825260208201819052918101919091525060408051606081018252600e546001600160a01b0381168252600160a01b90046001600160601b03166020820152600f549181019190915290565b34801561068557600080fd5b50600c5461010090046001600160a01b0316610310565b3480156106a857600080fd5b506013546102979060ff1681565b3480156106c257600080fd5b506102e361113e565b3480156106d757600080fd5b506102cc6106e6366004612e89565b61114d565b3480156106f757600080fd5b50600d54610378565b6102cc61070e366004612eb7565b6111b9565b34801561071f57600080fd5b5061037861072e366004612b91565b60009081526012602052604090205490565b34801561074c57600080fd5b506102cc6111cb565b34801561076157600080fd5b506102e3610770366004612b91565b61120c565b6102cc610783366004612baa565b6112e4565b34801561079457600080fd5b506103786107a3366004612f17565b611330565b3480156107b457600080fd5b506103786107c3366004612f67565b6113ae565b6102cc6107d6366004612b91565b6113bf565b3480156107e757600080fd5b506102976107f6366004612f9c565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561083057600080fd5b506102cc61083f366004612d79565b611547565b34801561085057600080fd5b506102cc61085f366004612e5e565b61157b565b34801561087057600080fd5b506102cc61087f366004612b91565b6115b3565b34801561089057600080fd5b50601a546102979060ff1681565b60006001600160e01b0319821663393a4ff760e11b14806108c357506108c3826115eb565b92915050565b600c5461010090046001600160a01b031633146109015760405162461bcd60e51b81526004016108f890612fca565b60405180910390fd5b61090b8282611610565b5050565b60606005805461091e90612fed565b80601f016020809104026020016040519081016040528092919081815260200182805461094a90612fed565b80156109975780601f1061096c57610100808354040283529160200191610997565b820191906000526020600020905b81548152906001019060200180831161097a57829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b03166109d75760405162461bcd60e51b81526004016108f890613021565b6000838152600260205260409020546001600160a01b031691505b50919050565b610a0233826116df565b610a4e5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016108f8565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a8382610ff2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600083806020019051810190610ad5919061304b565b92509250925060008060008086806020019051810190610af591906130e1565b935093509350935080600081518110610b1057610b106131c4565b6020026020010151601a60006101000a81548160ff021916908315150217905550610b5c8b8b8b8787878c8c89600181518110610b4f57610b4f6131c4565b602002602001015161173a565b5050505050505050505050565b610b74838383611795565b505050565b60008082600160801b8110610ba05760405162461bcd60e51b81526004016108f8906131da565b600085815260106020908152604091829020825160608101845281546001600160a01b038116808352600160a01b9091046001600160601b03169382019390935260019091015492810192909252610c2c575060408051606081018252600e546001600160a01b0381168252600160a01b90046001600160601b03166020820152600f54918101919091525b610c3a8582602001516119cb565b604082015190935015610c8a576000610c59600d5483602001516119cb565b9050600081836040015110610c6e5781610c74565b82604001515b9050808510610c835784610c85565b805b945050505b519250509250929050565b6000610ca0836110d3565b8210610cdf5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108f8565b6001600160a01b0383166000908152600960205260409020805483908110610d0957610d096131c4565b9060005260206000200154905092915050565b600c5461010090046001600160a01b03163314610d4b5760405162461bcd60e51b81526004016108f890612fca565b60405133904780156108fc02916000818181858888f19350505050158015610d77573d6000803e3d6000fd5b50565b610b74838383604051806020016040528060008152506119f4565b80610da03382611a4c565b610dbc5760405162461bcd60e51b81526004016108f890613201565b61090b82611a82565b601a5460009060ff1680610de95750600c546001600160a01b036101009091041633145b610e225760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108f8565b60165460ff1615610e5f5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016108f8565b610e698686611330565b90508315610e7e57610e7e8185306002611a8b565b6001600160601b03821615610e9857610e98818484611b75565b95945050505050565b6008546000908210610ee65760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108f8565b60088281548110610ef957610ef96131c4565b90600052602060002001549050919050565b60008381526020819052604090205483906001600160a01b0316610f415760405162461bcd60e51b81526004016108f890613021565b600c5461010090046001600160a01b03163314610f705760405162461bcd60e51b81526004016108f890612fca565b83610f7b3382611a4c565b610f975760405162461bcd60e51b81526004016108f890613201565b610fa2858585611b75565b5050505050565b6000602d303b14610fba5750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c610feb90613238565b901c905090565b60008181526020819052604081205482906001600160a01b03166110285760405162461bcd60e51b81526004016108f890613021565b50506000908152602081905260409020546001600160a01b031690565b6017805461105290612fed565b80601f016020809104026020016040519081016040528092919081815260200182805461107e90612fed565b80156110cb5780601f106110a0576101008083540402835291602001916110cb565b820191906000526020600020905b8154815290600101906020018083116110ae57829003601f168201915b505050505081565b60006001600160a01b0382166111225760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b60448201526064016108f8565b506001600160a01b031660009081526001602052604090205490565b60606006805461091e90612fed565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111c5848484846119f4565b50505050565b600c5461010090046001600160a01b031633146111fa5760405162461bcd60e51b81526004016108f890612fca565b60165461120a9060ff1615611c61565b565b60008181526020819052604090205460609082906001600160a01b03166112455760405162461bcd60e51b81526004016108f890613021565b6000838152600760205260409020805461125e90612fed565b80601f016020809104026020016040519081016040528092919081815260200182805461128a90612fed565b80156112d75780601f106112ac576101008083540402835291602001916112d7565b820191906000526020600020905b8154815290600101906020018083116112ba57829003601f168201915b5050505050915050919050565b60008181526020819052604090205481906001600160a01b031661131a5760405162461bcd60e51b81526004016108f890613021565b611325826000611547565b610b74338484610d7a565b601a5460009060ff16806113545750600c546001600160a01b036101009091041633145b61138d5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108f8565b6019805490600061139d83613272565b9190505590506108c3838383611ca6565b60006108c333836000806000610dc5565b60008181526020819052604090205481906001600160a01b03166113f55760405162461bcd60e51b81526004016108f890613021565b6000828152601260205260409020548061143f5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016108f8565b8034101561145f5760405162461bcd60e51b81526004016108f89061328b565b600061146a84610ff2565b90506001600160a01b038116611482576114826132b5565b336001600160a01b038216036114d15760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016108f8565b60405163095ea7b360e01b815233600482015260248101859052309063095ea7b390604401600060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b50505050611533813386610d7a565b505050600090815260126020526040812055565b816115523382611a4c565b61156e5760405162461bcd60e51b81526004016108f890613201565b610b748383306002611a8b565b600c5461010090046001600160a01b031633146115aa5760405162461bcd60e51b81526004016108f890612fca565b610d7781611cb1565b600c5461010090046001600160a01b031633146115e25760405162461bcd60e51b81526004016108f890612fca565b610d7781611d0b565b60006001600160e01b03198216639248994960e01b14806108c357506108c382611d92565b6001600160601b0381166127108111156116675760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108f8565b6116718383611db7565b80516020808301516001600160a01b03928316600160a01b6001600160601b039283160217600e55604093840151600f55835192871683528516908201527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc910160405180910390a1505050565b6000806116eb83610ff2565b9050836001600160a01b0316816001600160a01b0316148061173257506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b60016019556040805180820190915260088152674f70656e4e46547360c01b6020820152611769906004611e24565b6117738989611e6e565b61177c87611eb7565b61178a868686868686611ef0565b505050505050505050565b806117a03382611a4c565b6117bc5760405162461bcd60e51b81526004016108f890613201565b6001600160a01b0384166118125760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016108f8565b6001600160a01b0383166118685760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016108f8565b61187182610ff2565b6001600160a01b0316846001600160a01b0316146118c25760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016108f8565b6118cd848484611f77565b600082815260026020526040902080546001600160a01b03191690556001600160a01b0384811690841614611984576001600160a01b038416600090815260016020819052604082208054919290916119279084906132cb565b90915550506001600160a01b038316600090815260016020819052604082208054919290916119579084906132de565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60006127106119e36001600160601b038416856132f1565b6119ed9190613308565b9392505050565b6119ff848484611795565b611a0b84848484611f82565b6111c55760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b60448201526064016108f8565b6000611a5883836116df565b806119ed5750826001600160a01b0316611a71836109a1565b6001600160a01b0316149392505050565b610d7781612021565b83611a963382611a4c565b611ab25760405162461bcd60e51b81526004016108f890613201565b83600160801b8110611ad65760405162461bcd60e51b81526004016108f8906131da565b60008681526012602090815260409182902087905581518881529081018790527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b910160405180910390a16002836002811115611b3557611b3561332a565b03611b4a57611b4584600161114d565b611b6d565b6001836002811115611b5e57611b5e61332a565b03611b6d57611b6d84876109f8565b505050505050565b6001600160601b038116612710811115611bcc5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108f8565b611bd68383611db7565b6000858152601060209081526040918290208351848301516001600160601b03908116600160a01b026001600160a01b039283161783559484015160019092019190915582518881529087169181019190915291841682820152517f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619181900360600190a150505050565b6016805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610b7483838361204c565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80600160801b8110611d2f5760405162461bcd60e51b81526004016108f8906131da565b600d829055600e54611d5b906001600160a01b03811690600160a01b90046001600160601b0316611610565b6040518281527f02ebcb79e897ca3a22313ba6de8fc964409964de565fb4bb6a0927871756b88c9060200160405180910390a15050565b60006001600160e01b031982166350130d5360e01b14806108c357506108c3826120bf565b6040805160608101825260008082526020820181905291810191909152604080516060810182526001600160a01b03851681526001600160601b0384166020820152601354909182019060ff16611e0f576000611e1b565b611e1b600d54856119cb565b90529392505050565b601654610100900460ff1615611e4c5760405162461bcd60e51b81526004016108f890613340565b6016805461ff0019166101001790556017611e6783826133b3565b5060185550565b60045460ff1615611e915760405162461bcd60e51b81526004016108f890613340565b6004805460ff191660011790556005611eaa83826133b3565b506006610b7482826133b3565b600c5460ff1615611eda5760405162461bcd60e51b81526004016108f890613340565b600c805460ff19166001179055610d7781611cb1565b6013805460ff1916821515179055600d869055611f0d8585611db7565b805160208201516001600160601b0316600160a01b026001600160a01b0390911617600e5560400151600f55611f438383611db7565b805160208201516001600160601b0316600160a01b026001600160a01b039091161760145560400151601555505050505050565b610b748383836120e4565b60006001600160a01b0384163b1580610e985750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611fca9033908a9089908990600401613473565b6020604051808303816000875af1158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d91906134b0565b6001600160e01b0319161495945050505050565b60008181526010602090815260408083208381556001018390556012909152812055610d778161211d565b600e546120759082906001600160a01b03811690600160a01b90046001600160601b0316611b75565b600c546001600160a01b0384811661010090920416146120b4576120b481600d54856120af600c546001600160a01b036101009091041690565b6121e8565b610b7483838361247c565b60006001600160e01b031982166398396bd360e01b14806108c357506108c3826124d5565b600081815260126020526040902054612103908290846120af83610ff2565b600081815260126020526040812055610b748383836124fa565b600061212882610ff2565b9050612134818361250e565b6000828152600b6020526040812054600854909190612155906001906132cb565b905060006008828154811061216c5761216c6131c4565b6000918252602080832090910154808352600b9091526040808320869055878352822091909155600880549192508291859081106121ac576121ac6131c4565b60009182526020909120015560088054806121c9576121c96134cd565b60019003818190600052602060002001600090559055610fa28561261c565b60115460ff161561222a5760405162461bcd60e51b815260206004820152600c60248201526b4e6f2072652d656e7472792160a01b60448201526064016108f8565b6011805460ff19166001179055348311156122575760405162461bcd60e51b81526004016108f89061328b565b6001600160a01b03821661229d5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210313abcb2b960991b60448201526064016108f8565b6001600160a01b0381166122e45760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b63632b960911b60448201526064016108f8565b60008060008060006122f68989610b79565b90955093506001600160a01b03851661230e57600093505b600088118061231d5750600084115b156123c257601454612340908990600160a01b90046001600160601b03166119cb565b925061234c83856132de565b34101561236b5760405162461bcd60e51b81526004016108f89061328b565b61237583856132de565b88111561239c576123998661238a85876132de565b612394908b6132cb565b61263c565b91505b6123a6858561263c565b6014549094506123bf906001600160a01b03168461263c565b92505b826123cd85846132de565b6123d791906132de565b6123e190346132cb565b90506123ed878261263c565b604080518b8152602081018b90526001600160a01b038981168284015260608201869052888116608083015260a0820188905260c082018790528a1660e0820152610100810183905290519192507f3fd8cbcd9af698ecb35353cccbfbb5f149fbcfcfe43f043bbfc95c3feb2307b891908190036101200190a150506011805460ff1916905550505050505050565b61248683826126b2565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610b748383836126f0565b60006001600160e01b031982166386bbc65360e01b14806108c357506108c382612714565b612504838261250e565b610b7482826126b2565b6000818152600a6020526040812054906001612529856110d3565b61253391906132cb565b90508082146125ca576001600160a01b0384166000908152600960205260408120805483908110612566576125666131c4565b906000526020600020015490508060096000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106125aa576125aa6131c4565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b038716835260099091529020805480612600576126006134cd565b6001900381819060005260206000200160009055905550505050565b600081815260076020526040812061263391612a4a565b610d7781612739565b600080821561269e576040516001600160a01b038516906108fc9085906000818181858888f193505050503d8060008114612693576040519150601f19603f3d011682016040523d82523d6000602084013e612698565b606091505b50909150505b806126aa576000611732565b509092915050565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b600081815260076020526040902061270883826133b3565b50610b7483838361282a565b600063152a902d60e11b6001600160e01b0319831614806108c357506108c3826129b5565b600061274482610ff2565b90506001600160a01b03811661276c5760405162461bcd60e51b81526004016108f890613021565b6001600160a01b038116600090815260016020526040902054612791576127916132b5565b6001600160a01b038116600090815260016020819052604082208054919290916127bc9084906132cb565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166128775760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016108f8565b6000818152602081905260409020546001600160a01b0316156128d35760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016108f8565b6001600160a01b038316600090815260016020819052604082208054919290916128fe9084906132de565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129746000848360405180602001604052806000815250611f82565b610b745760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016108f8565b60006307f5828d60e41b6001600160e01b0319831614806108c357506108c382600063780e9d6360e01b6001600160e01b0319831614806108c357506108c3826000635b5e139f60e01b6001600160e01b0319831614806108c357506108c38260006380ac58cd60e01b6001600160e01b0319831614806108c357506001600160e01b031982166301ffc9a760e01b146108c3565b508054612a5690612fed565b6000825580601f10612a66575050565b601f016020900490600052602060002090810190610d7791905b80821115612a945760008155600101612a80565b5090565b6001600160e01b031981168114610d7757600080fd5b600060208284031215612ac057600080fd5b81356119ed81612a98565b6001600160a01b0381168114610d7757600080fd5b6001600160601b0381168114610d7757600080fd5b60008060408385031215612b0857600080fd5b8235612b1381612acb565b91506020830135612b2381612ae0565b809150509250929050565b60005b83811015612b49578181015183820152602001612b31565b50506000910152565b60008151808452612b6a816020860160208601612b2e565b601f01601f19169290920160200192915050565b6020815260006119ed6020830184612b52565b600060208284031215612ba357600080fd5b5035919050565b60008060408385031215612bbd57600080fd5b8235612bc881612acb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c1557612c15612bd6565b604052919050565b600067ffffffffffffffff821115612c3757612c37612bd6565b50601f01601f191660200190565b600082601f830112612c5657600080fd5b8135612c69612c6482612c1d565b612bec565b818152846020838601011115612c7e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612cb157600080fd5b843567ffffffffffffffff80821115612cc957600080fd5b612cd588838901612c45565b95506020870135915080821115612ceb57600080fd5b612cf788838901612c45565b945060408701359150612d0982612acb565b90925060608601359080821115612d1f57600080fd5b50612d2c87828801612c45565b91505092959194509250565b600080600060608486031215612d4d57600080fd5b8335612d5881612acb565b92506020840135612d6881612acb565b929592945050506040919091013590565b60008060408385031215612d8c57600080fd5b50508035926020909101359150565b600080600080600060a08688031215612db357600080fd5b8535612dbe81612acb565b9450602086013567ffffffffffffffff811115612dda57600080fd5b612de688828901612c45565b945050604086013592506060860135612dfe81612acb565b91506080860135612e0e81612ae0565b809150509295509295909350565b600080600060608486031215612e3157600080fd5b833592506020840135612e4381612acb565b91506040840135612e5381612ae0565b809150509250925092565b600060208284031215612e7057600080fd5b81356119ed81612acb565b8015158114610d7757600080fd5b60008060408385031215612e9c57600080fd5b8235612ea781612acb565b91506020830135612b2381612e7b565b60008060008060808587031215612ecd57600080fd5b8435612ed881612acb565b93506020850135612ee881612acb565b925060408501359150606085013567ffffffffffffffff811115612f0b57600080fd5b612d2c87828801612c45565b60008060408385031215612f2a57600080fd5b8235612f3581612acb565b9150602083013567ffffffffffffffff811115612f5157600080fd5b612f5d85828601612c45565b9150509250929050565b600060208284031215612f7957600080fd5b813567ffffffffffffffff811115612f9057600080fd5b61173284828501612c45565b60008060408385031215612faf57600080fd5b8235612fba81612acb565b91506020830135612b2381612acb565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c9082168061300157607f821691505b6020821081036109f257634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b60008060006060848603121561306057600080fd5b835167ffffffffffffffff81111561307757600080fd5b8401601f8101861361308857600080fd5b8051613096612c6482612c1d565b8181528760208385010111156130ab57600080fd5b6130bc826020830160208601612b2e565b80955050505060208401516130d081612acb565b6040850151909250612e5381612ae0565b600080600080608085870312156130f757600080fd5b8451935060208086015161310a81612acb565b604087015190945061311b81612ae0565b606087015190935067ffffffffffffffff8082111561313957600080fd5b818801915088601f83011261314d57600080fd5b81518181111561315f5761315f612bd6565b8060051b9150613170848301612bec565b818152918301840191848101908b84111561318a57600080fd5b938501935b838510156131b457845192506131a483612e7b565b828252938501939085019061318f565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b805160208083015191908110156109f25760001960209190910360031b1b16919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016132845761328461325c565b5060010190565b60208082526010908201526f4e6f7420656e6f7567682066756e647360801b604082015260600190565b634e487b7160e01b600052600160045260246000fd5b818103818111156108c3576108c361325c565b808201808211156108c3576108c361325c565b80820281158282048414176108c3576108c361325c565b60008261332557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b601f821115610b7457600081815260208120601f850160051c810160208610156133945750805b601f850160051c820191505b81811015611b6d578281556001016133a0565b815167ffffffffffffffff8111156133cd576133cd612bd6565b6133e1816133db8454612fed565b8461336d565b602080601f83116001811461341657600084156133fe5750858301515b600019600386901b1c1916600185901b178555611b6d565b600085815260208120601f198616915b8281101561344557888601518255948401946001909101908401613426565b50858210156134635787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906134a690830184612b52565b9695505050505050565b6000602082840312156134c257600080fd5b81516119ed81612a98565b634e487b7160e01b600052603160045260246000fdfea264697066735822122031503530b2546436cfcf9f80be020b536587b22cfc7bbbe651c94ddea2180b9664736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061026b5760003560e01c806370a0823111610144578063c4ae3168116100b6578063d96a094a1161007a578063d96a094a146107c8578063e985e9c5146107db578063eb685c4714610824578063f2fde38b14610844578063f4a0a52814610864578063fcfff16f1461088457600080fd5b8063c4ae316814610740578063c87b56dd14610755578063cbce4c9714610775578063d0def52114610788578063d85d3d27146107a857600080fd5b806394a53d411161010857806394a53d411461069c57806395d89b41146106b6578063a22cb465146106cb578063a7f93ebd146106eb578063b88d4fde14610700578063c457fb371461071357600080fd5b806370a082311461052b578063833b7b781461054b5780638bbf58b3146105fa5780638cabe05a146106105780638da5cb5b1461067957600080fd5b80633ccfd60b116101dd57806354fd4d50116101a157806354fd4d50146104935780635944c753146104a95780635c975abb146104c957806360f96a8f146104e15780636352211e146104f65780636f2ddd931461051657600080fd5b80633ccfd60b1461041857806342842e0e1461042d57806342966c68146104405780634472167b146104605780634f6ccce71461047357600080fd5b8063158ef93e1161022f578063158ef93e1461034857806318160ddd146103675780631eb40e211461038657806323b872dd146103a65780632a55205a146103b95780632f745c59146103f857600080fd5b806301ffc9a71461027757806304634d8d146102ac57806306fdde03146102ce578063081812fc146102f0578063095ea7b31461032857600080fd5b3661027257005b600080fd5b34801561028357600080fd5b50610297610292366004612aae565b61089e565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102cc6102c7366004612af5565b6108c9565b005b3480156102da57600080fd5b506102e361090f565b6040516102a39190612b7e565b3480156102fc57600080fd5b5061031061030b366004612b91565b6109a1565b6040516001600160a01b0390911681526020016102a3565b34801561033457600080fd5b506102cc610343366004612baa565b6109f8565b34801561035457600080fd5b5060165461029790610100900460ff1681565b34801561037357600080fd5b506008545b6040519081526020016102a3565b34801561039257600080fd5b506102cc6103a1366004612c9b565b610abc565b6102cc6103b4366004612d38565b610b69565b3480156103c557600080fd5b506103d96103d4366004612d79565b610b79565b604080516001600160a01b0390931683526020830191909152016102a3565b34801561040457600080fd5b50610378610413366004612baa565b610c95565b34801561042457600080fd5b506102cc610d1c565b6102cc61043b366004612d38565b610d7a565b34801561044c57600080fd5b506102cc61045b366004612b91565b610d95565b61037861046e366004612d9b565b610dc5565b34801561047f57600080fd5b5061037861048e366004612b91565b610ea1565b34801561049f57600080fd5b5061037860185481565b3480156104b557600080fd5b506102cc6104c4366004612e1c565b610f0b565b3480156104d557600080fd5b5060165460ff16610297565b3480156104ed57600080fd5b50610310610fa9565b34801561050257600080fd5b50610310610511366004612b91565b610ff2565b34801561052257600080fd5b506102e3611045565b34801561053757600080fd5b50610378610546366004612e5e565b6110d3565b34801561055757600080fd5b506105c6610566366004612b91565b60408051606080820183526000808352602080840182905292840181905293845260108252928290208251938401835280546001600160a01b0381168552600160a01b90046001600160601b031691840191909152600101549082015290565b6040805182516001600160a01b031681526020808401516001600160601b03169082015291810151908201526060016102a3565b34801561060657600080fd5b5061037860195481565b34801561061c57600080fd5b506105c660408051606081018252600080825260208201819052918101919091525060408051606081018252600e546001600160a01b0381168252600160a01b90046001600160601b03166020820152600f549181019190915290565b34801561068557600080fd5b50600c5461010090046001600160a01b0316610310565b3480156106a857600080fd5b506013546102979060ff1681565b3480156106c257600080fd5b506102e361113e565b3480156106d757600080fd5b506102cc6106e6366004612e89565b61114d565b3480156106f757600080fd5b50600d54610378565b6102cc61070e366004612eb7565b6111b9565b34801561071f57600080fd5b5061037861072e366004612b91565b60009081526012602052604090205490565b34801561074c57600080fd5b506102cc6111cb565b34801561076157600080fd5b506102e3610770366004612b91565b61120c565b6102cc610783366004612baa565b6112e4565b34801561079457600080fd5b506103786107a3366004612f17565b611330565b3480156107b457600080fd5b506103786107c3366004612f67565b6113ae565b6102cc6107d6366004612b91565b6113bf565b3480156107e757600080fd5b506102976107f6366004612f9c565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561083057600080fd5b506102cc61083f366004612d79565b611547565b34801561085057600080fd5b506102cc61085f366004612e5e565b61157b565b34801561087057600080fd5b506102cc61087f366004612b91565b6115b3565b34801561089057600080fd5b50601a546102979060ff1681565b60006001600160e01b0319821663393a4ff760e11b14806108c357506108c3826115eb565b92915050565b600c5461010090046001600160a01b031633146109015760405162461bcd60e51b81526004016108f890612fca565b60405180910390fd5b61090b8282611610565b5050565b60606005805461091e90612fed565b80601f016020809104026020016040519081016040528092919081815260200182805461094a90612fed565b80156109975780601f1061096c57610100808354040283529160200191610997565b820191906000526020600020905b81548152906001019060200180831161097a57829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b03166109d75760405162461bcd60e51b81526004016108f890613021565b6000838152600260205260409020546001600160a01b031691505b50919050565b610a0233826116df565b610a4e5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016108f8565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a8382610ff2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600083806020019051810190610ad5919061304b565b92509250925060008060008086806020019051810190610af591906130e1565b935093509350935080600081518110610b1057610b106131c4565b6020026020010151601a60006101000a81548160ff021916908315150217905550610b5c8b8b8b8787878c8c89600181518110610b4f57610b4f6131c4565b602002602001015161173a565b5050505050505050505050565b610b74838383611795565b505050565b60008082600160801b8110610ba05760405162461bcd60e51b81526004016108f8906131da565b600085815260106020908152604091829020825160608101845281546001600160a01b038116808352600160a01b9091046001600160601b03169382019390935260019091015492810192909252610c2c575060408051606081018252600e546001600160a01b0381168252600160a01b90046001600160601b03166020820152600f54918101919091525b610c3a8582602001516119cb565b604082015190935015610c8a576000610c59600d5483602001516119cb565b9050600081836040015110610c6e5781610c74565b82604001515b9050808510610c835784610c85565b805b945050505b519250509250929050565b6000610ca0836110d3565b8210610cdf5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108f8565b6001600160a01b0383166000908152600960205260409020805483908110610d0957610d096131c4565b9060005260206000200154905092915050565b600c5461010090046001600160a01b03163314610d4b5760405162461bcd60e51b81526004016108f890612fca565b60405133904780156108fc02916000818181858888f19350505050158015610d77573d6000803e3d6000fd5b50565b610b74838383604051806020016040528060008152506119f4565b80610da03382611a4c565b610dbc5760405162461bcd60e51b81526004016108f890613201565b61090b82611a82565b601a5460009060ff1680610de95750600c546001600160a01b036101009091041633145b610e225760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108f8565b60165460ff1615610e5f5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016108f8565b610e698686611330565b90508315610e7e57610e7e8185306002611a8b565b6001600160601b03821615610e9857610e98818484611b75565b95945050505050565b6008546000908210610ee65760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108f8565b60088281548110610ef957610ef96131c4565b90600052602060002001549050919050565b60008381526020819052604090205483906001600160a01b0316610f415760405162461bcd60e51b81526004016108f890613021565b600c5461010090046001600160a01b03163314610f705760405162461bcd60e51b81526004016108f890612fca565b83610f7b3382611a4c565b610f975760405162461bcd60e51b81526004016108f890613201565b610fa2858585611b75565b5050505050565b6000602d303b14610fba5750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c610feb90613238565b901c905090565b60008181526020819052604081205482906001600160a01b03166110285760405162461bcd60e51b81526004016108f890613021565b50506000908152602081905260409020546001600160a01b031690565b6017805461105290612fed565b80601f016020809104026020016040519081016040528092919081815260200182805461107e90612fed565b80156110cb5780601f106110a0576101008083540402835291602001916110cb565b820191906000526020600020905b8154815290600101906020018083116110ae57829003601f168201915b505050505081565b60006001600160a01b0382166111225760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b60448201526064016108f8565b506001600160a01b031660009081526001602052604090205490565b60606006805461091e90612fed565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111c5848484846119f4565b50505050565b600c5461010090046001600160a01b031633146111fa5760405162461bcd60e51b81526004016108f890612fca565b60165461120a9060ff1615611c61565b565b60008181526020819052604090205460609082906001600160a01b03166112455760405162461bcd60e51b81526004016108f890613021565b6000838152600760205260409020805461125e90612fed565b80601f016020809104026020016040519081016040528092919081815260200182805461128a90612fed565b80156112d75780601f106112ac576101008083540402835291602001916112d7565b820191906000526020600020905b8154815290600101906020018083116112ba57829003601f168201915b5050505050915050919050565b60008181526020819052604090205481906001600160a01b031661131a5760405162461bcd60e51b81526004016108f890613021565b611325826000611547565b610b74338484610d7a565b601a5460009060ff16806113545750600c546001600160a01b036101009091041633145b61138d5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108f8565b6019805490600061139d83613272565b9190505590506108c3838383611ca6565b60006108c333836000806000610dc5565b60008181526020819052604090205481906001600160a01b03166113f55760405162461bcd60e51b81526004016108f890613021565b6000828152601260205260409020548061143f5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016108f8565b8034101561145f5760405162461bcd60e51b81526004016108f89061328b565b600061146a84610ff2565b90506001600160a01b038116611482576114826132b5565b336001600160a01b038216036114d15760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016108f8565b60405163095ea7b360e01b815233600482015260248101859052309063095ea7b390604401600060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b50505050611533813386610d7a565b505050600090815260126020526040812055565b816115523382611a4c565b61156e5760405162461bcd60e51b81526004016108f890613201565b610b748383306002611a8b565b600c5461010090046001600160a01b031633146115aa5760405162461bcd60e51b81526004016108f890612fca565b610d7781611cb1565b600c5461010090046001600160a01b031633146115e25760405162461bcd60e51b81526004016108f890612fca565b610d7781611d0b565b60006001600160e01b03198216639248994960e01b14806108c357506108c382611d92565b6001600160601b0381166127108111156116675760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108f8565b6116718383611db7565b80516020808301516001600160a01b03928316600160a01b6001600160601b039283160217600e55604093840151600f55835192871683528516908201527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc910160405180910390a1505050565b6000806116eb83610ff2565b9050836001600160a01b0316816001600160a01b0316148061173257506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b60016019556040805180820190915260088152674f70656e4e46547360c01b6020820152611769906004611e24565b6117738989611e6e565b61177c87611eb7565b61178a868686868686611ef0565b505050505050505050565b806117a03382611a4c565b6117bc5760405162461bcd60e51b81526004016108f890613201565b6001600160a01b0384166118125760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016108f8565b6001600160a01b0383166118685760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016108f8565b61187182610ff2565b6001600160a01b0316846001600160a01b0316146118c25760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016108f8565b6118cd848484611f77565b600082815260026020526040902080546001600160a01b03191690556001600160a01b0384811690841614611984576001600160a01b038416600090815260016020819052604082208054919290916119279084906132cb565b90915550506001600160a01b038316600090815260016020819052604082208054919290916119579084906132de565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60006127106119e36001600160601b038416856132f1565b6119ed9190613308565b9392505050565b6119ff848484611795565b611a0b84848484611f82565b6111c55760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b60448201526064016108f8565b6000611a5883836116df565b806119ed5750826001600160a01b0316611a71836109a1565b6001600160a01b0316149392505050565b610d7781612021565b83611a963382611a4c565b611ab25760405162461bcd60e51b81526004016108f890613201565b83600160801b8110611ad65760405162461bcd60e51b81526004016108f8906131da565b60008681526012602090815260409182902087905581518881529081018790527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b910160405180910390a16002836002811115611b3557611b3561332a565b03611b4a57611b4584600161114d565b611b6d565b6001836002811115611b5e57611b5e61332a565b03611b6d57611b6d84876109f8565b505050505050565b6001600160601b038116612710811115611bcc5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108f8565b611bd68383611db7565b6000858152601060209081526040918290208351848301516001600160601b03908116600160a01b026001600160a01b039283161783559484015160019092019190915582518881529087169181019190915291841682820152517f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619181900360600190a150505050565b6016805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610b7483838361204c565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80600160801b8110611d2f5760405162461bcd60e51b81526004016108f8906131da565b600d829055600e54611d5b906001600160a01b03811690600160a01b90046001600160601b0316611610565b6040518281527f02ebcb79e897ca3a22313ba6de8fc964409964de565fb4bb6a0927871756b88c9060200160405180910390a15050565b60006001600160e01b031982166350130d5360e01b14806108c357506108c3826120bf565b6040805160608101825260008082526020820181905291810191909152604080516060810182526001600160a01b03851681526001600160601b0384166020820152601354909182019060ff16611e0f576000611e1b565b611e1b600d54856119cb565b90529392505050565b601654610100900460ff1615611e4c5760405162461bcd60e51b81526004016108f890613340565b6016805461ff0019166101001790556017611e6783826133b3565b5060185550565b60045460ff1615611e915760405162461bcd60e51b81526004016108f890613340565b6004805460ff191660011790556005611eaa83826133b3565b506006610b7482826133b3565b600c5460ff1615611eda5760405162461bcd60e51b81526004016108f890613340565b600c805460ff19166001179055610d7781611cb1565b6013805460ff1916821515179055600d869055611f0d8585611db7565b805160208201516001600160601b0316600160a01b026001600160a01b0390911617600e5560400151600f55611f438383611db7565b805160208201516001600160601b0316600160a01b026001600160a01b039091161760145560400151601555505050505050565b610b748383836120e4565b60006001600160a01b0384163b1580610e985750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611fca9033908a9089908990600401613473565b6020604051808303816000875af1158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d91906134b0565b6001600160e01b0319161495945050505050565b60008181526010602090815260408083208381556001018390556012909152812055610d778161211d565b600e546120759082906001600160a01b03811690600160a01b90046001600160601b0316611b75565b600c546001600160a01b0384811661010090920416146120b4576120b481600d54856120af600c546001600160a01b036101009091041690565b6121e8565b610b7483838361247c565b60006001600160e01b031982166398396bd360e01b14806108c357506108c3826124d5565b600081815260126020526040902054612103908290846120af83610ff2565b600081815260126020526040812055610b748383836124fa565b600061212882610ff2565b9050612134818361250e565b6000828152600b6020526040812054600854909190612155906001906132cb565b905060006008828154811061216c5761216c6131c4565b6000918252602080832090910154808352600b9091526040808320869055878352822091909155600880549192508291859081106121ac576121ac6131c4565b60009182526020909120015560088054806121c9576121c96134cd565b60019003818190600052602060002001600090559055610fa28561261c565b60115460ff161561222a5760405162461bcd60e51b815260206004820152600c60248201526b4e6f2072652d656e7472792160a01b60448201526064016108f8565b6011805460ff19166001179055348311156122575760405162461bcd60e51b81526004016108f89061328b565b6001600160a01b03821661229d5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210313abcb2b960991b60448201526064016108f8565b6001600160a01b0381166122e45760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b63632b960911b60448201526064016108f8565b60008060008060006122f68989610b79565b90955093506001600160a01b03851661230e57600093505b600088118061231d5750600084115b156123c257601454612340908990600160a01b90046001600160601b03166119cb565b925061234c83856132de565b34101561236b5760405162461bcd60e51b81526004016108f89061328b565b61237583856132de565b88111561239c576123998661238a85876132de565b612394908b6132cb565b61263c565b91505b6123a6858561263c565b6014549094506123bf906001600160a01b03168461263c565b92505b826123cd85846132de565b6123d791906132de565b6123e190346132cb565b90506123ed878261263c565b604080518b8152602081018b90526001600160a01b038981168284015260608201869052888116608083015260a0820188905260c082018790528a1660e0820152610100810183905290519192507f3fd8cbcd9af698ecb35353cccbfbb5f149fbcfcfe43f043bbfc95c3feb2307b891908190036101200190a150506011805460ff1916905550505050505050565b61248683826126b2565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610b748383836126f0565b60006001600160e01b031982166386bbc65360e01b14806108c357506108c382612714565b612504838261250e565b610b7482826126b2565b6000818152600a6020526040812054906001612529856110d3565b61253391906132cb565b90508082146125ca576001600160a01b0384166000908152600960205260408120805483908110612566576125666131c4565b906000526020600020015490508060096000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106125aa576125aa6131c4565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b038716835260099091529020805480612600576126006134cd565b6001900381819060005260206000200160009055905550505050565b600081815260076020526040812061263391612a4a565b610d7781612739565b600080821561269e576040516001600160a01b038516906108fc9085906000818181858888f193505050503d8060008114612693576040519150601f19603f3d011682016040523d82523d6000602084013e612698565b606091505b50909150505b806126aa576000611732565b509092915050565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b600081815260076020526040902061270883826133b3565b50610b7483838361282a565b600063152a902d60e11b6001600160e01b0319831614806108c357506108c3826129b5565b600061274482610ff2565b90506001600160a01b03811661276c5760405162461bcd60e51b81526004016108f890613021565b6001600160a01b038116600090815260016020526040902054612791576127916132b5565b6001600160a01b038116600090815260016020819052604082208054919290916127bc9084906132cb565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166128775760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016108f8565b6000818152602081905260409020546001600160a01b0316156128d35760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016108f8565b6001600160a01b038316600090815260016020819052604082208054919290916128fe9084906132de565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129746000848360405180602001604052806000815250611f82565b610b745760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016108f8565b60006307f5828d60e41b6001600160e01b0319831614806108c357506108c382600063780e9d6360e01b6001600160e01b0319831614806108c357506108c3826000635b5e139f60e01b6001600160e01b0319831614806108c357506108c38260006380ac58cd60e01b6001600160e01b0319831614806108c357506001600160e01b031982166301ffc9a760e01b146108c3565b508054612a5690612fed565b6000825580601f10612a66575050565b601f016020900490600052602060002090810190610d7791905b80821115612a945760008155600101612a80565b5090565b6001600160e01b031981168114610d7757600080fd5b600060208284031215612ac057600080fd5b81356119ed81612a98565b6001600160a01b0381168114610d7757600080fd5b6001600160601b0381168114610d7757600080fd5b60008060408385031215612b0857600080fd5b8235612b1381612acb565b91506020830135612b2381612ae0565b809150509250929050565b60005b83811015612b49578181015183820152602001612b31565b50506000910152565b60008151808452612b6a816020860160208601612b2e565b601f01601f19169290920160200192915050565b6020815260006119ed6020830184612b52565b600060208284031215612ba357600080fd5b5035919050565b60008060408385031215612bbd57600080fd5b8235612bc881612acb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c1557612c15612bd6565b604052919050565b600067ffffffffffffffff821115612c3757612c37612bd6565b50601f01601f191660200190565b600082601f830112612c5657600080fd5b8135612c69612c6482612c1d565b612bec565b818152846020838601011115612c7e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612cb157600080fd5b843567ffffffffffffffff80821115612cc957600080fd5b612cd588838901612c45565b95506020870135915080821115612ceb57600080fd5b612cf788838901612c45565b945060408701359150612d0982612acb565b90925060608601359080821115612d1f57600080fd5b50612d2c87828801612c45565b91505092959194509250565b600080600060608486031215612d4d57600080fd5b8335612d5881612acb565b92506020840135612d6881612acb565b929592945050506040919091013590565b60008060408385031215612d8c57600080fd5b50508035926020909101359150565b600080600080600060a08688031215612db357600080fd5b8535612dbe81612acb565b9450602086013567ffffffffffffffff811115612dda57600080fd5b612de688828901612c45565b945050604086013592506060860135612dfe81612acb565b91506080860135612e0e81612ae0565b809150509295509295909350565b600080600060608486031215612e3157600080fd5b833592506020840135612e4381612acb565b91506040840135612e5381612ae0565b809150509250925092565b600060208284031215612e7057600080fd5b81356119ed81612acb565b8015158114610d7757600080fd5b60008060408385031215612e9c57600080fd5b8235612ea781612acb565b91506020830135612b2381612e7b565b60008060008060808587031215612ecd57600080fd5b8435612ed881612acb565b93506020850135612ee881612acb565b925060408501359150606085013567ffffffffffffffff811115612f0b57600080fd5b612d2c87828801612c45565b60008060408385031215612f2a57600080fd5b8235612f3581612acb565b9150602083013567ffffffffffffffff811115612f5157600080fd5b612f5d85828601612c45565b9150509250929050565b600060208284031215612f7957600080fd5b813567ffffffffffffffff811115612f9057600080fd5b61173284828501612c45565b60008060408385031215612faf57600080fd5b8235612fba81612acb565b91506020830135612b2381612acb565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c9082168061300157607f821691505b6020821081036109f257634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b60008060006060848603121561306057600080fd5b835167ffffffffffffffff81111561307757600080fd5b8401601f8101861361308857600080fd5b8051613096612c6482612c1d565b8181528760208385010111156130ab57600080fd5b6130bc826020830160208601612b2e565b80955050505060208401516130d081612acb565b6040850151909250612e5381612ae0565b600080600080608085870312156130f757600080fd5b8451935060208086015161310a81612acb565b604087015190945061311b81612ae0565b606087015190935067ffffffffffffffff8082111561313957600080fd5b818801915088601f83011261314d57600080fd5b81518181111561315f5761315f612bd6565b8060051b9150613170848301612bec565b818152918301840191848101908b84111561318a57600080fd5b938501935b838510156131b457845192506131a483612e7b565b828252938501939085019061318f565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b805160208083015191908110156109f25760001960209190910360031b1b16919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016132845761328461325c565b5060010190565b60208082526010908201526f4e6f7420656e6f7567682066756e647360801b604082015260600190565b634e487b7160e01b600052600160045260246000fd5b818103818111156108c3576108c361325c565b808201808211156108c3576108c361325c565b80820281158282048414176108c3576108c361325c565b60008261332557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b601f821115610b7457600081815260208120601f850160051c810160208610156133945750805b601f850160051c820191505b81811015611b6d578281556001016133a0565b815167ffffffffffffffff8111156133cd576133cd612bd6565b6133e1816133db8454612fed565b8461336d565b602080601f83116001811461341657600084156133fe5750858301515b600019600386901b1c1916600185901b178555611b6d565b600085815260208120601f198616915b8281101561344557888601518255948401946001909101908401613426565b50858210156134635787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906134a690830184612b52565b9695505050505050565b6000602082840312156134c257600080fd5b81516119ed81612a98565b634e487b7160e01b600052603160045260246000fdfea264697066735822122031503530b2546436cfcf9f80be020b536587b22cfc7bbbe651c94ddea2180b9664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      },
      "getDefaultRoyalty()": {
        "returns": {
          "receiver": ": default royalty receiver infos"
        }
      },
      "getTokenRoyalty(uint256)": {
        "params": {
          "tokenID": ": token ID"
        },
        "returns": {
          "receiver": ":  token royalty receiver infos"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setMintPrice(uint256)": {
        "params": {
          "price": ": default price in wei"
        }
      },
      "setTokenPrice(uint256,uint256)": {
        "params": {
          "price": ": token price in wei",
          "tokenID": ": token ID"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId to test"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "getDefaultRoyalty()": {
        "notice": "GET default royalty info"
      },
      "getTokenRoyalty(uint256)": {
        "notice": "GET token royalty info"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty info"
      },
      "setMintPrice(uint256)": {
        "notice": "SET default mint price"
      },
      "setTokenPrice(uint256,uint256)": {
        "notice": "SET token price"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty info"
      },
      "supportsInterface(bytes4)": {
        "notice": "test if this interface is supported"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      },
      "withdraw()": {
        "notice": "withdraw eth"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 481,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 485,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 489,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 495,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1404,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 1406,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1408,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1412,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1081,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1086,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1090,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1094,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 196,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_owner",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 307,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_mintPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 310,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_defaultRoyalty",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(ReceiverInfos)4851_storage"
      },
      {
        "astId": 315,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenRoyalty",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(ReceiverInfos)4851_storage)"
      },
      {
        "astId": 1545,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_locked",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 1585,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenPrice",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1587,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "minimal",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 1590,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_treasury",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(ReceiverInfos)4851_storage"
      },
      {
        "astId": 2514,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "initialized",
        "offset": 1,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 11,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "template",
        "offset": 0,
        "slot": "23",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "version",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2302,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 5020,
        "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "open",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(ReceiverInfos)4851_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IOpenReceiverInfos.ReceiverInfos)",
        "numberOfBytes": "32",
        "value": "t_struct(ReceiverInfos)4851_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ReceiverInfos)4851_storage": {
        "encoding": "inplace",
        "label": "struct IOpenReceiverInfos.ReceiverInfos",
        "members": [
          {
            "astId": 4846,
            "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4848,
            "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "fee",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 4850,
            "contract": "src/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "minimum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}