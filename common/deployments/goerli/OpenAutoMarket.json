{
  "address": "0x8331F7Ca1F790141Efd77de4D58A97e506B22068",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royalties",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unspent",
          "type": "uint256"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetTokenPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params_",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "defaultPrice_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee_",
          "type": "uint96"
        },
        {
          "internalType": "bool[]",
          "name": "options",
          "type": "bool[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee_",
          "type": "uint96"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parent",
      "outputs": [
        {
          "internalType": "address",
          "name": "parent_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDefaultPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "internalType": "enum IOpenMarketable.Approve",
          "name": "approveType",
          "type": "uint8"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "setTokenRoyaltyReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7cde9a66c61446f4b2d5c8b2870fa6d1f138715c5040b96ac429015d3610446b",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x8331F7Ca1F790141Efd77de4D58A97e506B22068",
    "transactionIndex": 53,
    "gasUsed": "3046574",
    "logsBloom": "0x
    "blockHash": "0xb0801fb453167caa57f5d25ae6f86df347dce82ba6d66a109d822b51aeb890df",
    "transactionHash": "0x7cde9a66c61446f4b2d5c8b2870fa6d1f138715c5040b96ac429015d3610446b",
    "logs": [],
    "blockNumber": 7603750,
    "cumulativeGasUsed": "16672521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "ea97d28e0c363bcd85ce074365bc5ad6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalties\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unspent\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDefaultPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params_\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee_\",\"type\":\"uint96\"},{\"internalType\":\"bool[]\",\"name\":\"options\",\"type\":\"bool[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee_\",\"type\":\"uint96\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"enum IOpenMarketable.Approve\",\"name\":\"approveType\",\"type\":\"uint8\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setTokenRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}},\"getDefaultRoyalty()\":{\"returns\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"getTokenRoyalty(uint256)\":{\"params\":{\"tokenID\":\": token ID\"},\"returns\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setDefaultPrice(uint256)\":{\"params\":{\"price\":\": default price in wei\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setTokenPrice(uint256,uint256)\":{\"params\":{\"price\":\": token price in wei\",\"tokenID\":\": token ID\"}},\"setTokenPrice(uint256,uint256,address,uint8)\":{\"params\":{\"price\":\": token price in wei\",\"tokenID\":\": token ID\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"setTokenRoyaltyReceiver(uint256,address)\":{\"params\":{\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId to test\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"getDefaultRoyalty()\":{\"notice\":\"GET default royalty info\"},\"getTokenRoyalty(uint256)\":{\"notice\":\"GET token royalty info\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"setDefaultPrice(uint256)\":{\"notice\":\"SET default mint price\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty info\"},\"setTokenPrice(uint256,uint256)\":{\"notice\":\"SET token price\"},\"setTokenPrice(uint256,uint256,address,uint8)\":{\"notice\":\"SET token price\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty info\"},\"setTokenRoyaltyReceiver(uint256,address)\":{\"notice\":\"SET token royalty receiver\"},\"supportsInterface(bytes4)\":{\"notice\":\"test if this interface is supported\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"},\"withdraw()\":{\"notice\":\"withdraw eth\"},\"withdraw(address)\":{\"notice\":\"withdraw token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/OpenAutoMarket.sol\":\"OpenAutoMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool public initialized;\\n    string public template;\\n    uint256 public version;\\n\\n    function parent() external view override (IOpenCloneable) returns (address parent_) {\\n        // eip1167 deployed code = 45 bytes = 10 bytes + 20 bytes address + 15 bytes\\n        // extract bytes 10 to 30: shift 2 bytes (16 bits) then truncate to address 20 bytes (uint160)\\n        return\\n            (address(this).code.length == 45)\\n            ? address(uint160(uint256(bytes32(address(this).code)) >> 16))\\n            : address(0);\\n    }\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    )\\n        public\\n        virtual\\n        override (IOpenCloneable);\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenCloneable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        initialized = true;\\n\\n        template = template_;\\n        version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0x6a358c8664b5dea88d61de443332d5744ae1969aa455874ebf82be079005e36e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Already initialized\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xeaa767265a7f2805563fa0830dac552b6c55b5660499fbeba8609fadc4bc2e7e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-2981: NFT Royalty Standard\\n// https://eips.ethereum.org/EIPS/eip-2981\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/common/ERC2981.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC2981 \\u2014\\u2014 IERC2981\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nabstract contract OpenERC2981 is IERC2981, OpenERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 fee;\\n    }\\n\\n    uint256 internal _defaultPrice;\\n    RoyaltyInfo internal _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) internal _tokenRoyaltyInfo;\\n\\n    uint96 private constant _MAX_FEE = 10_000;\\n\\n    modifier notTooExpensive(uint256 price) {\\n        /// otherwise may overflow\\n        require(price < 2 ** 128, \\\"Too expensive\\\");\\n        _;\\n    }\\n\\n    modifier lessThanMaxFee(uint256 fee) {\\n        require(fee <= _MAX_FEE, \\\"Royalty fee exceed price\\\");\\n        _;\\n    }\\n\\n    function royaltyInfo(uint256 tokenID, uint256 price)\\n        public\\n        view\\n        override (IERC2981)\\n        notTooExpensive(price)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenID];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        if (price < _defaultPrice) {\\n            price = _defaultPrice;\\n        }\\n\\n        royaltyAmount = (price * royalty.fee) / _MAX_FEE;\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x46d42129ece609515f99b860215b6d448fd3f6c7dccaa62d4d3ccdc576d5eb02\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    modifier existsToken(uint256 tokenID) {\\n        require(_owners[tokenID] != address(0), \\\"Invalid token ID\\\");\\n        _;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenID)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, data);\\n    }\\n\\n    function approve(address spender, uint256 tokenID) public override (IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override (IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID)\\n        public\\n        payable\\n        override (IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x80ac58cd // = type(IERC721).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override (IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID)\\n        public\\n        view\\n        override (IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _owners[tokenID];\\n    }\\n\\n    function getApproved(uint256 tokenID)\\n        public\\n        view\\n        override (IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override (IERC721)\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(address to, string memory, uint256 tokenID) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(_owners[tokenID] == address(0), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        require(owner != address(0), \\\"Invalid token ID\\\");\\n\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual {}\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (bool ownerOrOperator)\\n    {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n    {\\n        _transferFrom(from, to, tokenID);\\n\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 tokenID)\\n        private\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _isERC721Receiver(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n        returns (bool)\\n    {\\n        return to.code.length == 0\\n            || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data)\\n                == IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID)\\n        private\\n        view\\n        returns (bool ownerOrApproved)\\n    {\\n        ownerOrApproved =\\n            (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n}\\n\",\"keccak256\":\"0x26036e8c81426420a8783782823aee158f7b899e689e267b9bc9db3d67a8c40d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//      OpenERC165\\n//           |\\n//      OpenERC721\\n//           |\\n//  OpenERC721Enumerable \\u2014\\u2014 IERC721Enumerable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override (IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0x6b88e13c23ec1cd0ddca99f280ad37b07ab7806221e57cba40cb9b6a7d7de5a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//     OpenERC165\\n//          |\\n//     OpenERC721\\n//          |\\n//  OpenERC721Metadata \\u2014\\u2014 IERC721Metadata\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID)\\n        external\\n        view\\n        virtual\\n        override (IERC721Metadata)\\n        existsToken(tokenID)\\n        returns (string memory)\\n    {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Already initialized\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mint(address to, string memory newTokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _tokenURIs[tokenID] = newTokenURI;\\n\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenURIs[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0xc92300d2ea8a44f0a1a7387e811841aff9c59cc8542024b5e90f630611c19837\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenGuard\\n//\\npragma solidity 0.8.9;\\n\\nabstract contract OpenGuard {\\n    bool private _locked;\\n\\n    modifier reEntryGuard() {\\n        require(!_locked, \\\"No re-entry!\\\");\\n\\n        _locked = true;\\n\\n        _;\\n\\n        _locked = false;\\n    }\\n}\\n\",\"keccak256\":\"0xcb1fe9d2c6a25e3338c30e73120ac1fd7e8e313d699d899194982052db81a824\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |            |             |\\n//   OpenERC721    OpenERC173   OpenERC2981\\n//      (NFT)      (Ownable)   (RoyaltyInfo)\\n//        |            |             |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenMarketable \\u2014\\u2014 IOpenMarketable - OpenGuard\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenGuard.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\n\\nabstract contract OpenMarketable is\\n    IOpenMarketable,\\n    OpenERC721,\\n    OpenERC173,\\n    OpenERC2981,\\n    OpenGuard\\n{\\n    mapping(uint256 => uint256) internal _tokenPrice;\\n\\n    receive() external payable override (IOpenMarketable) {}\\n\\n    /// @notice SET default mint price\\n    /// @param price : default price in wei\\n    function setDefaultPrice(uint256 price) public override (IOpenMarketable) onlyOwner {\\n        _setDefaultPrice(price);\\n    }\\n\\n    /// @notice SET default royalty info\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setDefaultRoyalty(address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(receiver, fee);\\n    }\\n\\n    /// @notice SET token price\\n    /// @param tokenID : token ID\\n    /// @param price : token price in wei\\n    function setTokenPrice(uint256 tokenID, uint256 price)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        setTokenPrice(tokenID, price, address(0), Approve.None);\\n    }\\n\\n    /// @notice SET token price\\n    /// @param tokenID : token ID\\n    /// @param price : token price in wei\\n    function setTokenPrice(uint256 tokenID, uint256 price, address approved, Approve approveType)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenPrice(tokenID, price);\\n\\n        if (approveType == Approve.All) {\\n            setApprovalForAll(approved, true);\\n        } else if (approveType == Approve.One) {\\n            approve(approved, tokenID);\\n        }\\n    }\\n\\n    /// @notice SET token royalty info\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10_000\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        existsToken(tokenID)\\n        onlyOwner\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    /// @notice SET token royalty receiver\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    function setTokenRoyaltyReceiver(uint256 tokenID, address receiver)\\n        public\\n        override (IOpenMarketable)\\n        existsToken(tokenID)\\n        onlyOwner\\n    {\\n        _tokenRoyaltyInfo[tokenID].receiver = receiver;\\n    }\\n\\n    function getDefaultPrice() public view override (IOpenMarketable) returns (uint256) {\\n        return _defaultPrice;\\n    }\\n\\n    function getTokenPrice(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (uint256)\\n    {\\n        return _tokenPrice[tokenID];\\n    }\\n\\n    /// @notice GET default royalty info\\n    /// @return receiver : address of the royalty receiver, or address(0) to reset\\n    /// @return fee : fee Numerator, less than 10_000\\n    function getDefaultRoyalty()\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (address receiver, uint96 fee)\\n    {\\n        receiver = _defaultRoyaltyInfo.receiver;\\n        fee = _defaultRoyaltyInfo.fee;\\n    }\\n\\n    /// @notice GET token royalty info\\n    /// @param tokenID : token ID\\n    /// @return receiver : address of the royalty receiver, or address(0) to reset\\n    /// @return fee : fee Numerator, less than 10_000\\n    function getTokenRoyalty(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (address receiver, uint96 fee)\\n    {\\n        receiver = _tokenRoyaltyInfo[tokenID].receiver;\\n        fee = _tokenRoyaltyInfo[tokenID].fee;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721, OpenERC173, OpenERC2981)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenMarketable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _setTokenRoyalty(tokenID, _defaultRoyaltyInfo.receiver, _defaultRoyaltyInfo.fee);\\n\\n        _pay(tokenID, _defaultPrice, to, owner());\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenRoyaltyInfo[tokenID];\\n        delete _tokenPrice[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        /// Transfer: pay token price (including royalties) to previous token owner (and royalty receiver)\\n        _pay(tokenID, _tokenPrice[tokenID], to, ownerOf(tokenID));\\n\\n        delete _tokenPrice[tokenID];\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _setDefaultRoyalty(address receiver, uint96 fee) internal lessThanMaxFee(fee) {\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, fee);\\n\\n        emit SetDefaultRoyalty(receiver, fee);\\n    }\\n\\n    function _setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        internal\\n        lessThanMaxFee(fee)\\n    {\\n        _tokenRoyaltyInfo[tokenID] = RoyaltyInfo(receiver, fee);\\n\\n        emit SetTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function _setTokenPrice(uint256 tokenID, uint256 price) internal notTooExpensive(price) {\\n        _tokenPrice[tokenID] = price;\\n\\n        emit SetTokenPrice(tokenID, price);\\n    }\\n\\n    function _setDefaultPrice(uint256 price) internal notTooExpensive(price) {\\n        _defaultPrice = price;\\n\\n        emit SetDefaultPrice(price);\\n    }\\n\\n    function _pay(uint256 tokenID, uint256 price, address buyer, address seller)\\n        private\\n        reEntryGuard\\n    {\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n        if (msg.value == 0) {\\n            return;\\n        }\\n\\n        require(buyer != address(0), \\\"Invalid buyer\\\");\\n        require(seller != address(0), \\\"Invalid seller\\\");\\n\\n        address receiver;\\n        uint256 royalties;\\n        uint256 paid;\\n        uint256 unspent = msg.value;\\n\\n        if (price > 0 && buyer != seller) {\\n            (receiver, royalties) = royaltyInfo(tokenID, price);\\n            if (receiver == address(0)) {\\n                royalties = 0;\\n            }\\n\\n            require(royalties <= price, \\\"Invalid royalties\\\");\\n\\n            /// Transfer amount to be paid to seller, the previous owner\\n            paid = price - royalties;\\n            if (paid > 0) {\\n                unspent = unspent - paid;\\n                payable(seller).transfer(paid);\\n            }\\n\\n            /// Transfer royalties to receiver\\n            if (royalties > 0) {\\n                unspent = unspent - royalties;\\n                payable(receiver).transfer(royalties);\\n            }\\n        }\\n\\n        assert(paid + royalties + unspent == msg.value);\\n\\n        /// Transfer back unspent funds to buyer\\n        if (unspent > 0) {\\n            payable(buyer).transfer(unspent);\\n        }\\n\\n        emit Pay(tokenID, price, seller, paid, receiver, royalties, buyer, unspent);\\n    }\\n}\\n\",\"keccak256\":\"0x75ceef48e014cd8e0b39c0f67008abdbceab41f5ef7824298059107253725aaa\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                       |             |              |\\n//   OpenERC721                            OpenERC2981    OpenERC173    OpenCloneable\\n//     (NFT)                              (RoyaltyInfo)    (ownable)          |\\n//       |                                        |            |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014   |     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014              |\\n//       |                        |           |   |     |      |              |\\n//  OpenERC721Metadata  OpenERC721Enumerable  |   \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |              |\\n//       |                        |           |   |            |              |\\n//       |                        |      OpenMarketable   OpenPauseable       |\\n//       |                        |             |              |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs \\u2014\\u2014 IOpenNFTs\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\nabstract contract OpenNFTs is\\n    IOpenNFTs,\\n    OpenERC721Metadata,\\n    OpenERC721Enumerable,\\n    OpenMarketable,\\n    OpenPauseable,\\n    OpenCloneable\\n{\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext;\\n\\n    /// @notice onlyMinter, by default only owner can mint, can be overriden\\n    modifier onlyMinter() virtual {\\n        require(msg.sender == owner(), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID)\\n        external\\n        override (IOpenNFTs)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _burn(tokenID);\\n    }\\n\\n    /// @notice withdraw eth\\n    function withdraw() external override (IOpenNFTs) onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /// @notice withdraw token\\n    function withdraw(address token) external override (IOpenNFTs) onlyOwner {\\n        require(\\n            IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this))),\\n            \\\"Withdraw failed\\\"\\n        );\\n    }\\n\\n    function mint(address minter, string memory tokenURI)\\n        public\\n        override (IOpenNFTs)\\n        onlyMinter\\n        returns (uint256 tokenID)\\n    {\\n        tokenID = tokenIdNext++;\\n        _mint(minter, tokenURI, tokenID);\\n    }\\n\\n    /// @notice test if this interface is supported\\n    /// @param interfaceId interfaceId to test\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (\\n            OpenMarketable, OpenERC721Metadata, OpenERC721Enumerable, OpenCloneable, OpenPauseable\\n        )\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenNFTs).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice _initialize\\n    /// @param name_ name of the NFT Collection\\n    /// @param symbol_ symbol of the NFT Collection\\n    /// @param owner_ owner of the NFT Collection\\n    // solhint-disable-next-line comprehensive-interface\\n    function _initialize(string memory name_, string memory symbol_, address owner_) internal {\\n        tokenIdNext = 1;\\n        OpenCloneable._initialize(\\\"OpenNFTs\\\", 4);\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n    }\\n\\n    /// @notice _mint\\n    /// @param minter minter address\\n    /// @param tokenURI token metdata URI\\n    /// @param tokenID token ID\\n    function _mint(address minter, string memory tokenURI, uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        override (OpenERC721, OpenMarketable, OpenERC721Enumerable)\\n    {\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x56c5d41c8a56a770b809ff9325a67260d0621ff212a9d54538dfb44cd67b3a06\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenPauseable \\u2013\\u2013 IOpenPauseable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override (IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override (IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC173)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenPauseable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5cea9abbaa11b92e93c7f88d48ad41b8bf22f66779e14c77c60f6c25edb55af8\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd91f944d2ad53e9c795a855167e495d4b533648a349fcb913e631cfe7b4013b7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x82d41cc520f5c9057e7bfc07873e3b9529792141e18dd5983bd882939879b9ef\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x05f823f0200e240d7187bdbe515f72d64e1eadbb137971e5c1e9a3c64ad04cd6\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1b0093a40ef61bbd99626cf148b24308677df0593ff427c3d4aed2fa1253e1a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data)\\n        external\\n        payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb17e8fbff5f139c0d2eb98e9841cb8b97e5b003436c3f3412a350503b87f94cb\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd040488949e399674a34c9b01b34245d76e41ab267620f49f171aae14d07875f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x72918d0b7d703c5cf08686014c2e0127ed56411c72c551232038ebcec4facc4d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa43438f26b96a4a3a488e1e9701ee7291e238498c27bb45a9530fe11dc865896\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    )\\n        external;\\n\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function parent() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7b3ea591edb9086e4f478610d5beaba87a38430f299ca19bfcad639622c901f1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    enum Approve {\\n        None,\\n        One,\\n        All\\n    }\\n\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(\\n        uint256 tokenID,\\n        uint256 price,\\n        address seller,\\n        uint256 paid,\\n        address receiver,\\n        uint256 royalties,\\n        address buyer,\\n        uint256 unspent\\n    );\\n\\n    receive() external payable;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price, address approved, Approve approveType)\\n        external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyaltyReceiver(uint256 tokenID, address receiver) external;\\n\\n    function getDefaultPrice() external view returns (uint256 price);\\n\\n    function getTokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getTokenRoyalty(uint256 tokenID)\\n        external\\n        view\\n        returns (address receiver, uint96 fee);\\n\\n    function getDefaultRoyalty() external view returns (address receiver, uint96 fee);\\n}\\n\",\"keccak256\":\"0x704dc37a45bfe2f4a19546e42dceb4d764fb1c65ce3cf8dc987faaf1ad0ab8f4\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function withdraw() external;\\n\\n    function withdraw(address token) external;\\n}\\n\",\"keccak256\":\"0x4e3eaf1492333531348abd1d137cca01d486e4ebf1e95816668a828f2a3161d8\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenAutoMarket {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 defaultPrice,\\n        address receiver,\\n        uint96 fee,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5edce272992d0157563db2addc3af63199c8f3678730171074c6116e29d03136\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.old.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/next/OpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                                         |               |\\n//   OpenERC721                                               OpenERC173     OpenCloneable\\n//     (NFT)                                                   (ownable)           |\\n//       |                                                         |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014               |\\n//       |                        |                  |      |      |               |\\n//  OpenERC721Metadata  OpenERC721Enumerable   OpenERC2981  |      |               |\\n//       |                        |           (RoyaltyInfo) |      |               |\\n//       |                        |                  |      |      |               |\\n//       |                        |                  \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |               |\\n//       |                        |                  |             |               |\\n//       |                        |            OpenMarketable OpenPauseable        |\\n//       |                        |                  |             |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs\\n//       |\\n//   OpenAutoMarket \\u2014\\u2014 IOpenAutoMarket\\n//\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenAutoMarket.sol\\\";\\nimport {IOpenNFTs as IOpenNFTsOld} from \\\"../interfaces/IOpenNFTs.old.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenAutoMarket is IOpenAutoMarket, OpenNFTs {\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyMinter() override(OpenNFTs) {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    function buy(uint256 tokenID) external payable override(IOpenAutoMarket) existsToken(tokenID) {\\n        /// Get token price\\n        uint256 price = _tokenPrice[tokenID];\\n\\n        /// Require price defined\\n        require(price > 0, \\\"Not to sell\\\");\\n\\n        /// Require enough value sent\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n\\n        /// Get previous token owner\\n        address from = ownerOf(tokenID);\\n        assert(from != address(0));\\n        require(from != msg.sender, \\\"Already token owner!\\\");\\n\\n        /// Transfer token\\n        this.safeTransferFrom{value: msg.value}(from, msg.sender, tokenID, \\\"\\\");\\n\\n        /// Reset token price (to be eventualy defined by new owner)\\n        delete _tokenPrice[tokenID];\\n    }\\n\\n    function mint(string memory tokenURI) external override(IOpenAutoMarket) returns (uint256 tokenID) {\\n        tokenID = mint(msg.sender, tokenURI, 0, address(0), 0);\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 defaultPrice_,\\n        address receiver_,\\n        uint96 fee_,\\n        bool[] memory options\\n    ) public override(IOpenAutoMarket) {\\n        OpenNFTs._initialize(name_, symbol_, owner_);\\n        open = options[0];\\n\\n        OpenMarketable._setDefaultPrice(defaultPrice_);\\n        OpenMarketable._setDefaultRoyalty(receiver_, fee_);\\n    }\\n\\n    function mint(\\n        address minter_,\\n        string memory tokenURI_,\\n        uint256 tokenPrice_,\\n        address receiver_,\\n        uint96 fee_\\n    ) public payable override(IOpenAutoMarket) onlyMinter onlyWhenNotPaused returns (uint256 tokenID) {\\n        tokenID = OpenNFTs.mint(minter_, tokenURI_);\\n\\n        OpenMarketable._setTokenPrice(tokenID, tokenPrice_);\\n        OpenMarketable._setTokenRoyalty(tokenID, receiver_, fee_);\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        bytes memory params_\\n    ) public virtual override(OpenCloneable) {\\n        (uint256 defaultPrice_, address receiver_, uint96 fee_, bool[] memory options_) = abi.decode(\\n            params_,\\n            (uint256, address, uint96, bool[])\\n        );\\n        initialize(name_, symbol_, owner_, defaultPrice_, receiver_, fee_, options_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenNFTs) returns (bool) {\\n        return interfaceId == type(IOpenAutoMarket).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x636b3e59a506810c0e1f62893b2961b7f1e193eb5b0473954f20642098b911e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613627806100206000396000f3fe6080604052600436106102815760003560e01c80636d3c7ec51161014f578063c457fb37116100c1578063e97186ef1161007a578063e97186ef146107ac578063e985e9c5146107cc578063eb685c4714610815578063ee8c8b6314610835578063f2fde38b14610855578063fcfff16f1461087557600080fd5b8063c457fb37146106f7578063c4ae316814610724578063c87b56dd14610739578063d0def52114610759578063d85d3d2714610779578063d96a094a1461079957600080fd5b80638cabe05a116101135780638cabe05a146106475780638da5cb5b1461067757806395d89b411461069a578063a22cb465146106af578063b086613c146106cf578063b88d4fde146106e457600080fd5b80636d3c7ec51461056c5780636f2ddd931461058c57806370a08231146105a1578063833b7b78146105c15780638bbf58b31461063157600080fd5b80632f745c59116101f357806351cff8d9116101ac57806351cff8d9146104c957806354fd4d50146104e95780635944c753146104ff5780635c975abb1461051f57806360f96a8f146105375780636352211e1461054c57600080fd5b80632f745c591461042e5780633ccfd60b1461044e57806342842e0e1461046357806342966c68146104765780634472167b146104965780634f6ccce7146104a957600080fd5b80630c5597e4116102455780630c5597e41461035e578063158ef93e1461037e57806318160ddd1461039d5780631eb40e21146103bc57806323b872dd146103dc5780632a55205a146103ef57600080fd5b806301ffc9a71461028d57806304634d8d146102c257806306fdde03146102e4578063081812fc14610306578063095ea7b31461033e57600080fd5b3661028857005b600080fd5b34801561029957600080fd5b506102ad6102a8366004612b79565b61088f565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102e26102dd366004612bd0565b6108ba565b005b3480156102f057600080fd5b506102f9610900565b6040516102b99190612c56565b34801561031257600080fd5b50610326610321366004612c69565b610992565b6040516001600160a01b0390911681526020016102b9565b34801561034a57600080fd5b506102e2610359366004612c82565b6109e9565b34801561036a57600080fd5b506102e2610379366004612cae565b610aad565b34801561038a57600080fd5b506012546102ad90610100900460ff1681565b3480156103a957600080fd5b506008545b6040519081526020016102b9565b3480156103c857600080fd5b506102e26103d7366004612d8a565b610b41565b6102e26103ea366004612e27565b610b7c565b3480156103fb57600080fd5b5061040f61040a366004612e68565b610b8c565b604080516001600160a01b0390931683526020830191909152016102b9565b34801561043a57600080fd5b506103ae610449366004612c82565b610c6a565b34801561045a57600080fd5b506102e2610cf1565b6102e2610471366004612e27565b610d4f565b34801561048257600080fd5b506102e2610491366004612c69565b610d6a565b6103ae6104a4366004612e8a565b610d9a565b3480156104b557600080fd5b506103ae6104c4366004612c69565b610e5e565b3480156104d557600080fd5b506102e26104e4366004612f0b565b610ec8565b3480156104f557600080fd5b506103ae60145481565b34801561050b57600080fd5b506102e261051a366004612f28565b611034565b34801561052b57600080fd5b5060125460ff166102ad565b34801561054357600080fd5b506103266110d2565b34801561055857600080fd5b50610326610567366004612c69565b61111b565b34801561057857600080fd5b506102e2610587366004612c69565b61116e565b34801561059857600080fd5b506102f96111a6565b3480156105ad57600080fd5b506103ae6105bc366004612f0b565b611234565b3480156105cd57600080fd5b5061060a6105dc366004612c69565b6000908152600f60205260409020546001600160a01b03811691600160a01b9091046001600160601b031690565b604080516001600160a01b0390931683526001600160601b039091166020830152016102b9565b34801561063d57600080fd5b506103ae60155481565b34801561065357600080fd5b50600e546001600160a01b03811690600160a01b90046001600160601b031661060a565b34801561068357600080fd5b50600c5461010090046001600160a01b0316610326565b3480156106a657600080fd5b506102f961129f565b3480156106bb57600080fd5b506102e26106ca366004612f78565b6112ae565b3480156106db57600080fd5b50600d546103ae565b6102e26106f2366004612fa6565b61131a565b34801561070357600080fd5b506103ae610712366004612c69565b60009081526011602052604090205490565b34801561073057600080fd5b506102e261132c565b34801561074557600080fd5b506102f9610754366004612c69565b61136d565b34801561076557600080fd5b506103ae610774366004613006565b611445565b34801561078557600080fd5b506103ae610794366004613056565b6114c3565b6102e26107a7366004612c69565b6114d4565b3480156107b857600080fd5b506102e26107c7366004613123565b611697565b3480156107d857600080fd5b506102ad6107e73660046131f0565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561082157600080fd5b506102e2610830366004612e68565b6116f2565b34801561084157600080fd5b506102e261085036600461321e565b611722565b34801561086157600080fd5b506102e2610870366004612f0b565b6117a1565b34801561088157600080fd5b506016546102ad9060ff1681565b60006001600160e01b03198216632865aacb60e11b14806108b457506108b4826117d9565b92915050565b600c5461010090046001600160a01b031633146108f25760405162461bcd60e51b81526004016108e99061326c565b60405180910390fd5b6108fc8282611801565b5050565b60606005805461090f9061328f565b80601f016020809104026020016040519081016040528092919081815260200182805461093b9061328f565b80156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b03166109c85760405162461bcd60e51b81526004016108e9906132c4565b6000838152600260205260409020546001600160a01b031691505b50919050565b6109f333826118c9565b610a3f5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016108e9565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a748261111b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526020819052604090205482906001600160a01b0316610ae35760405162461bcd60e51b81526004016108e9906132c4565b600c5461010090046001600160a01b03163314610b125760405162461bcd60e51b81526004016108e99061326c565b506000918252600f602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60008060008084806020019051810190610b5b91906132ee565b9350935093509350610b7288888887878787611697565b5050505050505050565b610b87838383611924565b505050565b60008082600160801b8110610bb35760405162461bcd60e51b81526004016108e9906133b9565b6000858152600f60209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610c27575060408051808201909152600e546001600160a01b0381168252600160a01b90046001600160601b031660208201525b600d54851015610c3757600d5494505b602081015161271090610c53906001600160601b0316876133f6565b610c5d9190613415565b9051969095509350505050565b6000610c7583611234565b8210610cb45760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108e9565b6001600160a01b0383166000908152600960205260409020805483908110610cde57610cde613437565b9060005260206000200154905092915050565b600c5461010090046001600160a01b03163314610d205760405162461bcd60e51b81526004016108e99061326c565b60405133904780156108fc02916000818181858888f19350505050158015610d4c573d6000803e3d6000fd5b50565b610b8783838360405180602001604052806000815250611b5a565b80610d753382611bb2565b610d915760405162461bcd60e51b81526004016108e99061344d565b6108fc82611be9565b60165460009060ff1680610dbe5750600c546001600160a01b036101009091041633145b610df75760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108e9565b60125460ff1615610e345760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016108e9565b610e3e8686611445565b9050610e4a8185611bf2565b610e55818484611c5e565b95945050505050565b6008546000908210610ea35760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108e9565b60088281548110610eb657610eb6613437565b90600052602060002001549050919050565b600c5461010090046001600160a01b03163314610ef75760405162461bcd60e51b81526004016108e99061326c565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190613484565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff6919061349d565b610d4c5760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016108e9565b60008381526020819052604090205483906001600160a01b031661106a5760405162461bcd60e51b81526004016108e9906132c4565b600c5461010090046001600160a01b031633146110995760405162461bcd60e51b81526004016108e99061326c565b836110a43382611bb2565b6110c05760405162461bcd60e51b81526004016108e99061344d565b6110cb858585611c5e565b5050505050565b6000602d303b146110e35750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c611114906134ba565b901c905090565b60008181526020819052604081205482906001600160a01b03166111515760405162461bcd60e51b81526004016108e9906132c4565b50506000908152602081905260409020546001600160a01b031690565b600c5461010090046001600160a01b0316331461119d5760405162461bcd60e51b81526004016108e99061326c565b610d4c81611d43565b601380546111b39061328f565b80601f01602080910402602001604051908101604052809291908181526020018280546111df9061328f565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b505050505081565b60006001600160a01b0382166112835760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b60448201526064016108e9565b506001600160a01b031660009081526001602052604090205490565b60606006805461090f9061328f565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61132684848484611b5a565b50505050565b600c5461010090046001600160a01b0316331461135b5760405162461bcd60e51b81526004016108e99061326c565b60125461136b9060ff1615611da3565b565b60008181526020819052604090205460609082906001600160a01b03166113a65760405162461bcd60e51b81526004016108e9906132c4565b600083815260076020526040902080546113bf9061328f565b80601f01602080910402602001604051908101604052809291908181526020018280546113eb9061328f565b80156114385780601f1061140d57610100808354040283529160200191611438565b820191906000526020600020905b81548152906001019060200180831161141b57829003601f168201915b5050505050915050919050565b60165460009060ff16806114695750600c546001600160a01b036101009091041633145b6114a25760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108e9565b601580549060006114b2836134de565b9190505590506108b4838383611de8565b60006108b433836000806000610d9a565b60008181526020819052604090205481906001600160a01b031661150a5760405162461bcd60e51b81526004016108e9906132c4565b600082815260116020526040902054806115545760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016108e9565b803410156115975760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108e9565b60006115a28461111b565b90506001600160a01b0381166115ba576115ba6134f9565b6001600160a01b03811633141561160a5760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016108e9565b604051635c46a7ef60e11b81526001600160a01b0382166004820152336024820152604481018590526080606482015260006084820152309063b88d4fde90349060a4016000604051808303818588803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b5050506000958652505060116020525050604082209190915550565b6116a2878787611df3565b806000815181106116b5576116b5613437565b6020026020010151601660006101000a81548160ff0219169083151502179055506116df84611d43565b6116e98383611801565b50505050505050565b816116fd3382611bb2565b6117195760405162461bcd60e51b81526004016108e99061344d565b610b8783836000805b8361172d3382611bb2565b6117495760405162461bcd60e51b81526004016108e99061344d565b6117538585611bf2565b60028260028111156117675761176761350f565b141561177d576117788360016112ae565b6110cb565b60018260028111156117915761179161350f565b14156110cb576110cb83866109e9565b600c5461010090046001600160a01b031633146117d05760405162461bcd60e51b81526004016108e99061326c565b610d4c81611e35565b60006001600160e01b03198216600162b7486560e01b031914806108b457506108b482611e8f565b6001600160601b0381166127108111156118585760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108e9565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b81028217600e558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b6000806118d58361111b565b9050836001600160a01b0316816001600160a01b0316148061191c57506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b8061192f3382611bb2565b61194b5760405162461bcd60e51b81526004016108e99061344d565b6001600160a01b0384166119a15760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016108e9565b6001600160a01b0383166119f75760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016108e9565b611a008261111b565b6001600160a01b0316846001600160a01b031614611a515760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016108e9565b611a5c848484611eb4565b600082815260026020526040902080546001600160a01b03191690556001600160a01b0384811690841614611b13576001600160a01b03841660009081526001602081905260408220805491929091611ab6908490613525565b90915550506001600160a01b03831660009081526001602081905260408220805491929091611ae690849061353c565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b611b65848484611924565b611b7184848484611ebf565b6113265760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b60448201526064016108e9565b6000611bbe83836118c9565b80611be25750826001600160a01b0316611bd783610992565b6001600160a01b0316145b9392505050565b610d4c81611f6d565b80600160801b8110611c165760405162461bcd60e51b81526004016108e9906133b9565b60008381526011602090815260409182902084905581518581529081018490527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b91016118bc565b6001600160601b038116612710811115611cb55760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108e9565b6040805180820182526001600160a01b038581168083526001600160601b03868116602080860182815260008c8152600f835288902096519051909316600160a01b029290941691909117909355835188815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600160405180910390a150505050565b80600160801b8110611d675760405162461bcd60e51b81526004016108e9906133b9565b600d8290556040518281527f9f7a6492db3843bc01c0adb23cd27be964155c1d45c566f2ee32f28faf4eb6059060200160405180910390a15050565b6012805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610b87838383611f92565b60016015556040805180820190915260088152674f70656e4e46547360c01b6020820152611e22906004611feb565b611e2c838361203c565b610b8781612093565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b031982166350130d5360e01b14806108b457506108b4826120cc565b610b878383836120f1565b60006001600160a01b0384163b1580610e555750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611f079033908a9089908990600401613554565b602060405180830381600087803b158015611f2157600080fd5b505af1158015611f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f599190613591565b6001600160e01b0319161495945050505050565b6000818152600f602090815260408083208390556011909152812055610d4c8161212a565b600e54611fbb9082906001600160a01b03811690600160a01b90046001600160601b0316611c5e565b611fe081600d5485611fdb600c546001600160a01b036101009091041690565b6121f5565b610b87838383612535565b601254610100900460ff16156120135760405162461bcd60e51b81526004016108e9906135ae565b6012805461ff0019166101001790558151612035906013906020850190612a94565b5060145550565b60045460ff161561205f5760405162461bcd60e51b81526004016108e9906135ae565b6004805460ff19166001179055815161207f906005906020850190612a94565b508051610b87906006906020840190612a94565b600c5460ff16156120b65760405162461bcd60e51b81526004016108e9906135ae565b600c805460ff19166001179055610d4c81611e35565b60006001600160e01b031982166398396bd360e01b14806108b457506108b48261258e565b60008181526011602052604090205461211090829084611fdb8361111b565b600081815260116020526040812055610b878383836125b3565b60006121358261111b565b905061214181836125c7565b6000828152600b602052604081205460085490919061216290600190613525565b905060006008828154811061217957612179613437565b6000918252602080832090910154808352600b9091526040808320869055878352822091909155600880549192508291859081106121b9576121b9613437565b60009182526020909120015560088054806121d6576121d66135db565b600190038181906000526020600020016000905590556110cb856126d5565b60105460ff16156122375760405162461bcd60e51b815260206004820152600c60248201526b4e6f2072652d656e7472792160a01b60448201526064016108e9565b6010805460ff19166001179055348311156122875760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108e9565b3461229157612525565b6001600160a01b0382166122d75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210313abcb2b960991b60448201526064016108e9565b6001600160a01b03811661231e5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b63632b960911b60448201526064016108e9565b600080803486158015906123445750846001600160a01b0316866001600160a01b031614155b15612451576123538888610b8c565b90945092506001600160a01b03841661236b57600092505b868311156123af5760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420726f79616c7469657360781b60448201526064016108e9565b6123b98388613525565b91508115612406576123cb8282613525565b6040519091506001600160a01b0386169083156108fc029084906000818181858888f19350505050158015612404573d6000803e3d6000fd5b505b8215612451576124168382613525565b6040519091506001600160a01b0385169084156108fc029085906000818181858888f1935050505015801561244f573d6000803e3d6000fd5b505b348161245d858561353c565b612467919061353c565b14612474576124746134f9565b80156124b2576040516001600160a01b0387169082156108fc029083906000818181858888f193505050501580156124b0573d6000803e3d6000fd5b505b60408051898152602081018990526001600160a01b038781168284015260608201859052868116608083015260a08201869052881660c082015260e0810183905290517f746889be52a242154dfc6d4e1c55b36e2f81cfc340b11f28ef86b142ca25d937918190036101000190a1505050505b50506010805460ff191690555050565b61253f83826126f5565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610b87838383612733565b60006001600160e01b03198216632175daf960e11b14806108b457506108b48261275e565b6125bd83826125c7565b610b8782826126f5565b6000818152600a60205260408120549060016125e285611234565b6125ec9190613525565b9050808214612683576001600160a01b038416600090815260096020526040812080548390811061261f5761261f613437565b906000526020600020015490508060096000876001600160a01b03166001600160a01b03168152602001908152602001600020848154811061266357612663613437565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b0387168352600990915290208054806126b9576126b96135db565b6001900381819060005260206000200160009055905550505050565b60008181526007602052604081206126ec91612b18565b610d4c81612783565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b6000818152600760209081526040909120835161275292850190612a94565b50610b87838383612874565b600063152a902d60e11b6001600160e01b0319831614806108b457506108b4826129ff565b600061278e8261111b565b90506001600160a01b0381166127b65760405162461bcd60e51b81526004016108e9906132c4565b6001600160a01b0381166000908152600160205260409020546127db576127db6134f9565b6001600160a01b03811660009081526001602081905260408220805491929091612806908490613525565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166128c15760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016108e9565b6000818152602081905260409020546001600160a01b03161561291d5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016108e9565b6001600160a01b0383166000908152600160208190526040822080549192909161294890849061353c565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129be6000848360405180602001604052806000815250611ebf565b610b875760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016108e9565b60006307f5828d60e41b6001600160e01b0319831614806108b457506108b482600063780e9d6360e01b6001600160e01b0319831614806108b457506108b4826000635b5e139f60e01b6001600160e01b0319831614806108b457506108b48260006380ac58cd60e01b6001600160e01b0319831614806108b457506001600160e01b031982166301ffc9a760e01b146108b4565b828054612aa09061328f565b90600052602060002090601f016020900481019282612ac25760008555612b08565b82601f10612adb57805160ff1916838001178555612b08565b82800160010185558215612b08579182015b82811115612b08578251825591602001919060010190612aed565b50612b14929150612b4e565b5090565b508054612b249061328f565b6000825580601f10612b34575050565b601f016020900490600052602060002090810190610d4c91905b5b80821115612b145760008155600101612b4f565b6001600160e01b031981168114610d4c57600080fd5b600060208284031215612b8b57600080fd5b8135611be281612b63565b6001600160a01b0381168114610d4c57600080fd5b6001600160601b0381168114610d4c57600080fd5b8035612bcb81612bab565b919050565b60008060408385031215612be357600080fd5b8235612bee81612b96565b91506020830135612bfe81612bab565b809150509250929050565b6000815180845260005b81811015612c2f57602081850181015186830182015201612c13565b81811115612c41576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611be26020830184612c09565b600060208284031215612c7b57600080fd5b5035919050565b60008060408385031215612c9557600080fd5b8235612ca081612b96565b946020939093013593505050565b60008060408385031215612cc157600080fd5b823591506020830135612bfe81612b96565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d1257612d12612cd3565b604052919050565b600082601f830112612d2b57600080fd5b813567ffffffffffffffff811115612d4557612d45612cd3565b612d58601f8201601f1916602001612ce9565b818152846020838601011115612d6d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612da057600080fd5b843567ffffffffffffffff80821115612db857600080fd5b612dc488838901612d1a565b95506020870135915080821115612dda57600080fd5b612de688838901612d1a565b945060408701359150612df882612b96565b90925060608601359080821115612e0e57600080fd5b50612e1b87828801612d1a565b91505092959194509250565b600080600060608486031215612e3c57600080fd5b8335612e4781612b96565b92506020840135612e5781612b96565b929592945050506040919091013590565b60008060408385031215612e7b57600080fd5b50508035926020909101359150565b600080600080600060a08688031215612ea257600080fd5b8535612ead81612b96565b9450602086013567ffffffffffffffff811115612ec957600080fd5b612ed588828901612d1a565b945050604086013592506060860135612eed81612b96565b91506080860135612efd81612bab565b809150509295509295909350565b600060208284031215612f1d57600080fd5b8135611be281612b96565b600080600060608486031215612f3d57600080fd5b833592506020840135612f4f81612b96565b91506040840135612f5f81612bab565b809150509250925092565b8015158114610d4c57600080fd5b60008060408385031215612f8b57600080fd5b8235612f9681612b96565b91506020830135612bfe81612f6a565b60008060008060808587031215612fbc57600080fd5b8435612fc781612b96565b93506020850135612fd781612b96565b925060408501359150606085013567ffffffffffffffff811115612ffa57600080fd5b612e1b87828801612d1a565b6000806040838503121561301957600080fd5b823561302481612b96565b9150602083013567ffffffffffffffff81111561304057600080fd5b61304c85828601612d1a565b9150509250929050565b60006020828403121561306857600080fd5b813567ffffffffffffffff81111561307f57600080fd5b61191c84828501612d1a565b600067ffffffffffffffff8211156130a5576130a5612cd3565b5060051b60200190565b600082601f8301126130c057600080fd5b813560206130d56130d08361308b565b612ce9565b82815260059290921b840181019181810190868411156130f457600080fd5b8286015b8481101561311857803561310b81612f6a565b83529183019183016130f8565b509695505050505050565b600080600080600080600060e0888a03121561313e57600080fd5b873567ffffffffffffffff8082111561315657600080fd5b6131628b838c01612d1a565b985060208a013591508082111561317857600080fd5b6131848b838c01612d1a565b975060408a0135915061319682612b96565b909550606089013594506080890135906131af82612b96565b8194506131be60a08b01612bc0565b935060c08a01359150808211156131d457600080fd5b506131e18a828b016130af565b91505092959891949750929550565b6000806040838503121561320357600080fd5b823561320e81612b96565b91506020830135612bfe81612b96565b6000806000806080858703121561323457600080fd5b8435935060208501359250604085013561324d81612b96565b915060608501356003811061326157600080fd5b939692955090935050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c908216806132a357607f821691505b602082108114156109e357634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b6000806000806080858703121561330457600080fd5b8451935060208086015161331781612b96565b604087015190945061332881612bab565b606087015190935067ffffffffffffffff81111561334557600080fd5b8601601f8101881361335657600080fd5b80516133646130d08261308b565b81815260059190911b8201830190838101908a83111561338357600080fd5b928401925b828410156133aa57835161339b81612f6a565b82529284019290840190613388565b979a9699509497505050505050565b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613410576134106133e0565b500290565b60008261343257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b60006020828403121561349657600080fd5b5051919050565b6000602082840312156134af57600080fd5b8151611be281612f6a565b805160208083015191908110156109e35760001960209190910360031b1b16919050565b60006000198214156134f2576134f26133e0565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600082821015613537576135376133e0565b500390565b6000821982111561354f5761354f6133e0565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061358790830184612c09565b9695505050505050565b6000602082840312156135a357600080fd5b8151611be281612b63565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d7c118c603b69c90663a64819b2c87c1fa5748cf2ccdf29d8dbd05973a39634764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102815760003560e01c80636d3c7ec51161014f578063c457fb37116100c1578063e97186ef1161007a578063e97186ef146107ac578063e985e9c5146107cc578063eb685c4714610815578063ee8c8b6314610835578063f2fde38b14610855578063fcfff16f1461087557600080fd5b8063c457fb37146106f7578063c4ae316814610724578063c87b56dd14610739578063d0def52114610759578063d85d3d2714610779578063d96a094a1461079957600080fd5b80638cabe05a116101135780638cabe05a146106475780638da5cb5b1461067757806395d89b411461069a578063a22cb465146106af578063b086613c146106cf578063b88d4fde146106e457600080fd5b80636d3c7ec51461056c5780636f2ddd931461058c57806370a08231146105a1578063833b7b78146105c15780638bbf58b31461063157600080fd5b80632f745c59116101f357806351cff8d9116101ac57806351cff8d9146104c957806354fd4d50146104e95780635944c753146104ff5780635c975abb1461051f57806360f96a8f146105375780636352211e1461054c57600080fd5b80632f745c591461042e5780633ccfd60b1461044e57806342842e0e1461046357806342966c68146104765780634472167b146104965780634f6ccce7146104a957600080fd5b80630c5597e4116102455780630c5597e41461035e578063158ef93e1461037e57806318160ddd1461039d5780631eb40e21146103bc57806323b872dd146103dc5780632a55205a146103ef57600080fd5b806301ffc9a71461028d57806304634d8d146102c257806306fdde03146102e4578063081812fc14610306578063095ea7b31461033e57600080fd5b3661028857005b600080fd5b34801561029957600080fd5b506102ad6102a8366004612b79565b61088f565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102e26102dd366004612bd0565b6108ba565b005b3480156102f057600080fd5b506102f9610900565b6040516102b99190612c56565b34801561031257600080fd5b50610326610321366004612c69565b610992565b6040516001600160a01b0390911681526020016102b9565b34801561034a57600080fd5b506102e2610359366004612c82565b6109e9565b34801561036a57600080fd5b506102e2610379366004612cae565b610aad565b34801561038a57600080fd5b506012546102ad90610100900460ff1681565b3480156103a957600080fd5b506008545b6040519081526020016102b9565b3480156103c857600080fd5b506102e26103d7366004612d8a565b610b41565b6102e26103ea366004612e27565b610b7c565b3480156103fb57600080fd5b5061040f61040a366004612e68565b610b8c565b604080516001600160a01b0390931683526020830191909152016102b9565b34801561043a57600080fd5b506103ae610449366004612c82565b610c6a565b34801561045a57600080fd5b506102e2610cf1565b6102e2610471366004612e27565b610d4f565b34801561048257600080fd5b506102e2610491366004612c69565b610d6a565b6103ae6104a4366004612e8a565b610d9a565b3480156104b557600080fd5b506103ae6104c4366004612c69565b610e5e565b3480156104d557600080fd5b506102e26104e4366004612f0b565b610ec8565b3480156104f557600080fd5b506103ae60145481565b34801561050b57600080fd5b506102e261051a366004612f28565b611034565b34801561052b57600080fd5b5060125460ff166102ad565b34801561054357600080fd5b506103266110d2565b34801561055857600080fd5b50610326610567366004612c69565b61111b565b34801561057857600080fd5b506102e2610587366004612c69565b61116e565b34801561059857600080fd5b506102f96111a6565b3480156105ad57600080fd5b506103ae6105bc366004612f0b565b611234565b3480156105cd57600080fd5b5061060a6105dc366004612c69565b6000908152600f60205260409020546001600160a01b03811691600160a01b9091046001600160601b031690565b604080516001600160a01b0390931683526001600160601b039091166020830152016102b9565b34801561063d57600080fd5b506103ae60155481565b34801561065357600080fd5b50600e546001600160a01b03811690600160a01b90046001600160601b031661060a565b34801561068357600080fd5b50600c5461010090046001600160a01b0316610326565b3480156106a657600080fd5b506102f961129f565b3480156106bb57600080fd5b506102e26106ca366004612f78565b6112ae565b3480156106db57600080fd5b50600d546103ae565b6102e26106f2366004612fa6565b61131a565b34801561070357600080fd5b506103ae610712366004612c69565b60009081526011602052604090205490565b34801561073057600080fd5b506102e261132c565b34801561074557600080fd5b506102f9610754366004612c69565b61136d565b34801561076557600080fd5b506103ae610774366004613006565b611445565b34801561078557600080fd5b506103ae610794366004613056565b6114c3565b6102e26107a7366004612c69565b6114d4565b3480156107b857600080fd5b506102e26107c7366004613123565b611697565b3480156107d857600080fd5b506102ad6107e73660046131f0565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561082157600080fd5b506102e2610830366004612e68565b6116f2565b34801561084157600080fd5b506102e261085036600461321e565b611722565b34801561086157600080fd5b506102e2610870366004612f0b565b6117a1565b34801561088157600080fd5b506016546102ad9060ff1681565b60006001600160e01b03198216632865aacb60e11b14806108b457506108b4826117d9565b92915050565b600c5461010090046001600160a01b031633146108f25760405162461bcd60e51b81526004016108e99061326c565b60405180910390fd5b6108fc8282611801565b5050565b60606005805461090f9061328f565b80601f016020809104026020016040519081016040528092919081815260200182805461093b9061328f565b80156109885780601f1061095d57610100808354040283529160200191610988565b820191906000526020600020905b81548152906001019060200180831161096b57829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b03166109c85760405162461bcd60e51b81526004016108e9906132c4565b6000838152600260205260409020546001600160a01b031691505b50919050565b6109f333826118c9565b610a3f5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016108e9565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a748261111b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526020819052604090205482906001600160a01b0316610ae35760405162461bcd60e51b81526004016108e9906132c4565b600c5461010090046001600160a01b03163314610b125760405162461bcd60e51b81526004016108e99061326c565b506000918252600f602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60008060008084806020019051810190610b5b91906132ee565b9350935093509350610b7288888887878787611697565b5050505050505050565b610b87838383611924565b505050565b60008082600160801b8110610bb35760405162461bcd60e51b81526004016108e9906133b9565b6000858152600f60209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610c27575060408051808201909152600e546001600160a01b0381168252600160a01b90046001600160601b031660208201525b600d54851015610c3757600d5494505b602081015161271090610c53906001600160601b0316876133f6565b610c5d9190613415565b9051969095509350505050565b6000610c7583611234565b8210610cb45760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108e9565b6001600160a01b0383166000908152600960205260409020805483908110610cde57610cde613437565b9060005260206000200154905092915050565b600c5461010090046001600160a01b03163314610d205760405162461bcd60e51b81526004016108e99061326c565b60405133904780156108fc02916000818181858888f19350505050158015610d4c573d6000803e3d6000fd5b50565b610b8783838360405180602001604052806000815250611b5a565b80610d753382611bb2565b610d915760405162461bcd60e51b81526004016108e99061344d565b6108fc82611be9565b60165460009060ff1680610dbe5750600c546001600160a01b036101009091041633145b610df75760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108e9565b60125460ff1615610e345760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016108e9565b610e3e8686611445565b9050610e4a8185611bf2565b610e55818484611c5e565b95945050505050565b6008546000908210610ea35760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108e9565b60088281548110610eb657610eb6613437565b90600052602060002001549050919050565b600c5461010090046001600160a01b03163314610ef75760405162461bcd60e51b81526004016108e99061326c565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b158015610f4057600080fd5b505afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190613484565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff6919061349d565b610d4c5760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016108e9565b60008381526020819052604090205483906001600160a01b031661106a5760405162461bcd60e51b81526004016108e9906132c4565b600c5461010090046001600160a01b031633146110995760405162461bcd60e51b81526004016108e99061326c565b836110a43382611bb2565b6110c05760405162461bcd60e51b81526004016108e99061344d565b6110cb858585611c5e565b5050505050565b6000602d303b146110e35750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c611114906134ba565b901c905090565b60008181526020819052604081205482906001600160a01b03166111515760405162461bcd60e51b81526004016108e9906132c4565b50506000908152602081905260409020546001600160a01b031690565b600c5461010090046001600160a01b0316331461119d5760405162461bcd60e51b81526004016108e99061326c565b610d4c81611d43565b601380546111b39061328f565b80601f01602080910402602001604051908101604052809291908181526020018280546111df9061328f565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b505050505081565b60006001600160a01b0382166112835760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b60448201526064016108e9565b506001600160a01b031660009081526001602052604090205490565b60606006805461090f9061328f565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61132684848484611b5a565b50505050565b600c5461010090046001600160a01b0316331461135b5760405162461bcd60e51b81526004016108e99061326c565b60125461136b9060ff1615611da3565b565b60008181526020819052604090205460609082906001600160a01b03166113a65760405162461bcd60e51b81526004016108e9906132c4565b600083815260076020526040902080546113bf9061328f565b80601f01602080910402602001604051908101604052809291908181526020018280546113eb9061328f565b80156114385780601f1061140d57610100808354040283529160200191611438565b820191906000526020600020905b81548152906001019060200180831161141b57829003601f168201915b5050505050915050919050565b60165460009060ff16806114695750600c546001600160a01b036101009091041633145b6114a25760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108e9565b601580549060006114b2836134de565b9190505590506108b4838383611de8565b60006108b433836000806000610d9a565b60008181526020819052604090205481906001600160a01b031661150a5760405162461bcd60e51b81526004016108e9906132c4565b600082815260116020526040902054806115545760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016108e9565b803410156115975760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108e9565b60006115a28461111b565b90506001600160a01b0381166115ba576115ba6134f9565b6001600160a01b03811633141561160a5760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016108e9565b604051635c46a7ef60e11b81526001600160a01b0382166004820152336024820152604481018590526080606482015260006084820152309063b88d4fde90349060a4016000604051808303818588803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b5050506000958652505060116020525050604082209190915550565b6116a2878787611df3565b806000815181106116b5576116b5613437565b6020026020010151601660006101000a81548160ff0219169083151502179055506116df84611d43565b6116e98383611801565b50505050505050565b816116fd3382611bb2565b6117195760405162461bcd60e51b81526004016108e99061344d565b610b8783836000805b8361172d3382611bb2565b6117495760405162461bcd60e51b81526004016108e99061344d565b6117538585611bf2565b60028260028111156117675761176761350f565b141561177d576117788360016112ae565b6110cb565b60018260028111156117915761179161350f565b14156110cb576110cb83866109e9565b600c5461010090046001600160a01b031633146117d05760405162461bcd60e51b81526004016108e99061326c565b610d4c81611e35565b60006001600160e01b03198216600162b7486560e01b031914806108b457506108b482611e8f565b6001600160601b0381166127108111156118585760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108e9565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b81028217600e558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b6000806118d58361111b565b9050836001600160a01b0316816001600160a01b0316148061191c57506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b8061192f3382611bb2565b61194b5760405162461bcd60e51b81526004016108e99061344d565b6001600160a01b0384166119a15760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016108e9565b6001600160a01b0383166119f75760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016108e9565b611a008261111b565b6001600160a01b0316846001600160a01b031614611a515760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016108e9565b611a5c848484611eb4565b600082815260026020526040902080546001600160a01b03191690556001600160a01b0384811690841614611b13576001600160a01b03841660009081526001602081905260408220805491929091611ab6908490613525565b90915550506001600160a01b03831660009081526001602081905260408220805491929091611ae690849061353c565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b611b65848484611924565b611b7184848484611ebf565b6113265760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b60448201526064016108e9565b6000611bbe83836118c9565b80611be25750826001600160a01b0316611bd783610992565b6001600160a01b0316145b9392505050565b610d4c81611f6d565b80600160801b8110611c165760405162461bcd60e51b81526004016108e9906133b9565b60008381526011602090815260409182902084905581518581529081018490527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b91016118bc565b6001600160601b038116612710811115611cb55760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108e9565b6040805180820182526001600160a01b038581168083526001600160601b03868116602080860182815260008c8152600f835288902096519051909316600160a01b029290941691909117909355835188815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600160405180910390a150505050565b80600160801b8110611d675760405162461bcd60e51b81526004016108e9906133b9565b600d8290556040518281527f9f7a6492db3843bc01c0adb23cd27be964155c1d45c566f2ee32f28faf4eb6059060200160405180910390a15050565b6012805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610b87838383611f92565b60016015556040805180820190915260088152674f70656e4e46547360c01b6020820152611e22906004611feb565b611e2c838361203c565b610b8781612093565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b031982166350130d5360e01b14806108b457506108b4826120cc565b610b878383836120f1565b60006001600160a01b0384163b1580610e555750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611f079033908a9089908990600401613554565b602060405180830381600087803b158015611f2157600080fd5b505af1158015611f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f599190613591565b6001600160e01b0319161495945050505050565b6000818152600f602090815260408083208390556011909152812055610d4c8161212a565b600e54611fbb9082906001600160a01b03811690600160a01b90046001600160601b0316611c5e565b611fe081600d5485611fdb600c546001600160a01b036101009091041690565b6121f5565b610b87838383612535565b601254610100900460ff16156120135760405162461bcd60e51b81526004016108e9906135ae565b6012805461ff0019166101001790558151612035906013906020850190612a94565b5060145550565b60045460ff161561205f5760405162461bcd60e51b81526004016108e9906135ae565b6004805460ff19166001179055815161207f906005906020850190612a94565b508051610b87906006906020840190612a94565b600c5460ff16156120b65760405162461bcd60e51b81526004016108e9906135ae565b600c805460ff19166001179055610d4c81611e35565b60006001600160e01b031982166398396bd360e01b14806108b457506108b48261258e565b60008181526011602052604090205461211090829084611fdb8361111b565b600081815260116020526040812055610b878383836125b3565b60006121358261111b565b905061214181836125c7565b6000828152600b602052604081205460085490919061216290600190613525565b905060006008828154811061217957612179613437565b6000918252602080832090910154808352600b9091526040808320869055878352822091909155600880549192508291859081106121b9576121b9613437565b60009182526020909120015560088054806121d6576121d66135db565b600190038181906000526020600020016000905590556110cb856126d5565b60105460ff16156122375760405162461bcd60e51b815260206004820152600c60248201526b4e6f2072652d656e7472792160a01b60448201526064016108e9565b6010805460ff19166001179055348311156122875760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108e9565b3461229157612525565b6001600160a01b0382166122d75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210313abcb2b960991b60448201526064016108e9565b6001600160a01b03811661231e5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b63632b960911b60448201526064016108e9565b600080803486158015906123445750846001600160a01b0316866001600160a01b031614155b15612451576123538888610b8c565b90945092506001600160a01b03841661236b57600092505b868311156123af5760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420726f79616c7469657360781b60448201526064016108e9565b6123b98388613525565b91508115612406576123cb8282613525565b6040519091506001600160a01b0386169083156108fc029084906000818181858888f19350505050158015612404573d6000803e3d6000fd5b505b8215612451576124168382613525565b6040519091506001600160a01b0385169084156108fc029085906000818181858888f1935050505015801561244f573d6000803e3d6000fd5b505b348161245d858561353c565b612467919061353c565b14612474576124746134f9565b80156124b2576040516001600160a01b0387169082156108fc029083906000818181858888f193505050501580156124b0573d6000803e3d6000fd5b505b60408051898152602081018990526001600160a01b038781168284015260608201859052868116608083015260a08201869052881660c082015260e0810183905290517f746889be52a242154dfc6d4e1c55b36e2f81cfc340b11f28ef86b142ca25d937918190036101000190a1505050505b50506010805460ff191690555050565b61253f83826126f5565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610b87838383612733565b60006001600160e01b03198216632175daf960e11b14806108b457506108b48261275e565b6125bd83826125c7565b610b8782826126f5565b6000818152600a60205260408120549060016125e285611234565b6125ec9190613525565b9050808214612683576001600160a01b038416600090815260096020526040812080548390811061261f5761261f613437565b906000526020600020015490508060096000876001600160a01b03166001600160a01b03168152602001908152602001600020848154811061266357612663613437565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b0387168352600990915290208054806126b9576126b96135db565b6001900381819060005260206000200160009055905550505050565b60008181526007602052604081206126ec91612b18565b610d4c81612783565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b6000818152600760209081526040909120835161275292850190612a94565b50610b87838383612874565b600063152a902d60e11b6001600160e01b0319831614806108b457506108b4826129ff565b600061278e8261111b565b90506001600160a01b0381166127b65760405162461bcd60e51b81526004016108e9906132c4565b6001600160a01b0381166000908152600160205260409020546127db576127db6134f9565b6001600160a01b03811660009081526001602081905260408220805491929091612806908490613525565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166128c15760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016108e9565b6000818152602081905260409020546001600160a01b03161561291d5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016108e9565b6001600160a01b0383166000908152600160208190526040822080549192909161294890849061353c565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129be6000848360405180602001604052806000815250611ebf565b610b875760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016108e9565b60006307f5828d60e41b6001600160e01b0319831614806108b457506108b482600063780e9d6360e01b6001600160e01b0319831614806108b457506108b4826000635b5e139f60e01b6001600160e01b0319831614806108b457506108b48260006380ac58cd60e01b6001600160e01b0319831614806108b457506001600160e01b031982166301ffc9a760e01b146108b4565b828054612aa09061328f565b90600052602060002090601f016020900481019282612ac25760008555612b08565b82601f10612adb57805160ff1916838001178555612b08565b82800160010185558215612b08579182015b82811115612b08578251825591602001919060010190612aed565b50612b14929150612b4e565b5090565b508054612b249061328f565b6000825580601f10612b34575050565b601f016020900490600052602060002090810190610d4c91905b5b80821115612b145760008155600101612b4f565b6001600160e01b031981168114610d4c57600080fd5b600060208284031215612b8b57600080fd5b8135611be281612b63565b6001600160a01b0381168114610d4c57600080fd5b6001600160601b0381168114610d4c57600080fd5b8035612bcb81612bab565b919050565b60008060408385031215612be357600080fd5b8235612bee81612b96565b91506020830135612bfe81612bab565b809150509250929050565b6000815180845260005b81811015612c2f57602081850181015186830182015201612c13565b81811115612c41576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611be26020830184612c09565b600060208284031215612c7b57600080fd5b5035919050565b60008060408385031215612c9557600080fd5b8235612ca081612b96565b946020939093013593505050565b60008060408385031215612cc157600080fd5b823591506020830135612bfe81612b96565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d1257612d12612cd3565b604052919050565b600082601f830112612d2b57600080fd5b813567ffffffffffffffff811115612d4557612d45612cd3565b612d58601f8201601f1916602001612ce9565b818152846020838601011115612d6d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612da057600080fd5b843567ffffffffffffffff80821115612db857600080fd5b612dc488838901612d1a565b95506020870135915080821115612dda57600080fd5b612de688838901612d1a565b945060408701359150612df882612b96565b90925060608601359080821115612e0e57600080fd5b50612e1b87828801612d1a565b91505092959194509250565b600080600060608486031215612e3c57600080fd5b8335612e4781612b96565b92506020840135612e5781612b96565b929592945050506040919091013590565b60008060408385031215612e7b57600080fd5b50508035926020909101359150565b600080600080600060a08688031215612ea257600080fd5b8535612ead81612b96565b9450602086013567ffffffffffffffff811115612ec957600080fd5b612ed588828901612d1a565b945050604086013592506060860135612eed81612b96565b91506080860135612efd81612bab565b809150509295509295909350565b600060208284031215612f1d57600080fd5b8135611be281612b96565b600080600060608486031215612f3d57600080fd5b833592506020840135612f4f81612b96565b91506040840135612f5f81612bab565b809150509250925092565b8015158114610d4c57600080fd5b60008060408385031215612f8b57600080fd5b8235612f9681612b96565b91506020830135612bfe81612f6a565b60008060008060808587031215612fbc57600080fd5b8435612fc781612b96565b93506020850135612fd781612b96565b925060408501359150606085013567ffffffffffffffff811115612ffa57600080fd5b612e1b87828801612d1a565b6000806040838503121561301957600080fd5b823561302481612b96565b9150602083013567ffffffffffffffff81111561304057600080fd5b61304c85828601612d1a565b9150509250929050565b60006020828403121561306857600080fd5b813567ffffffffffffffff81111561307f57600080fd5b61191c84828501612d1a565b600067ffffffffffffffff8211156130a5576130a5612cd3565b5060051b60200190565b600082601f8301126130c057600080fd5b813560206130d56130d08361308b565b612ce9565b82815260059290921b840181019181810190868411156130f457600080fd5b8286015b8481101561311857803561310b81612f6a565b83529183019183016130f8565b509695505050505050565b600080600080600080600060e0888a03121561313e57600080fd5b873567ffffffffffffffff8082111561315657600080fd5b6131628b838c01612d1a565b985060208a013591508082111561317857600080fd5b6131848b838c01612d1a565b975060408a0135915061319682612b96565b909550606089013594506080890135906131af82612b96565b8194506131be60a08b01612bc0565b935060c08a01359150808211156131d457600080fd5b506131e18a828b016130af565b91505092959891949750929550565b6000806040838503121561320357600080fd5b823561320e81612b96565b91506020830135612bfe81612b96565b6000806000806080858703121561323457600080fd5b8435935060208501359250604085013561324d81612b96565b915060608501356003811061326157600080fd5b939692955090935050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c908216806132a357607f821691505b602082108114156109e357634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b6000806000806080858703121561330457600080fd5b8451935060208086015161331781612b96565b604087015190945061332881612bab565b606087015190935067ffffffffffffffff81111561334557600080fd5b8601601f8101881361335657600080fd5b80516133646130d08261308b565b81815260059190911b8201830190838101908a83111561338357600080fd5b928401925b828410156133aa57835161339b81612f6a565b82529284019290840190613388565b979a9699509497505050505050565b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613410576134106133e0565b500290565b60008261343257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b60006020828403121561349657600080fd5b5051919050565b6000602082840312156134af57600080fd5b8151611be281612f6a565b805160208083015191908110156109e35760001960209190910360031b1b16919050565b60006000198214156134f2576134f26133e0565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600082821015613537576135376133e0565b500390565b6000821982111561354f5761354f6133e0565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061358790830184612c09565b9695505050505050565b6000602082840312156135a357600080fd5b8151611be281612b63565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d7c118c603b69c90663a64819b2c87c1fa5748cf2ccdf29d8dbd05973a39634764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      },
      "getDefaultRoyalty()": {
        "returns": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "getTokenRoyalty(uint256)": {
        "params": {
          "tokenID": ": token ID"
        },
        "returns": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setDefaultPrice(uint256)": {
        "params": {
          "price": ": default price in wei"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setTokenPrice(uint256,uint256)": {
        "params": {
          "price": ": token price in wei",
          "tokenID": ": token ID"
        }
      },
      "setTokenPrice(uint256,uint256,address,uint8)": {
        "params": {
          "price": ": token price in wei",
          "tokenID": ": token ID"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "setTokenRoyaltyReceiver(uint256,address)": {
        "params": {
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId to test"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "getDefaultRoyalty()": {
        "notice": "GET default royalty info"
      },
      "getTokenRoyalty(uint256)": {
        "notice": "GET token royalty info"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "setDefaultPrice(uint256)": {
        "notice": "SET default mint price"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty info"
      },
      "setTokenPrice(uint256,uint256)": {
        "notice": "SET token price"
      },
      "setTokenPrice(uint256,uint256,address,uint8)": {
        "notice": "SET token price"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty info"
      },
      "setTokenRoyaltyReceiver(uint256,address)": {
        "notice": "SET token royalty receiver"
      },
      "supportsInterface(bytes4)": {
        "notice": "test if this interface is supported"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      },
      "withdraw()": {
        "notice": "withdraw eth"
      },
      "withdraw(address)": {
        "notice": "withdraw token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5420,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5424,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5428,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5434,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6343,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 6345,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 6347,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 6351,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6020,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6025,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6029,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6033,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5174,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 5176,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_owner",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5287,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_defaultPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5290,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(RoyaltyInfo)5285_storage"
      },
      {
        "astId": 5295,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)5285_storage)"
      },
      {
        "astId": 6513,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_locked",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 6553,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenPrice",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7443,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 4987,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "initialized",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 4989,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "template",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 4991,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "version",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 7201,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 18926,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "open",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)5285_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)5285_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)5285_storage": {
        "encoding": "inplace",
        "label": "struct OpenERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 5282,
            "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5284,
            "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "fee",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}