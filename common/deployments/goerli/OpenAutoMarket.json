{
  "address": "0xbA00d9874cc16372779D53287F2eCdE322F23EC3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royalties",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unspent",
          "type": "uint256"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetTokenPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params_",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee_",
          "type": "uint96"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parent",
      "outputs": [
        {
          "internalType": "address",
          "name": "parent_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDefaultPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "internalType": "enum IOpenMarketable.Approve",
          "name": "approveType",
          "type": "uint8"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "setTokenRoyaltyReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4db815119a8bf8f7ba27f1e13fda9dcadeadd3e94a4b14d3077ade34b8b7a613",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xbA00d9874cc16372779D53287F2eCdE322F23EC3",
    "transactionIndex": 14,
    "gasUsed": "2938188",
    "logsBloom": "0x
    "blockHash": "0x14fd6d440f705a6fb6b16686c69500f7a019d1b753a81ea552142c42896126a8",
    "transactionHash": "0x4db815119a8bf8f7ba27f1e13fda9dcadeadd3e94a4b14d3077ade34b8b7a613",
    "logs": [],
    "blockNumber": 7623053,
    "cumulativeGasUsed": "7526924",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "13ccb2ce85bea3f7c14d283ec32bda70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalties\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unspent\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDefaultPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params_\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee_\",\"type\":\"uint96\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"enum IOpenMarketable.Approve\",\"name\":\"approveType\",\"type\":\"uint8\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setTokenRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}},\"getDefaultRoyalty()\":{\"returns\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"getTokenRoyalty(uint256)\":{\"params\":{\"tokenID\":\": token ID\"},\"returns\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setDefaultPrice(uint256)\":{\"params\":{\"price\":\": default price in wei\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setTokenPrice(uint256,uint256)\":{\"params\":{\"price\":\": token price in wei\",\"tokenID\":\": token ID\"}},\"setTokenPrice(uint256,uint256,address,uint8)\":{\"params\":{\"price\":\": token price in wei\",\"tokenID\":\": token ID\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10_000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"setTokenRoyaltyReceiver(uint256,address)\":{\"params\":{\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId to test\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"getDefaultRoyalty()\":{\"notice\":\"GET default royalty info\"},\"getTokenRoyalty(uint256)\":{\"notice\":\"GET token royalty info\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"setDefaultPrice(uint256)\":{\"notice\":\"SET default mint price\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty info\"},\"setTokenPrice(uint256,uint256)\":{\"notice\":\"SET token price\"},\"setTokenPrice(uint256,uint256,address,uint8)\":{\"notice\":\"SET token price\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty info\"},\"setTokenRoyaltyReceiver(uint256,address)\":{\"notice\":\"SET token royalty receiver\"},\"supportsInterface(bytes4)\":{\"notice\":\"test if this interface is supported\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"},\"withdraw()\":{\"notice\":\"withdraw eth\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/OpenAutoMarket.sol\":\"OpenAutoMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool public initialized;\\n    string public template;\\n    uint256 public version;\\n\\n    function parent() external view override (IOpenCloneable) returns (address parent_) {\\n        // eip1167 deployed code = 45 bytes = 10 bytes + 20 bytes address + 15 bytes\\n        // extract bytes 10 to 30: shift 2 bytes (16 bits) then truncate to address 20 bytes (uint160)\\n        return\\n            (address(this).code.length == 45)\\n            ? address(uint160(uint256(bytes32(address(this).code)) >> 16))\\n            : address(0);\\n    }\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    )\\n        public\\n        virtual\\n        override (IOpenCloneable);\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenCloneable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(initialized == false, \\\"Already initialized\\\");\\n        initialized = true;\\n\\n        template = template_;\\n        version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0x6a358c8664b5dea88d61de443332d5744ae1969aa455874ebf82be079005e36e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override (IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override (IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Already initialized\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xeaa767265a7f2805563fa0830dac552b6c55b5660499fbeba8609fadc4bc2e7e\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-2981: NFT Royalty Standard\\n// https://eips.ethereum.org/EIPS/eip-2981\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/common/ERC2981.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC2981 \\u2014\\u2014 IERC2981\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nabstract contract OpenERC2981 is IERC2981, OpenERC165 {\\n    struct Receiver {\\n        address account;\\n        uint96 fee;\\n    }\\n\\n    uint256 internal _defaultPrice;\\n    Receiver internal _defaultRoyalty;\\n    mapping(uint256 => Receiver) internal _tokenRoyalty;\\n\\n    uint96 private constant _MAX_FEE = 10_000;\\n\\n    modifier notTooExpensive(uint256 price) {\\n        /// otherwise may overflow\\n        require(price < 2 ** 128, \\\"Too expensive\\\");\\n        _;\\n    }\\n\\n    modifier lessThanMaxFee(uint256 fee) {\\n        require(fee <= _MAX_FEE, \\\"Royalty fee exceed price\\\");\\n        _;\\n    }\\n\\n    function royaltyInfo(uint256 tokenID, uint256 price)\\n        public\\n        view\\n        override (IERC2981)\\n        notTooExpensive(price)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        Receiver memory royalty = _tokenRoyalty[tokenID];\\n\\n        if (royalty.account == address(0)) {\\n            royalty = _defaultRoyalty;\\n        }\\n\\n        royaltyAmount = _calculateAmount(price, royalty.fee);\\n\\n        return (royalty.account, royaltyAmount);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _calculateAmount(uint256 price, uint96 fee) internal pure returns (uint256) {\\n        return (price * fee) / _MAX_FEE;\\n    }\\n}\\n\",\"keccak256\":\"0x2233b50442d6a9537d90aec054cdb88847bb6a60614b01d59f5d0ec642c8071d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    modifier existsToken(uint256 tokenID) {\\n        require(_owners[tokenID] != address(0), \\\"Invalid token ID\\\");\\n        _;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenID)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        external\\n        payable\\n        override (IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, data);\\n    }\\n\\n    function approve(address spender, uint256 tokenID) public override (IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public override (IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenID)\\n        public\\n        payable\\n        override (IERC721)\\n    {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x80ac58cd // = type(IERC721).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override (IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID)\\n        public\\n        view\\n        override (IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _owners[tokenID];\\n    }\\n\\n    function getApproved(uint256 tokenID)\\n        public\\n        view\\n        override (IERC721)\\n        existsToken(tokenID)\\n        returns (address)\\n    {\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override (IERC721)\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(address to, string memory, uint256 tokenID) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(_owners[tokenID] == address(0), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        require(owner != address(0), \\\"Invalid token ID\\\");\\n\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID) internal virtual {}\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID)\\n        internal\\n        view\\n        virtual\\n        returns (bool ownerOrOperator)\\n    {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _safeTransferFrom(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n    {\\n        _transferFrom(from, to, tokenID);\\n\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n    }\\n\\n    function _transferFrom(address from, address to, uint256 tokenID)\\n        private\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _isERC721Receiver(address from, address to, uint256 tokenID, bytes memory data)\\n        private\\n        returns (bool)\\n    {\\n        return to.code.length == 0\\n            || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data)\\n                == IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID)\\n        private\\n        view\\n        returns (bool ownerOrApproved)\\n    {\\n        ownerOrApproved =\\n            (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n}\\n\",\"keccak256\":\"0x26036e8c81426420a8783782823aee158f7b899e689e267b9bc9db3d67a8c40d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//      OpenERC165\\n//           |\\n//      OpenERC721\\n//           |\\n//  OpenERC721Enumerable \\u2014\\u2014 IERC721Enumerable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override (IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override (IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0x6b88e13c23ec1cd0ddca99f280ad37b07ab7806221e57cba40cb9b6a7d7de5a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//     OpenERC165\\n//          |\\n//     OpenERC721\\n//          |\\n//  OpenERC721Metadata \\u2014\\u2014 IERC721Metadata\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override (IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID)\\n        external\\n        view\\n        virtual\\n        override (IERC721Metadata)\\n        existsToken(tokenID)\\n        returns (string memory)\\n    {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721)\\n        returns (bool)\\n    {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Already initialized\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mint(address to, string memory newTokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _tokenURIs[tokenID] = newTokenURI;\\n\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenURIs[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0xc92300d2ea8a44f0a1a7387e811841aff9c59cc8542024b5e90f630611c19837\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenGuard\\n//\\npragma solidity 0.8.9;\\n\\nabstract contract OpenGuard {\\n    bool private _locked;\\n\\n    modifier reEntryGuard() {\\n        require(!_locked, \\\"No re-entry!\\\");\\n\\n        _locked = true;\\n\\n        _;\\n\\n        _locked = false;\\n    }\\n}\\n\",\"keccak256\":\"0xcb1fe9d2c6a25e3338c30e73120ac1fd7e8e313d699d899194982052db81a824\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |            |             |\\n//   OpenERC721    OpenERC173   OpenERC2981\\n//      (NFT)      (Ownable)   (RoyaltyInfo)\\n//        |            |             |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenMarketable \\u2014\\u2014 IOpenMarketable - OpenGuard\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenGuard.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\n\\nabstract contract OpenMarketable is\\n    IOpenMarketable,\\n    OpenERC721,\\n    OpenERC173,\\n    OpenERC2981,\\n    OpenGuard\\n{\\n    mapping(uint256 => uint256) internal _tokenPrice;\\n\\n    Receiver internal _treasury;\\n\\n    receive() external payable override (IOpenMarketable) {}\\n\\n    /// @notice withdraw eth\\n    function withdraw() external override (IOpenMarketable) onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /// @notice SET default mint price\\n    /// @param price : default price in wei\\n    function setDefaultPrice(uint256 price) public override (IOpenMarketable) onlyOwner {\\n        _setDefaultPrice(price);\\n    }\\n\\n    /// @notice SET default royalty info\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setDefaultRoyalty(address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(receiver, fee);\\n    }\\n\\n    /// @notice SET token price\\n    /// @param tokenID : token ID\\n    /// @param price : token price in wei\\n    function setTokenPrice(uint256 tokenID, uint256 price)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        setTokenPrice(tokenID, price, address(0), Approve.None);\\n    }\\n\\n    /// @notice SET token price\\n    /// @param tokenID : token ID\\n    /// @param price : token price in wei\\n    function setTokenPrice(uint256 tokenID, uint256 price, address approved, Approve approveType)\\n        public\\n        override (IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenPrice(tokenID, price);\\n\\n        if (approveType == Approve.All) {\\n            setApprovalForAll(approved, true);\\n        } else if (approveType == Approve.One) {\\n            approve(approved, tokenID);\\n        }\\n    }\\n\\n    /// @notice SET token royalty info\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10_000\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        public\\n        override (IOpenMarketable)\\n        existsToken(tokenID)\\n        onlyOwner\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    /// @notice SET token royalty receiver\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    function setTokenRoyaltyReceiver(uint256 tokenID, address receiver)\\n        public\\n        override (IOpenMarketable)\\n        existsToken(tokenID)\\n        onlyOwner\\n    {\\n        _tokenRoyalty[tokenID].account = receiver;\\n    }\\n\\n    function getDefaultPrice() public view override (IOpenMarketable) returns (uint256) {\\n        return _defaultPrice;\\n    }\\n\\n    function getTokenPrice(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (uint256)\\n    {\\n        return _tokenPrice[tokenID];\\n    }\\n\\n    /// @notice GET default royalty info\\n    /// @return receiver : address of the royalty receiver, or address(0) to reset\\n    /// @return fee : fee Numerator, less than 10_000\\n    function getDefaultRoyalty()\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (address receiver, uint96 fee)\\n    {\\n        receiver = _defaultRoyalty.account;\\n        fee = _defaultRoyalty.fee;\\n    }\\n\\n    /// @notice GET token royalty info\\n    /// @param tokenID : token ID\\n    /// @return receiver : address of the royalty receiver, or address(0) to reset\\n    /// @return fee : fee Numerator, less than 10_000\\n    function getTokenRoyalty(uint256 tokenID)\\n        public\\n        view\\n        override (IOpenMarketable)\\n        returns (address receiver, uint96 fee)\\n    {\\n        receiver = _tokenRoyalty[tokenID].account;\\n        fee = _tokenRoyalty[tokenID].fee;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC721, OpenERC173, OpenERC2981)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenMarketable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(\\n        uint256 defaultPrice_,\\n        address receiver_,\\n        uint96 fee_,\\n        address treasury_,\\n        uint96 treasuryFee_\\n    )\\n        internal\\n    {\\n        _defaultPrice = defaultPrice_;\\n        _defaultRoyalty = Receiver(receiver_, fee_);\\n        _treasury = Receiver(treasury_, treasuryFee_);\\n    }\\n\\n    function _mint(address to, string memory tokenURI, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        _setTokenRoyalty(tokenID, _defaultRoyalty.account, _defaultRoyalty.fee);\\n\\n        _pay(tokenID, _defaultPrice, to, owner());\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override (OpenERC721) {\\n        delete _tokenRoyalty[tokenID];\\n        delete _tokenPrice[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        virtual\\n        override (OpenERC721)\\n    {\\n        /// Transfer: pay token price (including royalties) to previous token owner (and royalty receiver)\\n        _pay(tokenID, _tokenPrice[tokenID], to, ownerOf(tokenID));\\n\\n        delete _tokenPrice[tokenID];\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _setDefaultRoyalty(address receiver, uint96 fee) internal lessThanMaxFee(fee) {\\n        _defaultRoyalty = Receiver(receiver, fee);\\n\\n        emit SetDefaultRoyalty(receiver, fee);\\n    }\\n\\n    function _setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee)\\n        internal\\n        lessThanMaxFee(fee)\\n    {\\n        _tokenRoyalty[tokenID] = Receiver(receiver, fee);\\n\\n        emit SetTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function _setTokenPrice(uint256 tokenID, uint256 price) internal notTooExpensive(price) {\\n        _tokenPrice[tokenID] = price;\\n\\n        emit SetTokenPrice(tokenID, price);\\n    }\\n\\n    function _setDefaultPrice(uint256 price) internal notTooExpensive(price) {\\n        _defaultPrice = price;\\n\\n        emit SetDefaultPrice(price);\\n    }\\n\\n    function _pay(uint256 tokenID, uint256 price, address buyer, address seller)\\n        private\\n        reEntryGuard\\n    {\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n        if (msg.value == 0) {\\n            return;\\n        }\\n\\n        require(buyer != address(0), \\\"Invalid buyer\\\");\\n        require(seller != address(0), \\\"Invalid seller\\\");\\n        address receiver;\\n        uint256 royalties;\\n        uint256 fee;\\n        uint256 paid;\\n        uint256 unspent = msg.value;\\n\\n        if (price > 0 && buyer != seller) {\\n            fee = _calculateAmount(price, _treasury.fee);\\n\\n            (receiver, royalties) = royaltyInfo(tokenID, price);\\n            if (receiver == address(0)) {\\n                royalties = 0;\\n            }\\n\\n            require(royalties + fee <= price, \\\"Invalid royalties\\\");\\n\\n            /// Transfer amount to be paid to seller, the previous owner\\n            paid = price - (royalties + fee);\\n            if (paid > 0) {\\n                unspent = unspent - paid;\\n                payable(seller).transfer(paid);\\n            }\\n\\n            /// Transfer royalties to receiver\\n            if (royalties > 0) {\\n                unspent = unspent - royalties;\\n                payable(receiver).transfer(royalties);\\n            }\\n\\n            /// Transfer fee to treasury\\n            if (fee > 0) {\\n                unspent = unspent - fee;\\n                payable(_treasury.account).transfer(fee);\\n            }\\n        }\\n\\n        assert(paid + royalties + fee + unspent == msg.value);\\n\\n        /// Transfer back unspent funds to buyer\\n        if (unspent > 0) {\\n            payable(buyer).transfer(unspent);\\n        }\\n\\n        emit Pay(tokenID, price, seller, paid, receiver, royalties, fee, buyer, unspent);\\n    }\\n}\\n\",\"keccak256\":\"0xaebbc0d5b23faded06da71b175ce59bee00e01bbb462c966a11c215aed912d9c\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                       |             |              |\\n//   OpenERC721                            OpenERC2981    OpenERC173    OpenCloneable\\n//     (NFT)                              (RoyaltyInfo)    (ownable)          |\\n//       |                                        |            |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014   |     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014              |\\n//       |                        |           |   |     |      |              |\\n//  OpenERC721Metadata  OpenERC721Enumerable  |   \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |              |\\n//       |                        |           |   |            |              |\\n//       |                        |      OpenMarketable   OpenPauseable       |\\n//       |                        |             |              |              |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs \\u2014\\u2014 IOpenNFTs\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenCloner/OpenCloneable.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\nabstract contract OpenNFTs is\\n    IOpenNFTs,\\n    OpenERC721Metadata,\\n    OpenERC721Enumerable,\\n    OpenMarketable,\\n    OpenPauseable,\\n    OpenCloneable\\n{\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext;\\n\\n    /// @notice onlyMinter, by default only owner can mint, can be overriden\\n    modifier onlyMinter() virtual {\\n        require(msg.sender == owner(), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID)\\n        external\\n        override (IOpenNFTs)\\n        onlyTokenOwnerOrApproved(tokenID)\\n    {\\n        _burn(tokenID);\\n    }\\n\\n    function mint(address minter, string memory tokenURI)\\n        public\\n        override (IOpenNFTs)\\n        onlyMinter\\n        returns (uint256 tokenID)\\n    {\\n        tokenID = tokenIdNext++;\\n        _mint(minter, tokenURI, tokenID);\\n    }\\n\\n    /// @notice test if this interface is supported\\n    /// @param interfaceId interfaceId to test\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (\\n            OpenMarketable, OpenERC721Metadata, OpenERC721Enumerable, OpenCloneable, OpenPauseable\\n        )\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenNFTs).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice _initialize\\n    /// @param name_ name of the NFT Collection\\n    /// @param symbol_ symbol of the NFT Collection\\n    /// @param owner_ owner of the NFT Collection\\n    // solhint-disable-next-line comprehensive-interface\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint256 defaultPrice_,\\n        address receiver_,\\n        uint96 fee_,\\n        address treasury_,\\n        uint96 treasuryFee_\\n    )\\n        internal\\n    {\\n        tokenIdNext = 1;\\n\\n        OpenCloneable._initialize(\\\"OpenNFTs\\\", 4);\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n        OpenMarketable._initialize(defaultPrice_, receiver_, fee_, treasury_, treasuryFee_);\\n    }\\n\\n    /// @notice _mint\\n    /// @param minter minter address\\n    /// @param tokenURI token metdata URI\\n    /// @param tokenID token ID\\n    function _mint(address minter, string memory tokenURI, uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID)\\n        internal\\n        override (OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable)\\n    {\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(address from, address to, uint256 tokenID)\\n        internal\\n        override (OpenERC721, OpenMarketable, OpenERC721Enumerable)\\n    {\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x79963f5e9bcb96b4b80f20357917292e457f7deca2774a4e0126b4dccf27435f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenPauseable \\u2013\\u2013 IOpenPauseable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override (IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override (IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override (OpenERC173)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenPauseable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5cea9abbaa11b92e93c7f88d48ad41b8bf22f66779e14c77c60f6c25edb55af8\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd91f944d2ad53e9c795a855167e495d4b533648a349fcb913e631cfe7b4013b7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x82d41cc520f5c9057e7bfc07873e3b9529792141e18dd5983bd882939879b9ef\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1b0093a40ef61bbd99626cf148b24308677df0593ff427c3d4aed2fa1253e1a9\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data)\\n        external\\n        payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb17e8fbff5f139c0d2eb98e9841cb8b97e5b003436c3f3412a350503b87f94cb\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd040488949e399674a34c9b01b34245d76e41ab267620f49f171aae14d07875f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x72918d0b7d703c5cf08686014c2e0127ed56411c72c551232038ebcec4facc4d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa43438f26b96a4a3a488e1e9701ee7291e238498c27bb45a9530fe11dc865896\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bytes memory params\\n    )\\n        external;\\n\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function parent() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7b3ea591edb9086e4f478610d5beaba87a38430f299ca19bfcad639622c901f1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    enum Approve {\\n        None,\\n        One,\\n        All\\n    }\\n\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(\\n        uint256 tokenID,\\n        uint256 price,\\n        address seller,\\n        uint256 paid,\\n        address receiver,\\n        uint256 royalties,\\n        uint256 fee,\\n        address buyer,\\n        uint256 unspent\\n    );\\n\\n    receive() external payable;\\n\\n    function withdraw() external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price, address approved, Approve approveType)\\n        external;\\n\\n    function setTokenRoyalty(uint256 tokenID, address receiver, uint96 fee) external;\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyaltyReceiver(uint256 tokenID, address receiver) external;\\n\\n    function getDefaultPrice() external view returns (uint256 price);\\n\\n    function getTokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function getTokenRoyalty(uint256 tokenID)\\n        external\\n        view\\n        returns (address receiver, uint96 fee);\\n\\n    function getDefaultRoyalty() external view returns (address receiver, uint96 fee);\\n}\\n\",\"keccak256\":\"0xe987f1116ce67d4cc7180796052f05c62074b61204d84806b1d4748230065856\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x2acd2b95f34c657d34df488923bfc6d54854dd6bcb989ad38e71d9dad609ab2a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenAutoMarket {\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function transfer(address to, uint256 tokenID) external;\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe280eaec685e55576e60975466ec0d8df94c24fd576675bf45c2bf27adac9235\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.old.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/next/OpenAutoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                                         |               |\\n//   OpenERC721                                               OpenERC173     OpenCloneable\\n//     (NFT)                                                   (ownable)           |\\n//       |                                                         |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014               |\\n//       |                        |                  |      |      |               |\\n//  OpenERC721Metadata  OpenERC721Enumerable   OpenERC2981  |      |               |\\n//       |                        |           (RoyaltyInfo) |      |               |\\n//       |                        |                  |      |      |               |\\n//       |                        |                  \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |               |\\n//       |                        |                  |             |               |\\n//       |                        |            OpenMarketable OpenPauseable        |\\n//       |                        |                  |             |               |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs\\n//       |\\n//   OpenAutoMarket \\u2014\\u2014 IOpenAutoMarket\\n//\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenAutoMarket.sol\\\";\\nimport {IOpenNFTs as IOpenNFTsOld} from \\\"../interfaces/IOpenNFTs.old.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenAutoMarket is IOpenAutoMarket, OpenNFTs {\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyMinter() override(OpenNFTs) {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    function transfer(address to, uint256 tokenID) external override(IOpenAutoMarket) existsToken(tokenID) {\\n        setTokenPrice(tokenID, 0);\\n\\n        safeTransferFrom(msg.sender, to, tokenID);\\n    }\\n\\n    function buy(uint256 tokenID) external payable override(IOpenAutoMarket) existsToken(tokenID) {\\n        /// Get token price\\n        uint256 price = _tokenPrice[tokenID];\\n\\n        /// Require price defined\\n        require(price > 0, \\\"Not to sell\\\");\\n\\n        /// Require enough value sent\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n\\n        /// Get previous token owner\\n        address from = ownerOf(tokenID);\\n        assert(from != address(0));\\n        require(from != msg.sender, \\\"Already token owner!\\\");\\n\\n        /// This AutoMarket approves msg.sender (requires AutoMarket isAprovedForAll)\\n        this.approve(msg.sender, tokenID);\\n\\n        /// Transfer token\\n        safeTransferFrom(from, msg.sender, tokenID);\\n\\n        /// Reset token price (to be eventualy defined by new owner)\\n        delete _tokenPrice[tokenID];\\n    }\\n\\n    function mint(string memory tokenURI) external override(IOpenAutoMarket) returns (uint256 tokenID) {\\n        tokenID = mint(msg.sender, tokenURI, 0, address(0), 0);\\n    }\\n\\n    function mint(\\n        address minter_,\\n        string memory tokenURI_,\\n        uint256 tokenPrice_,\\n        address receiver_,\\n        uint96 fee_\\n    ) public payable override(IOpenAutoMarket) onlyMinter onlyWhenNotPaused returns (uint256 tokenID) {\\n        tokenID = OpenNFTs.mint(minter_, tokenURI_);\\n\\n        OpenMarketable._setTokenPrice(tokenID, tokenPrice_);\\n        OpenMarketable._setTokenRoyalty(tokenID, receiver_, fee_);\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        bytes memory params_\\n    ) public virtual override(OpenCloneable) {\\n        (\\n            uint256 defaultPrice_,\\n            address receiver_,\\n            uint96 fee_,\\n            address treasury_,\\n            uint96 treasuryFee_,\\n            bool[] memory options_\\n        ) = abi.decode(params_, (uint256, address, uint96, address, uint96, bool[]));\\n\\n        open = options_[0];\\n        OpenNFTs._initialize(name_, symbol_, owner_, defaultPrice_, receiver_, fee_, treasury_, treasuryFee_);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenNFTs) returns (bool) {\\n        return interfaceId == type(IOpenAutoMarket).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8b22911bcd3c1df819b6232ccdd183962eb4aff8e143a27c8ed911660c4664a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613431806100206000396000f3fe6080604052600436106102765760003560e01c80636d3c7ec51161014f578063b88d4fde116100c1578063d96a094a1161007a578063d96a094a1461078e578063e985e9c5146107a1578063eb685c47146107ea578063ee8c8b631461080a578063f2fde38b1461082a578063fcfff16f1461084a57600080fd5b8063b88d4fde146106d9578063c457fb37146106ec578063c4ae316814610719578063c87b56dd1461072e578063d0def5211461074e578063d85d3d271461076e57600080fd5b80638cabe05a116101135780638cabe05a1461061c5780638da5cb5b1461064c57806395d89b411461066f578063a22cb46514610684578063a9059cbb146106a4578063b086613c146106c457600080fd5b80636d3c7ec5146105415780636f2ddd931461056157806370a0823114610576578063833b7b78146105965780638bbf58b31461060657600080fd5b80632f745c59116101e85780634f6ccce7116101ac5780634f6ccce71461049e57806354fd4d50146104be5780635944c753146104d45780635c975abb146104f457806360f96a8f1461050c5780636352211e1461052157600080fd5b80632f745c59146104235780633ccfd60b1461044357806342842e0e1461045857806342966c681461046b5780634472167b1461048b57600080fd5b80630c5597e41161023a5780630c5597e414610353578063158ef93e1461037357806318160ddd146103925780631eb40e21146103b157806323b872dd146103d15780632a55205a146103e457600080fd5b806301ffc9a71461028257806304634d8d146102b757806306fdde03146102d9578063081812fc146102fb578063095ea7b31461033357600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004612aee565b610864565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d2366004612b35565b61088f565b005b3480156102e557600080fd5b506102ee6108d5565b6040516102ae9190612bbb565b34801561030757600080fd5b5061031b610316366004612bce565b610967565b6040516001600160a01b0390911681526020016102ae565b34801561033f57600080fd5b506102d761034e366004612be7565b6109be565b34801561035f57600080fd5b506102d761036e366004612c13565b610a82565b34801561037f57600080fd5b506013546102a290610100900460ff1681565b34801561039e57600080fd5b506008545b6040519081526020016102ae565b3480156103bd57600080fd5b506102d76103cc366004612cef565b610b16565b6102d76103df366004612d8c565b610b8f565b3480156103f057600080fd5b506104046103ff366004612dcd565b610b9f565b604080516001600160a01b0390931683526020830191909152016102ae565b34801561042f57600080fd5b506103a361043e366004612be7565b610c55565b34801561044f57600080fd5b506102d7610cdc565b6102d7610466366004612d8c565b610d3a565b34801561047757600080fd5b506102d7610486366004612bce565b610d55565b6103a3610499366004612def565b610d85565b3480156104aa57600080fd5b506103a36104b9366004612bce565b610e49565b3480156104ca57600080fd5b506103a360155481565b3480156104e057600080fd5b506102d76104ef366004612e70565b610eb3565b34801561050057600080fd5b5060135460ff166102a2565b34801561051857600080fd5b5061031b610f51565b34801561052d57600080fd5b5061031b61053c366004612bce565b610f9a565b34801561054d57600080fd5b506102d761055c366004612bce565b610fed565b34801561056d57600080fd5b506102ee611025565b34801561058257600080fd5b506103a3610591366004612eb2565b6110b3565b3480156105a257600080fd5b506105df6105b1366004612bce565b6000908152600f60205260409020546001600160a01b03811691600160a01b9091046001600160601b031690565b604080516001600160a01b0390931683526001600160601b039091166020830152016102ae565b34801561061257600080fd5b506103a360165481565b34801561062857600080fd5b50600e546001600160a01b03811690600160a01b90046001600160601b03166105df565b34801561065857600080fd5b50600c5461010090046001600160a01b031661031b565b34801561067b57600080fd5b506102ee61111e565b34801561069057600080fd5b506102d761069f366004612edd565b61112d565b3480156106b057600080fd5b506102d76106bf366004612be7565b611199565b3480156106d057600080fd5b50600d546103a3565b6102d76106e7366004612f0b565b6111e5565b3480156106f857600080fd5b506103a3610707366004612bce565b60009081526011602052604090205490565b34801561072557600080fd5b506102d76111f7565b34801561073a57600080fd5b506102ee610749366004612bce565b611238565b34801561075a57600080fd5b506103a3610769366004612f6b565b611310565b34801561077a57600080fd5b506103a3610789366004612fbb565b61138e565b6102d761079c366004612bce565b61139f565b3480156107ad57600080fd5b506102a26107bc366004612ff0565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b3480156107f657600080fd5b506102d7610805366004612dcd565b61154b565b34801561081657600080fd5b506102d761082536600461301e565b61157b565b34801561083657600080fd5b506102d7610845366004612eb2565b6115fa565b34801561085657600080fd5b506017546102a29060ff1681565b60006001600160e01b0319821663085fa7e160e11b1480610889575061088982611632565b92915050565b600c5461010090046001600160a01b031633146108c75760405162461bcd60e51b81526004016108be9061306c565b60405180910390fd5b6108d18282611657565b5050565b6060600580546108e49061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546109109061308f565b801561095d5780601f106109325761010080835404028352916020019161095d565b820191906000526020600020905b81548152906001019060200180831161094057829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b031661099d5760405162461bcd60e51b81526004016108be906130c4565b6000838152600260205260409020546001600160a01b031691505b50919050565b6109c8338261171f565b610a145760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016108be565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a4982610f9a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526020819052604090205482906001600160a01b0316610ab85760405162461bcd60e51b81526004016108be906130c4565b600c5461010090046001600160a01b03163314610ae75760405162461bcd60e51b81526004016108be9061306c565b506000918252600f602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60008060008060008086806020019051810190610b3391906130ee565b95509550955095509550955080600081518110610b5257610b526131f9565b6020026020010151601760006101000a81548160ff021916908315150217905550610b838a8a8a898989898961177a565b50505050505050505050565b610b9a83838361181e565b505050565b60008082600160801b8110610bc65760405162461bcd60e51b81526004016108be9061320f565b6000858152600f60209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610c3a575060408051808201909152600e546001600160a01b0381168252600160a01b90046001600160601b031660208201525b610c48858260200151611a54565b9051969095509350505050565b6000610c60836110b3565b8210610c9f5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108be565b6001600160a01b0383166000908152600960205260409020805483908110610cc957610cc96131f9565b9060005260206000200154905092915050565b600c5461010090046001600160a01b03163314610d0b5760405162461bcd60e51b81526004016108be9061306c565b60405133904780156108fc02916000818181858888f19350505050158015610d37573d6000803e3d6000fd5b50565b610b9a83838360405180602001604052806000815250611a7d565b80610d603382611ad5565b610d7c5760405162461bcd60e51b81526004016108be90613236565b6108d182611b0b565b60175460009060ff1680610da95750600c546001600160a01b036101009091041633145b610de25760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108be565b60135460ff1615610e1f5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016108be565b610e298686611310565b9050610e358185611b14565b610e40818484611b80565b95945050505050565b6008546000908210610e8e5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108be565b60088281548110610ea157610ea16131f9565b90600052602060002001549050919050565b60008381526020819052604090205483906001600160a01b0316610ee95760405162461bcd60e51b81526004016108be906130c4565b600c5461010090046001600160a01b03163314610f185760405162461bcd60e51b81526004016108be9061306c565b83610f233382611ad5565b610f3f5760405162461bcd60e51b81526004016108be90613236565b610f4a858585611b80565b5050505050565b6000602d303b14610f625750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c610f939061326d565b901c905090565b60008181526020819052604081205482906001600160a01b0316610fd05760405162461bcd60e51b81526004016108be906130c4565b50506000908152602081905260409020546001600160a01b031690565b600c5461010090046001600160a01b0316331461101c5760405162461bcd60e51b81526004016108be9061306c565b610d3781611c65565b601480546110329061308f565b80601f016020809104026020016040519081016040528092919081815260200182805461105e9061308f565b80156110ab5780601f10611080576101008083540402835291602001916110ab565b820191906000526020600020905b81548152906001019060200180831161108e57829003601f168201915b505050505081565b60006001600160a01b0382166111025760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b60448201526064016108be565b506001600160a01b031660009081526001602052604090205490565b6060600680546108e49061308f565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008181526020819052604090205481906001600160a01b03166111cf5760405162461bcd60e51b81526004016108be906130c4565b6111da82600061154b565b610b9a338484610d3a565b6111f184848484611a7d565b50505050565b600c5461010090046001600160a01b031633146112265760405162461bcd60e51b81526004016108be9061306c565b6013546112369060ff1615611cc5565b565b60008181526020819052604090205460609082906001600160a01b03166112715760405162461bcd60e51b81526004016108be906130c4565b6000838152600760205260409020805461128a9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546112b69061308f565b80156113035780601f106112d857610100808354040283529160200191611303565b820191906000526020600020905b8154815290600101906020018083116112e657829003601f168201915b5050505050915050919050565b60175460009060ff16806113345750600c546001600160a01b036101009091041633145b61136d5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108be565b6016805490600061137d836132a7565b919050559050610889838383611d0a565b600061088933836000806000610d85565b60008181526020819052604090205481906001600160a01b03166113d55760405162461bcd60e51b81526004016108be906130c4565b6000828152601160205260409020548061141f5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016108be565b803410156114625760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108be565b600061146d84610f9a565b90506001600160a01b038116611485576114856132c2565b6001600160a01b0381163314156114d55760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016108be565b60405163095ea7b360e01b815233600482015260248101859052309063095ea7b390604401600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b50505050611537813386610d3a565b505050600090815260116020526040812055565b816115563382611ad5565b6115725760405162461bcd60e51b81526004016108be90613236565b610b9a83836000805b836115863382611ad5565b6115a25760405162461bcd60e51b81526004016108be90613236565b6115ac8585611b14565b60028260028111156115c0576115c06132d8565b14156115d6576115d183600161112d565b610f4a565b60018260028111156115ea576115ea6132d8565b1415610f4a57610f4a83866109be565b600c5461010090046001600160a01b031633146116295760405162461bcd60e51b81526004016108be9061306c565b610d3781611d15565b60006001600160e01b03198216639248994960e01b1480610889575061088982611d6f565b6001600160601b0381166127108111156116ae5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108be565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b81028217600e558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b60008061172b83610f9a565b9050836001600160a01b0316816001600160a01b0316148061177257506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b60016016556040805180820190915260088152674f70656e4e46547360c01b60208201526117a9906004611d94565b6117b38888611de5565b6117bc86611e3c565b600d949094556040805180820182526001600160a01b039485168082526001600160601b039485166020928301819052600160a01b908102909117600e5582518084019093529290941680825294909216919092018190520217601255505050565b806118293382611ad5565b6118455760405162461bcd60e51b81526004016108be90613236565b6001600160a01b03841661189b5760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016108be565b6001600160a01b0383166118f15760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016108be565b6118fa82610f9a565b6001600160a01b0316846001600160a01b03161461194b5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016108be565b611956848484611e75565b600082815260026020526040902080546001600160a01b03191690556001600160a01b0384811690841614611a0d576001600160a01b038416600090815260016020819052604082208054919290916119b09084906132ee565b90915550506001600160a01b038316600090815260016020819052604082208054919290916119e0908490613305565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000612710611a6c6001600160601b0384168561331d565b611a76919061333c565b9392505050565b611a8884848461181e565b611a9484848484611e80565b6111f15760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b60448201526064016108be565b6000611ae1838361171f565b80611a765750826001600160a01b0316611afa83610967565b6001600160a01b0316149392505050565b610d3781611f2e565b80600160801b8110611b385760405162461bcd60e51b81526004016108be9061320f565b60008381526011602090815260409182902084905581518581529081018490527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b9101611712565b6001600160601b038116612710811115611bd75760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108be565b6040805180820182526001600160a01b038581168083526001600160601b03868116602080860182815260008c8152600f835288902096519051909316600160a01b029290941691909117909355835188815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600160405180910390a150505050565b80600160801b8110611c895760405162461bcd60e51b81526004016108be9061320f565b600d8290556040518281527f9f7a6492db3843bc01c0adb23cd27be964155c1d45c566f2ee32f28faf4eb6059060200160405180910390a15050565b6013805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610b9a838383611f53565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b031982166350130d5360e01b1480610889575061088982611fac565b601354610100900460ff1615611dbc5760405162461bcd60e51b81526004016108be9061335e565b6013805461ff0019166101001790558151611dde906014906020850190612a09565b5060155550565b60045460ff1615611e085760405162461bcd60e51b81526004016108be9061335e565b6004805460ff191660011790558151611e28906005906020850190612a09565b508051610b9a906006906020840190612a09565b600c5460ff1615611e5f5760405162461bcd60e51b81526004016108be9061335e565b600c805460ff19166001179055610d3781611d15565b610b9a838383611fd1565b60006001600160a01b0384163b1580610e405750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611ec89033908a908990899060040161338b565b602060405180830381600087803b158015611ee257600080fd5b505af1158015611ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1a91906133c8565b6001600160e01b0319161495945050505050565b6000818152600f602090815260408083208390556011909152812055610d378161200a565b600e54611f7c9082906001600160a01b03811690600160a01b90046001600160601b0316611b80565b611fa181600d5485611f9c600c546001600160a01b036101009091041690565b6120d5565b610b9a8383836124aa565b60006001600160e01b031982166398396bd360e01b1480610889575061088982612503565b600081815260116020526040902054611ff090829084611f9c83610f9a565b600081815260116020526040812055610b9a838383612528565b600061201582610f9a565b9050612021818361253c565b6000828152600b6020526040812054600854909190612042906001906132ee565b9050600060088281548110612059576120596131f9565b6000918252602080832090910154808352600b909152604080832086905587835282209190915560088054919250829185908110612099576120996131f9565b60009182526020909120015560088054806120b6576120b66133e5565b60019003818190600052602060002001600090559055610f4a8561264a565b60105460ff16156121175760405162461bcd60e51b815260206004820152600c60248201526b4e6f2072652d656e7472792160a01b60448201526064016108be565b6010805460ff19166001179055348311156121675760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108be565b346121715761249a565b6001600160a01b0382166121b75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210313abcb2b960991b60448201526064016108be565b6001600160a01b0381166121fe5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b63632b960911b60448201526064016108be565b60008080803487158015906122255750856001600160a01b0316876001600160a01b031614155b156123b257601254612248908990600160a01b90046001600160601b0316611a54565b92506122548989610b9f565b90955093506001600160a01b03851661226c57600093505b876122778486613305565b11156122b95760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420726f79616c7469657360781b60448201526064016108be565b6122c38385613305565b6122cd90896132ee565b9150811561231a576122df82826132ee565b6040519091506001600160a01b0387169083156108fc029084906000818181858888f19350505050158015612318573d6000803e3d6000fd5b505b83156123655761232a84826132ee565b6040519091506001600160a01b0386169085156108fc029086906000818181858888f19350505050158015612363573d6000803e3d6000fd5b505b82156123b25761237583826132ee565b6012546040519192506001600160a01b03169084156108fc029085906000818181858888f193505050501580156123b0573d6000803e3d6000fd5b505b3481846123bf8786613305565b6123c99190613305565b6123d39190613305565b146123e0576123e06132c2565b801561241e576040516001600160a01b0388169082156108fc029083906000818181858888f1935050505015801561241c573d6000803e3d6000fd5b505b604080518a8152602081018a90526001600160a01b038881168284015260608201859052878116608083015260a0820187905260c08201869052891660e0820152610100810183905290517f3fd8cbcd9af698ecb35353cccbfbb5f149fbcfcfe43f043bbfc95c3feb2307b8918190036101200190a150505050505b50506010805460ff191690555050565b6124b4838261266a565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610b9a8383836126a8565b60006001600160e01b03198216637e2463f960e01b14806108895750610889826126d3565b612532838261253c565b610b9a828261266a565b6000818152600a6020526040812054906001612557856110b3565b61256191906132ee565b90508082146125f8576001600160a01b0384166000908152600960205260408120805483908110612594576125946131f9565b906000526020600020015490508060096000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106125d8576125d86131f9565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b03871683526009909152902080548061262e5761262e6133e5565b6001900381819060005260206000200160009055905550505050565b600081815260076020526040812061266191612a8d565b610d37816126f8565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b600081815260076020908152604090912083516126c792850190612a09565b50610b9a8383836127e9565b600063152a902d60e11b6001600160e01b031983161480610889575061088982612974565b600061270382610f9a565b90506001600160a01b03811661272b5760405162461bcd60e51b81526004016108be906130c4565b6001600160a01b038116600090815260016020526040902054612750576127506132c2565b6001600160a01b0381166000908152600160208190526040822080549192909161277b9084906132ee565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166128365760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016108be565b6000818152602081905260409020546001600160a01b0316156128925760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016108be565b6001600160a01b038316600090815260016020819052604082208054919290916128bd908490613305565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129336000848360405180602001604052806000815250611e80565b610b9a5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016108be565b60006307f5828d60e41b6001600160e01b031983161480610889575061088982600063780e9d6360e01b6001600160e01b0319831614806108895750610889826000635b5e139f60e01b6001600160e01b03198316148061088957506108898260006380ac58cd60e01b6001600160e01b03198316148061088957506001600160e01b031982166301ffc9a760e01b14610889565b828054612a159061308f565b90600052602060002090601f016020900481019282612a375760008555612a7d565b82601f10612a5057805160ff1916838001178555612a7d565b82800160010185558215612a7d579182015b82811115612a7d578251825591602001919060010190612a62565b50612a89929150612ac3565b5090565b508054612a999061308f565b6000825580601f10612aa9575050565b601f016020900490600052602060002090810190610d3791905b5b80821115612a895760008155600101612ac4565b6001600160e01b031981168114610d3757600080fd5b600060208284031215612b0057600080fd5b8135611a7681612ad8565b6001600160a01b0381168114610d3757600080fd5b6001600160601b0381168114610d3757600080fd5b60008060408385031215612b4857600080fd5b8235612b5381612b0b565b91506020830135612b6381612b20565b809150509250929050565b6000815180845260005b81811015612b9457602081850181015186830182015201612b78565b81811115612ba6576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611a766020830184612b6e565b600060208284031215612be057600080fd5b5035919050565b60008060408385031215612bfa57600080fd5b8235612c0581612b0b565b946020939093013593505050565b60008060408385031215612c2657600080fd5b823591506020830135612b6381612b0b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c7757612c77612c38565b604052919050565b600082601f830112612c9057600080fd5b813567ffffffffffffffff811115612caa57612caa612c38565b612cbd601f8201601f1916602001612c4e565b818152846020838601011115612cd257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612d0557600080fd5b843567ffffffffffffffff80821115612d1d57600080fd5b612d2988838901612c7f565b95506020870135915080821115612d3f57600080fd5b612d4b88838901612c7f565b945060408701359150612d5d82612b0b565b90925060608601359080821115612d7357600080fd5b50612d8087828801612c7f565b91505092959194509250565b600080600060608486031215612da157600080fd5b8335612dac81612b0b565b92506020840135612dbc81612b0b565b929592945050506040919091013590565b60008060408385031215612de057600080fd5b50508035926020909101359150565b600080600080600060a08688031215612e0757600080fd5b8535612e1281612b0b565b9450602086013567ffffffffffffffff811115612e2e57600080fd5b612e3a88828901612c7f565b945050604086013592506060860135612e5281612b0b565b91506080860135612e6281612b20565b809150509295509295909350565b600080600060608486031215612e8557600080fd5b833592506020840135612e9781612b0b565b91506040840135612ea781612b20565b809150509250925092565b600060208284031215612ec457600080fd5b8135611a7681612b0b565b8015158114610d3757600080fd5b60008060408385031215612ef057600080fd5b8235612efb81612b0b565b91506020830135612b6381612ecf565b60008060008060808587031215612f2157600080fd5b8435612f2c81612b0b565b93506020850135612f3c81612b0b565b925060408501359150606085013567ffffffffffffffff811115612f5f57600080fd5b612d8087828801612c7f565b60008060408385031215612f7e57600080fd5b8235612f8981612b0b565b9150602083013567ffffffffffffffff811115612fa557600080fd5b612fb185828601612c7f565b9150509250929050565b600060208284031215612fcd57600080fd5b813567ffffffffffffffff811115612fe457600080fd5b61177284828501612c7f565b6000806040838503121561300357600080fd5b823561300e81612b0b565b91506020830135612b6381612b0b565b6000806000806080858703121561303457600080fd5b8435935060208501359250604085013561304d81612b0b565b915060608501356003811061306157600080fd5b939692955090935050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c908216806130a357607f821691505b602082108114156109b857634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b60008060008060008060c0878903121561310757600080fd5b8651955060208088015161311a81612b0b565b604089015190965061312b81612b20565b606089015190955061313c81612b0b565b608089015190945061314d81612b20565b60a089015190935067ffffffffffffffff8082111561316b57600080fd5b818a0191508a601f83011261317f57600080fd5b81518181111561319157613191612c38565b8060051b91506131a2848301612c4e565b818152918301840191848101908d8411156131bc57600080fd5b938501935b838510156131e657845192506131d683612ecf565b82825293850193908501906131c1565b8096505050505050509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b805160208083015191908110156109b85760001960209190910360031b1b16919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156132bb576132bb613291565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60008282101561330057613300613291565b500390565b6000821982111561331857613318613291565b500190565b600081600019048311821515161561333757613337613291565b500290565b60008261335957634e487b7160e01b600052601260045260246000fd5b500490565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133be90830184612b6e565b9695505050505050565b6000602082840312156133da57600080fd5b8151611a7681612ad8565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d1c52231a59327a6ec3974b837498d54486d6145a20417a53f003a5418e47d0c64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102765760003560e01c80636d3c7ec51161014f578063b88d4fde116100c1578063d96a094a1161007a578063d96a094a1461078e578063e985e9c5146107a1578063eb685c47146107ea578063ee8c8b631461080a578063f2fde38b1461082a578063fcfff16f1461084a57600080fd5b8063b88d4fde146106d9578063c457fb37146106ec578063c4ae316814610719578063c87b56dd1461072e578063d0def5211461074e578063d85d3d271461076e57600080fd5b80638cabe05a116101135780638cabe05a1461061c5780638da5cb5b1461064c57806395d89b411461066f578063a22cb46514610684578063a9059cbb146106a4578063b086613c146106c457600080fd5b80636d3c7ec5146105415780636f2ddd931461056157806370a0823114610576578063833b7b78146105965780638bbf58b31461060657600080fd5b80632f745c59116101e85780634f6ccce7116101ac5780634f6ccce71461049e57806354fd4d50146104be5780635944c753146104d45780635c975abb146104f457806360f96a8f1461050c5780636352211e1461052157600080fd5b80632f745c59146104235780633ccfd60b1461044357806342842e0e1461045857806342966c681461046b5780634472167b1461048b57600080fd5b80630c5597e41161023a5780630c5597e414610353578063158ef93e1461037357806318160ddd146103925780631eb40e21146103b157806323b872dd146103d15780632a55205a146103e457600080fd5b806301ffc9a71461028257806304634d8d146102b757806306fdde03146102d9578063081812fc146102fb578063095ea7b31461033357600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004612aee565b610864565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d2366004612b35565b61088f565b005b3480156102e557600080fd5b506102ee6108d5565b6040516102ae9190612bbb565b34801561030757600080fd5b5061031b610316366004612bce565b610967565b6040516001600160a01b0390911681526020016102ae565b34801561033f57600080fd5b506102d761034e366004612be7565b6109be565b34801561035f57600080fd5b506102d761036e366004612c13565b610a82565b34801561037f57600080fd5b506013546102a290610100900460ff1681565b34801561039e57600080fd5b506008545b6040519081526020016102ae565b3480156103bd57600080fd5b506102d76103cc366004612cef565b610b16565b6102d76103df366004612d8c565b610b8f565b3480156103f057600080fd5b506104046103ff366004612dcd565b610b9f565b604080516001600160a01b0390931683526020830191909152016102ae565b34801561042f57600080fd5b506103a361043e366004612be7565b610c55565b34801561044f57600080fd5b506102d7610cdc565b6102d7610466366004612d8c565b610d3a565b34801561047757600080fd5b506102d7610486366004612bce565b610d55565b6103a3610499366004612def565b610d85565b3480156104aa57600080fd5b506103a36104b9366004612bce565b610e49565b3480156104ca57600080fd5b506103a360155481565b3480156104e057600080fd5b506102d76104ef366004612e70565b610eb3565b34801561050057600080fd5b5060135460ff166102a2565b34801561051857600080fd5b5061031b610f51565b34801561052d57600080fd5b5061031b61053c366004612bce565b610f9a565b34801561054d57600080fd5b506102d761055c366004612bce565b610fed565b34801561056d57600080fd5b506102ee611025565b34801561058257600080fd5b506103a3610591366004612eb2565b6110b3565b3480156105a257600080fd5b506105df6105b1366004612bce565b6000908152600f60205260409020546001600160a01b03811691600160a01b9091046001600160601b031690565b604080516001600160a01b0390931683526001600160601b039091166020830152016102ae565b34801561061257600080fd5b506103a360165481565b34801561062857600080fd5b50600e546001600160a01b03811690600160a01b90046001600160601b03166105df565b34801561065857600080fd5b50600c5461010090046001600160a01b031661031b565b34801561067b57600080fd5b506102ee61111e565b34801561069057600080fd5b506102d761069f366004612edd565b61112d565b3480156106b057600080fd5b506102d76106bf366004612be7565b611199565b3480156106d057600080fd5b50600d546103a3565b6102d76106e7366004612f0b565b6111e5565b3480156106f857600080fd5b506103a3610707366004612bce565b60009081526011602052604090205490565b34801561072557600080fd5b506102d76111f7565b34801561073a57600080fd5b506102ee610749366004612bce565b611238565b34801561075a57600080fd5b506103a3610769366004612f6b565b611310565b34801561077a57600080fd5b506103a3610789366004612fbb565b61138e565b6102d761079c366004612bce565b61139f565b3480156107ad57600080fd5b506102a26107bc366004612ff0565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b3480156107f657600080fd5b506102d7610805366004612dcd565b61154b565b34801561081657600080fd5b506102d761082536600461301e565b61157b565b34801561083657600080fd5b506102d7610845366004612eb2565b6115fa565b34801561085657600080fd5b506017546102a29060ff1681565b60006001600160e01b0319821663085fa7e160e11b1480610889575061088982611632565b92915050565b600c5461010090046001600160a01b031633146108c75760405162461bcd60e51b81526004016108be9061306c565b60405180910390fd5b6108d18282611657565b5050565b6060600580546108e49061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546109109061308f565b801561095d5780601f106109325761010080835404028352916020019161095d565b820191906000526020600020905b81548152906001019060200180831161094057829003601f168201915b5050505050905090565b60008181526020819052604081205482906001600160a01b031661099d5760405162461bcd60e51b81526004016108be906130c4565b6000838152600260205260409020546001600160a01b031691505b50919050565b6109c8338261171f565b610a145760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016108be565b600081815260026020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a4982610f9a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008281526020819052604090205482906001600160a01b0316610ab85760405162461bcd60e51b81526004016108be906130c4565b600c5461010090046001600160a01b03163314610ae75760405162461bcd60e51b81526004016108be9061306c565b506000918252600f602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b60008060008060008086806020019051810190610b3391906130ee565b95509550955095509550955080600081518110610b5257610b526131f9565b6020026020010151601760006101000a81548160ff021916908315150217905550610b838a8a8a898989898961177a565b50505050505050505050565b610b9a83838361181e565b505050565b60008082600160801b8110610bc65760405162461bcd60e51b81526004016108be9061320f565b6000858152600f60209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610c3a575060408051808201909152600e546001600160a01b0381168252600160a01b90046001600160601b031660208201525b610c48858260200151611a54565b9051969095509350505050565b6000610c60836110b3565b8210610c9f5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108be565b6001600160a01b0383166000908152600960205260409020805483908110610cc957610cc96131f9565b9060005260206000200154905092915050565b600c5461010090046001600160a01b03163314610d0b5760405162461bcd60e51b81526004016108be9061306c565b60405133904780156108fc02916000818181858888f19350505050158015610d37573d6000803e3d6000fd5b50565b610b9a83838360405180602001604052806000815250611a7d565b80610d603382611ad5565b610d7c5760405162461bcd60e51b81526004016108be90613236565b6108d182611b0b565b60175460009060ff1680610da95750600c546001600160a01b036101009091041633145b610de25760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108be565b60135460ff1615610e1f5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016108be565b610e298686611310565b9050610e358185611b14565b610e40818484611b80565b95945050505050565b6008546000908210610e8e5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016108be565b60088281548110610ea157610ea16131f9565b90600052602060002001549050919050565b60008381526020819052604090205483906001600160a01b0316610ee95760405162461bcd60e51b81526004016108be906130c4565b600c5461010090046001600160a01b03163314610f185760405162461bcd60e51b81526004016108be9061306c565b83610f233382611ad5565b610f3f5760405162461bcd60e51b81526004016108be90613236565b610f4a858585611b80565b5050505050565b6000602d303b14610f625750600090565b6010306001600160a01b0316803b806020016040519081016040528181526000908060200190933c610f939061326d565b901c905090565b60008181526020819052604081205482906001600160a01b0316610fd05760405162461bcd60e51b81526004016108be906130c4565b50506000908152602081905260409020546001600160a01b031690565b600c5461010090046001600160a01b0316331461101c5760405162461bcd60e51b81526004016108be9061306c565b610d3781611c65565b601480546110329061308f565b80601f016020809104026020016040519081016040528092919081815260200182805461105e9061308f565b80156110ab5780601f10611080576101008083540402835291602001916110ab565b820191906000526020600020905b81548152906001019060200180831161108e57829003601f168201915b505050505081565b60006001600160a01b0382166111025760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207a65726f206164647265737360601b60448201526064016108be565b506001600160a01b031660009081526001602052604090205490565b6060600680546108e49061308f565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008181526020819052604090205481906001600160a01b03166111cf5760405162461bcd60e51b81526004016108be906130c4565b6111da82600061154b565b610b9a338484610d3a565b6111f184848484611a7d565b50505050565b600c5461010090046001600160a01b031633146112265760405162461bcd60e51b81526004016108be9061306c565b6013546112369060ff1615611cc5565b565b60008181526020819052604090205460609082906001600160a01b03166112715760405162461bcd60e51b81526004016108be906130c4565b6000838152600760205260409020805461128a9061308f565b80601f01602080910402602001604051908101604052809291908181526020018280546112b69061308f565b80156113035780601f106112d857610100808354040283529160200191611303565b820191906000526020600020905b8154815290600101906020018083116112e657829003601f168201915b5050505050915050919050565b60175460009060ff16806113345750600c546001600160a01b036101009091041633145b61136d5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016108be565b6016805490600061137d836132a7565b919050559050610889838383611d0a565b600061088933836000806000610d85565b60008181526020819052604090205481906001600160a01b03166113d55760405162461bcd60e51b81526004016108be906130c4565b6000828152601160205260409020548061141f5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016108be565b803410156114625760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108be565b600061146d84610f9a565b90506001600160a01b038116611485576114856132c2565b6001600160a01b0381163314156114d55760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016108be565b60405163095ea7b360e01b815233600482015260248101859052309063095ea7b390604401600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b50505050611537813386610d3a565b505050600090815260116020526040812055565b816115563382611ad5565b6115725760405162461bcd60e51b81526004016108be90613236565b610b9a83836000805b836115863382611ad5565b6115a25760405162461bcd60e51b81526004016108be90613236565b6115ac8585611b14565b60028260028111156115c0576115c06132d8565b14156115d6576115d183600161112d565b610f4a565b60018260028111156115ea576115ea6132d8565b1415610f4a57610f4a83866109be565b600c5461010090046001600160a01b031633146116295760405162461bcd60e51b81526004016108be9061306c565b610d3781611d15565b60006001600160e01b03198216639248994960e01b1480610889575061088982611d6f565b6001600160601b0381166127108111156116ae5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108be565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b81028217600e558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b60008061172b83610f9a565b9050836001600160a01b0316816001600160a01b0316148061177257506001600160a01b0380821660009081526003602090815260408083209388168352929052205460ff165b949350505050565b60016016556040805180820190915260088152674f70656e4e46547360c01b60208201526117a9906004611d94565b6117b38888611de5565b6117bc86611e3c565b600d949094556040805180820182526001600160a01b039485168082526001600160601b039485166020928301819052600160a01b908102909117600e5582518084019093529290941680825294909216919092018190520217601255505050565b806118293382611ad5565b6118455760405162461bcd60e51b81526004016108be90613236565b6001600160a01b03841661189b5760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016108be565b6001600160a01b0383166118f15760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016108be565b6118fa82610f9a565b6001600160a01b0316846001600160a01b03161461194b5760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016108be565b611956848484611e75565b600082815260026020526040902080546001600160a01b03191690556001600160a01b0384811690841614611a0d576001600160a01b038416600090815260016020819052604082208054919290916119b09084906132ee565b90915550506001600160a01b038316600090815260016020819052604082208054919290916119e0908490613305565b9091555050600082815260208190526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000612710611a6c6001600160601b0384168561331d565b611a76919061333c565b9392505050565b611a8884848461181e565b611a9484848484611e80565b6111f15760405162461bcd60e51b81526020600482015260126024820152712737ba1022a9219b9918a932b1b2b4bb32b960711b60448201526064016108be565b6000611ae1838361171f565b80611a765750826001600160a01b0316611afa83610967565b6001600160a01b0316149392505050565b610d3781611f2e565b80600160801b8110611b385760405162461bcd60e51b81526004016108be9061320f565b60008381526011602090815260409182902084905581518581529081018490527f2f8c61aa79deaa9c961d54f640a154df4960a56a5989d25df0148be783dc3f5b9101611712565b6001600160601b038116612710811115611bd75760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016108be565b6040805180820182526001600160a01b038581168083526001600160601b03868116602080860182815260008c8152600f835288902096519051909316600160a01b029290941691909117909355835188815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600160405180910390a150505050565b80600160801b8110611c895760405162461bcd60e51b81526004016108be9061320f565b600d8290556040518281527f9f7a6492db3843bc01c0adb23cd27be964155c1d45c566f2ee32f28faf4eb6059060200160405180910390a15050565b6013805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b610b9a838383611f53565b600c80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b031982166350130d5360e01b1480610889575061088982611fac565b601354610100900460ff1615611dbc5760405162461bcd60e51b81526004016108be9061335e565b6013805461ff0019166101001790558151611dde906014906020850190612a09565b5060155550565b60045460ff1615611e085760405162461bcd60e51b81526004016108be9061335e565b6004805460ff191660011790558151611e28906005906020850190612a09565b508051610b9a906006906020840190612a09565b600c5460ff1615611e5f5760405162461bcd60e51b81526004016108be9061335e565b600c805460ff19166001179055610d3781611d15565b610b9a838383611fd1565b60006001600160a01b0384163b1580610e405750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611ec89033908a908990899060040161338b565b602060405180830381600087803b158015611ee257600080fd5b505af1158015611ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1a91906133c8565b6001600160e01b0319161495945050505050565b6000818152600f602090815260408083208390556011909152812055610d378161200a565b600e54611f7c9082906001600160a01b03811690600160a01b90046001600160601b0316611b80565b611fa181600d5485611f9c600c546001600160a01b036101009091041690565b6120d5565b610b9a8383836124aa565b60006001600160e01b031982166398396bd360e01b1480610889575061088982612503565b600081815260116020526040902054611ff090829084611f9c83610f9a565b600081815260116020526040812055610b9a838383612528565b600061201582610f9a565b9050612021818361253c565b6000828152600b6020526040812054600854909190612042906001906132ee565b9050600060088281548110612059576120596131f9565b6000918252602080832090910154808352600b909152604080832086905587835282209190915560088054919250829185908110612099576120996131f9565b60009182526020909120015560088054806120b6576120b66133e5565b60019003818190600052602060002001600090559055610f4a8561264a565b60105460ff16156121175760405162461bcd60e51b815260206004820152600c60248201526b4e6f2072652d656e7472792160a01b60448201526064016108be565b6010805460ff19166001179055348311156121675760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016108be565b346121715761249a565b6001600160a01b0382166121b75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210313abcb2b960991b60448201526064016108be565b6001600160a01b0381166121fe5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b63632b960911b60448201526064016108be565b60008080803487158015906122255750856001600160a01b0316876001600160a01b031614155b156123b257601254612248908990600160a01b90046001600160601b0316611a54565b92506122548989610b9f565b90955093506001600160a01b03851661226c57600093505b876122778486613305565b11156122b95760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420726f79616c7469657360781b60448201526064016108be565b6122c38385613305565b6122cd90896132ee565b9150811561231a576122df82826132ee565b6040519091506001600160a01b0387169083156108fc029084906000818181858888f19350505050158015612318573d6000803e3d6000fd5b505b83156123655761232a84826132ee565b6040519091506001600160a01b0386169085156108fc029086906000818181858888f19350505050158015612363573d6000803e3d6000fd5b505b82156123b25761237583826132ee565b6012546040519192506001600160a01b03169084156108fc029085906000818181858888f193505050501580156123b0573d6000803e3d6000fd5b505b3481846123bf8786613305565b6123c99190613305565b6123d39190613305565b146123e0576123e06132c2565b801561241e576040516001600160a01b0388169082156108fc029083906000818181858888f1935050505015801561241c573d6000803e3d6000fd5b505b604080518a8152602081018a90526001600160a01b038881168284015260608201859052878116608083015260a0820187905260c08201869052891660e0820152610100810183905290517f3fd8cbcd9af698ecb35353cccbfbb5f149fbcfcfe43f043bbfc95c3feb2307b8918190036101200190a150505050505b50506010805460ff191690555050565b6124b4838261266a565b600880546000838152600b60205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301819055610b9a8383836126a8565b60006001600160e01b03198216637e2463f960e01b14806108895750610889826126d3565b612532838261253c565b610b9a828261266a565b6000818152600a6020526040812054906001612557856110b3565b61256191906132ee565b90508082146125f8576001600160a01b0384166000908152600960205260408120805483908110612594576125946131f9565b906000526020600020015490508060096000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106125d8576125d86131f9565b6000918252602080832090910192909255918252600a9052604090208290555b6000838152600a602090815260408083208390556001600160a01b03871683526009909152902080548061262e5761262e6133e5565b6001900381819060005260206000200160009055905550505050565b600081815260076020526040812061266191612a8d565b610d37816126f8565b6001600160a01b0390911660009081526009602081815260408084208054868652600a84529185208290559282526001810183559183529091200155565b600081815260076020908152604090912083516126c792850190612a09565b50610b9a8383836127e9565b600063152a902d60e11b6001600160e01b031983161480610889575061088982612974565b600061270382610f9a565b90506001600160a01b03811661272b5760405162461bcd60e51b81526004016108be906130c4565b6001600160a01b038116600090815260016020526040902054612750576127506132c2565b6001600160a01b0381166000908152600160208190526040822080549192909161277b9084906132ee565b9091555050600082815260026020908152604080832080546001600160a01b0319908116909155918390528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166128365760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016108be565b6000818152602081905260409020546001600160a01b0316156128925760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016108be565b6001600160a01b038316600090815260016020819052604082208054919290916128bd908490613305565b909155505060008181526020819052604080822080546001600160a01b0319166001600160a01b03871690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129336000848360405180602001604052806000815250611e80565b610b9a5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016108be565b60006307f5828d60e41b6001600160e01b031983161480610889575061088982600063780e9d6360e01b6001600160e01b0319831614806108895750610889826000635b5e139f60e01b6001600160e01b03198316148061088957506108898260006380ac58cd60e01b6001600160e01b03198316148061088957506001600160e01b031982166301ffc9a760e01b14610889565b828054612a159061308f565b90600052602060002090601f016020900481019282612a375760008555612a7d565b82601f10612a5057805160ff1916838001178555612a7d565b82800160010185558215612a7d579182015b82811115612a7d578251825591602001919060010190612a62565b50612a89929150612ac3565b5090565b508054612a999061308f565b6000825580601f10612aa9575050565b601f016020900490600052602060002090810190610d3791905b5b80821115612a895760008155600101612ac4565b6001600160e01b031981168114610d3757600080fd5b600060208284031215612b0057600080fd5b8135611a7681612ad8565b6001600160a01b0381168114610d3757600080fd5b6001600160601b0381168114610d3757600080fd5b60008060408385031215612b4857600080fd5b8235612b5381612b0b565b91506020830135612b6381612b20565b809150509250929050565b6000815180845260005b81811015612b9457602081850181015186830182015201612b78565b81811115612ba6576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611a766020830184612b6e565b600060208284031215612be057600080fd5b5035919050565b60008060408385031215612bfa57600080fd5b8235612c0581612b0b565b946020939093013593505050565b60008060408385031215612c2657600080fd5b823591506020830135612b6381612b0b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612c7757612c77612c38565b604052919050565b600082601f830112612c9057600080fd5b813567ffffffffffffffff811115612caa57612caa612c38565b612cbd601f8201601f1916602001612c4e565b818152846020838601011115612cd257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612d0557600080fd5b843567ffffffffffffffff80821115612d1d57600080fd5b612d2988838901612c7f565b95506020870135915080821115612d3f57600080fd5b612d4b88838901612c7f565b945060408701359150612d5d82612b0b565b90925060608601359080821115612d7357600080fd5b50612d8087828801612c7f565b91505092959194509250565b600080600060608486031215612da157600080fd5b8335612dac81612b0b565b92506020840135612dbc81612b0b565b929592945050506040919091013590565b60008060408385031215612de057600080fd5b50508035926020909101359150565b600080600080600060a08688031215612e0757600080fd5b8535612e1281612b0b565b9450602086013567ffffffffffffffff811115612e2e57600080fd5b612e3a88828901612c7f565b945050604086013592506060860135612e5281612b0b565b91506080860135612e6281612b20565b809150509295509295909350565b600080600060608486031215612e8557600080fd5b833592506020840135612e9781612b0b565b91506040840135612ea781612b20565b809150509250925092565b600060208284031215612ec457600080fd5b8135611a7681612b0b565b8015158114610d3757600080fd5b60008060408385031215612ef057600080fd5b8235612efb81612b0b565b91506020830135612b6381612ecf565b60008060008060808587031215612f2157600080fd5b8435612f2c81612b0b565b93506020850135612f3c81612b0b565b925060408501359150606085013567ffffffffffffffff811115612f5f57600080fd5b612d8087828801612c7f565b60008060408385031215612f7e57600080fd5b8235612f8981612b0b565b9150602083013567ffffffffffffffff811115612fa557600080fd5b612fb185828601612c7f565b9150509250929050565b600060208284031215612fcd57600080fd5b813567ffffffffffffffff811115612fe457600080fd5b61177284828501612c7f565b6000806040838503121561300357600080fd5b823561300e81612b0b565b91506020830135612b6381612b0b565b6000806000806080858703121561303457600080fd5b8435935060208501359250604085013561304d81612b0b565b915060608501356003811061306157600080fd5b939692955090935050565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c908216806130a357607f821691505b602082108114156109b857634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f125b9d985b1a59081d1bdad95b88125160821b604082015260600190565b60008060008060008060c0878903121561310757600080fd5b8651955060208088015161311a81612b0b565b604089015190965061312b81612b20565b606089015190955061313c81612b0b565b608089015190945061314d81612b20565b60a089015190935067ffffffffffffffff8082111561316b57600080fd5b818a0191508a601f83011261317f57600080fd5b81518181111561319157613191612c38565b8060051b91506131a2848301612c4e565b818152918301840191848101908d8411156131bc57600080fd5b938501935b838510156131e657845192506131d683612ecf565b82825293850193908501906131c1565b8096505050505050509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b805160208083015191908110156109b85760001960209190910360031b1b16919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156132bb576132bb613291565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60008282101561330057613300613291565b500390565b6000821982111561331857613318613291565b500190565b600081600019048311821515161561333757613337613291565b500290565b60008261335957634e487b7160e01b600052601260045260246000fd5b500490565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133be90830184612b6e565b9695505050505050565b6000602082840312156133da57600080fd5b8151611a7681612ad8565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d1c52231a59327a6ec3974b837498d54486d6145a20417a53f003a5418e47d0c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      },
      "getDefaultRoyalty()": {
        "returns": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "getTokenRoyalty(uint256)": {
        "params": {
          "tokenID": ": token ID"
        },
        "returns": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setDefaultPrice(uint256)": {
        "params": {
          "price": ": default price in wei"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setTokenPrice(uint256,uint256)": {
        "params": {
          "price": ": token price in wei",
          "tokenID": ": token ID"
        }
      },
      "setTokenPrice(uint256,uint256,address,uint8)": {
        "params": {
          "price": ": token price in wei",
          "tokenID": ": token ID"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10_000",
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "setTokenRoyaltyReceiver(uint256,address)": {
        "params": {
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId to test"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "getDefaultRoyalty()": {
        "notice": "GET default royalty info"
      },
      "getTokenRoyalty(uint256)": {
        "notice": "GET token royalty info"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "setDefaultPrice(uint256)": {
        "notice": "SET default mint price"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty info"
      },
      "setTokenPrice(uint256,uint256)": {
        "notice": "SET token price"
      },
      "setTokenPrice(uint256,uint256,address,uint8)": {
        "notice": "SET token price"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty info"
      },
      "setTokenRoyaltyReceiver(uint256,address)": {
        "notice": "SET token royalty receiver"
      },
      "supportsInterface(bytes4)": {
        "notice": "test if this interface is supported"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      },
      "withdraw()": {
        "notice": "withdraw eth"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 448,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 452,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 456,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 462,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1371,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 1373,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1375,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1379,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1048,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1053,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1057,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1061,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 196,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 198,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_owner",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 309,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_defaultPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 312,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_defaultRoyalty",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Receiver)307_storage"
      },
      {
        "astId": 317,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenRoyalty",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Receiver)307_storage)"
      },
      {
        "astId": 1541,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_locked",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1581,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_tokenPrice",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1584,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_treasury",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Receiver)307_storage"
      },
      {
        "astId": 2533,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "_paused",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "initialized",
        "offset": 1,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 11,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "template",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "version",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2324,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 12013,
        "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
        "label": "open",
        "offset": 0,
        "slot": "23",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Receiver)307_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenERC2981.Receiver)",
        "numberOfBytes": "32",
        "value": "t_struct(Receiver)307_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Receiver)307_storage": {
        "encoding": "inplace",
        "label": "struct OpenERC2981.Receiver",
        "members": [
          {
            "astId": 304,
            "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 306,
            "contract": "contracts/next/OpenAutoMarket.sol:OpenAutoMarket",
            "label": "fee",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}