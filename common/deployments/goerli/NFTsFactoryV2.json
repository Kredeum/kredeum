{
  "address": "0xBda19424590E3DB9DF04091F7510F487eD19E037",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ImplementationNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "TemplateSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balancesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTsFactoryV2.NftData[]",
          "name": "nftData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "bool[]",
          "name": "options",
          "type": "bool[]"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "clone_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "implementationsToAdd",
          "type": "address[]"
        }
      ],
      "name": "implementationsAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "templateName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "templateSet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac0b0014238c19aa2abb5ac1c28197b5bfd16229e4bd442067467a0943edb3b1",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xBda19424590E3DB9DF04091F7510F487eD19E037",
    "transactionIndex": 94,
    "gasUsed": "1273456",
    "logsBloom": "0x
    "blockHash": "0x916bed5172f19116b37524fa084945850b9fbb90a27be6450b5501336ae3a8c1",
    "transactionHash": "0xac0b0014238c19aa2abb5ac1c28197b5bfd16229e4bd442067467a0943edb3b1",
    "logs": [
      {
        "transactionIndex": 94,
        "blockNumber": 7073520,
        "transactionHash": "0xac0b0014238c19aa2abb5ac1c28197b5bfd16229e4bd442067467a0943edb3b1",
        "address": "0xBda19424590E3DB9DF04091F7510F487eD19E037",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x916bed5172f19116b37524fa084945850b9fbb90a27be6450b5501336ae3a8c1"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 7073520,
        "transactionHash": "0xac0b0014238c19aa2abb5ac1c28197b5bfd16229e4bd442067467a0943edb3b1",
        "address": "0xBda19424590E3DB9DF04091F7510F487eD19E037",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x916bed5172f19116b37524fa084945850b9fbb90a27be6450b5501336ae3a8c1"
      }
    ],
    "blockNumber": 7073520,
    "cumulativeGasUsed": "3628070",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c"
  ],
  "numDeployments": 2,
  "solcInputHash": "3212a9d9e9788f4eafcf2e0d0ff26c41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ImplementationNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"TemplateSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTsFactoryV2.NftData[]\",\"name\":\"nftData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"options\",\"type\":\"bool[]\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"clone_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"implementationsToAdd\",\"type\":\"address[]\"}],\"name\":\"implementationsAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"templateSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"is CloneFactory\",\"kind\":\"dev\",\"methods\":{\"balancesOf(address)\":{\"params\":{\"addr\":\"address of account\"},\"returns\":{\"nftData\":\"Array of nftData balances\"}},\"clone(string,string,string,bool[])\":{\"params\":{\"name\":\"name of Clone collection\",\"symbol\":\"symbol of Clone collection\"},\"returns\":{\"clone_\":\"Address of Clone collection\"}},\"implementationsAdd(address[])\":{\"params\":{\"implementationsToAdd\":\": new implementations addresses\"}},\"implementationsCount()\":{\"returns\":{\"_0\":\"count : number of implementations\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"templateSet(string,address)\":{\"params\":{\"template\":\"Address of the template\",\"templateName\":\"Name of the template\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NFTsFactory smartcontract\",\"version\":1},\"userdoc\":{\"events\":{\"ImplementationNew(address,address,uint256)\":{\"notice\":\"New Implementation Event\"},\"TemplateSet(string,address)\":{\"notice\":\"Set Template Event\"}},\"kind\":\"user\",\"methods\":{\"balancesOf(address)\":{\"notice\":\"balancesOf address for each implementations\"},\"clone(string,string,string,bool[])\":{\"notice\":\"clone template\"},\"implementations(uint256)\":{\"notice\":\"Implementations addresses\"},\"implementationsAdd(address[])\":{\"notice\":\"Add Implementations, public onlyOwner\"},\"implementationsCount()\":{\"notice\":\"Implementations count\"},\"templateSet(string,address)\":{\"notice\":\"Set Template, overrides generic CloneFactory\"},\"templates(string)\":{\"notice\":\"Named Templates\"}},\"notice\":\"Templates are OPEN_NFTS contractsImplementations are ERC721 contracts (including OPEN_NFTS clones)Factory can clone OPEN_NFTs templates to implementationsFactory can also add ERC721 contracts to implementations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTsFactoryV2.sol\":\"NFTsFactoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/ICloneFactoryV2.sol\\\";\\n\\n/// @title Abstract Clone Factory V2\\n/// @notice Generic Clone Factory to clone Templates\\n/// @dev CloneFactory is ICloneFactory and Ownable\\nabstract contract CloneFactoryV2 is ICloneFactoryV2, Ownable {\\n    /// @notice Implementations addresses\\n    address[] public implementations;\\n\\n    /// @notice Named Templates\\n    mapping(string => address) public templates;\\n\\n    /// @notice Add Implementations, public onlyOwner\\n    /// @param  implementationsToAdd : new implementations addresses\\n    function implementationsAdd(address[] calldata implementationsToAdd) external override(ICloneFactoryV2) onlyOwner {\\n        for (uint256 i = 0; i < implementationsToAdd.length; i += 1) {\\n            _implementationNew(implementationsToAdd[i]);\\n        }\\n    }\\n\\n    /// @notice Implementations count\\n    /// @return count : number of implementations\\n    function implementationsCount() external view override(ICloneFactoryV2) returns (uint256) {\\n        return implementations.length;\\n    }\\n\\n    /// @notice Set Template by Name\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template)\\n        public\\n        virtual\\n        override(ICloneFactoryV2)\\n        onlyOwner\\n    {\\n        templates[templateName] = template;\\n\\n        /// @notice emit event ImplementationNew\\n        emit TemplateSet(templateName, template);\\n    }\\n\\n    /// @notice New Implementation\\n    /// @param  implementation : implementation address\\n    function _implementationNew(address implementation) internal virtual {\\n        implementations.push(implementation);\\n\\n        emit ImplementationNew(implementation, _msgSender(), implementations.length - 1);\\n    }\\n\\n    /// @notice Clone Template\\n    /// @param  templateName : template name\\n    /// @return clone_ : clone address\\n    function _clone(string memory templateName) internal returns (address clone_) {\\n        /// @notice clone template and get clone address\\n        clone_ = Clones.clone(_template(templateName));\\n\\n        /// @notice register clone as new implementation\\n        _implementationNew(clone_);\\n    }\\n\\n    /// @notice Get Template\\n    /// @param  templateName : template name\\n    /// @return  template : template address\\n    function _template(string memory templateName) internal view virtual returns (address template) {\\n        require(templates[templateName] != address(0), \\\"Bad Template\\\");\\n\\n        template = templates[templateName];\\n    }\\n}\\n\",\"keccak256\":\"0x8771991497e254c42f47e75be3f5ff4bb1a09ad70d17d9ab95aa47a9f86e07d2\",\"license\":\"MIT\"},\"contracts/NFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IOpenNFTsV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./CloneFactoryV2.sol\\\";\\nimport \\\"./interfaces/INFTsFactoryV2.sol\\\";\\nimport \\\"./interfaces/IOpenNFTs.sol\\\";\\nimport \\\"./interfaces/IERC173.sol\\\";\\n\\n/// @title NFTsFactory smartcontract\\n/// @dev is CloneFactory\\n/// @notice Templates are OPEN_NFTS contracts\\n/// @notice Implementations are ERC721 contracts (including OPEN_NFTS clones)\\n/// @notice Factory can clone OPEN_NFTs templates to implementations\\n/// @notice Factory can also add ERC721 contracts to implementations\\ncontract NFTsFactoryV2 is CloneFactoryV2, INFTsFactoryV2 {\\n    using ERC165Checker for address;\\n\\n    uint8 internal constant _IERC721 = 0;\\n    uint8 internal constant _IERC721_METADATA = 1;\\n    uint8 internal constant _IERC721_ENUMERABLE = 2;\\n    uint8 internal constant _IERC173 = 3;\\n    uint8 internal constant _IOPEN_NFTS = 4;\\n\\n    bytes4 internal constant _IERC721_SIG = bytes4(0x80ac58cd);\\n    bytes4 internal constant _IERC721_METADATA_SIG = bytes4(0x780e9d63);\\n    bytes4 internal constant _IERC721_ENUMERABLE_SIG = (0x780e9d63);\\n    bytes4 internal constant _IERC173_SIG = bytes4(0x7f5828d0);\\n    bytes4 internal constant _IOPEN_NFTS_SIG = type(IOpenNFTs).interfaceId;\\n\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /// @notice clone template\\n    /// @param name name of Clone collection\\n    /// @param symbol symbol of Clone collection\\n    /// @return clone_ Address of Clone collection\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external override(INFTsFactoryV2) returns (address clone_) {\\n        clone_ = _clone(templateName);\\n        IOpenNFTs(clone_).initialize(name, symbol, _msgSender(), options);\\n    }\\n\\n    /// @notice balancesOf address for each implementations\\n    /// @param addr  address of account\\n    /// @return nftData Array of nftData balances\\n    function balancesOf(address addr) external view override(INFTsFactoryV2) returns (NftData[] memory nftData) {\\n        nftData = new NftData[](implementations.length);\\n        for (uint256 i = 0; i < implementations.length; i += 1) {\\n            nftData[i] = _balanceOf(implementations[i], addr);\\n        }\\n    }\\n\\n    /// @notice Set Template, overrides generic CloneFactory\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) public override(CloneFactoryV2) onlyOwner {\\n        require(template.supportsInterface(_IOPEN_NFTS_SIG), \\\"Not valid OpenNFTs Template\\\");\\n\\n        super.templateSet(templateName, template);\\n    }\\n\\n    /// @notice New Implementation internal, overrides generic CloneFactory\\n    /// @param  implementation : implementation address\\n    function _implementationNew(address implementation) internal override(CloneFactoryV2) {\\n        require(implementation.supportsInterface(_IERC721_SIG), \\\"Not ERC721\\\");\\n\\n        super._implementationNew(implementation);\\n    }\\n\\n    /// @notice _balanceOf\\n    /// @param nft nft address of NFT collection\\n    /// @param owner address of account\\n    /// @return nftData nftData balances\\n    function _balanceOf(address nft, address owner) internal view returns (NftData memory nftData) {\\n        bytes4[] memory iface = new bytes4[](5);\\n        iface[_IERC721] = _IERC721_SIG;\\n        iface[_IERC721_METADATA] = _IERC721_METADATA_SIG;\\n        iface[_IERC721_ENUMERABLE] = _IERC721_ENUMERABLE_SIG;\\n        iface[_IERC173] = _IERC173_SIG;\\n\\n        bool[] memory supportInterface = nft.getSupportedInterfaces(iface);\\n\\n        if (supportInterface[_IERC721]) {\\n            nftData.nft = nft;\\n            nftData.balanceOf = IERC721(nft).balanceOf(owner);\\n\\n            if (supportInterface[_IERC721_METADATA]) {\\n                nftData.name = IERC721Metadata(nft).name();\\n                nftData.symbol = IERC721Metadata(nft).symbol();\\n            }\\n\\n            if (supportInterface[_IERC721_ENUMERABLE]) {\\n                nftData.totalSupply = IERC721Enumerable(nft).totalSupply();\\n            }\\n\\n            if (supportInterface[_IERC173]) {\\n                nftData.owner = IERC173(nft).owner();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x850d718b90c85fca0ba5212e0dee6f64d3fe01cf4454a5f6e6c2161c3cacd760\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    /// @notice New Implementation Event\\n    /// @param implementation Address of the implementation\\n    /// @param creator Address of the creator\\n    /// @return index Index inside implementations array (starts at 0)\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 index);\\n\\n    /// @notice Set Template Event\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    event TemplateSet(string indexed templateName, address indexed template);\\n\\n    /// @notice Set Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    /// @notice Add Implementation\\n    /// @param implementationToAdd Addresses of implementations to add\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n\\n    /// @notice Get Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templates(string calldata templateName) external view returns (address template);\\n\\n    /// @notice Count Implementations\\n    /// @return count Number of implementations\\n    function implementationsCount() external view returns (uint256 count);\\n\\n    /// @notice Get Implementation from Implementations array\\n    /// @param index Index of implementation\\n    /// @return implementation Address of implementation\\n    function implementations(uint256 index) external view returns (address implementation);\\n}\\n\",\"keccak256\":\"0x35d10451fed638bd375b4b1c5ce204672a60bc88c02e2e05bddd1a390fd24dba\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set newOwner to address(0) to renounce any ownership.\\n    /// @param newOwner The address of the new owner of the contract\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Get the address of the owner\\n    /// @return currentOwner The address of the owner.\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0xb2e1bed886d4c0e34ca151fe70f7968449a0777d54ea1aca2e5fca70121f550f\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n}\\n\",\"keccak256\":\"0x47eb8674dd1aca360ae359cfe5352c5d668743c8facb8f014fa86163e8f4b222\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function owner() external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x0ca6b580e50044c8103a61a0d394c149550f03517c9600dce97ab8c73748790c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620016673803806200166783398101604081905261003191610099565b61003a33610049565b61004381610049565b506100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b61158e80620000d96000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b14610123578063b22beeda14610134578063ba6da05014610168578063c17bae4f1461017b578063f2fde38b1461018c57600080fd5b80631b6740dd146100a35780636392a51f146100d3578063715018a6146100f357806382a1db39146100fd578063845affc814610110575b600080fd5b6100b66100b1366004610f84565b61019f565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e13660046110b4565b610219565b6040516100ca919061112d565b6100fb6102e6565b005b6100fb61010b3660046111ee565b610325565b6100b661011e366004611263565b6103a0565b6000546001600160a01b03166100b6565b6100b661014236600461127c565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6100fb6101763660046112b9565b6103ca565b6001546040519081526020016100ca565b6100fb61019a3660046110b4565b610464565b60006101aa836104ff565b604051630a9c216960e31b81529091506001600160a01b038216906354e10b48906101df90889088903390889060040161133c565b600060405180830381600087803b1580156101f957600080fd5b505af115801561020d573d6000803e3d6000fd5b50505050949350505050565b60015460609067ffffffffffffffff81111561023757610237610eb1565b60405190808252806020026020018201604052801561027057816020015b61025d610e69565b8152602001906001900390816102555790505b50905060005b6001548110156102e0576102b160018281548110610296576102966113b7565b6000918252602090912001546001600160a01b031684610522565b8282815181106102c3576102c36113b7565b60209081029190910101526102d96001826113e3565b9050610276565b50919050565b6000546001600160a01b031633146103195760405162461bcd60e51b8152600401610310906113fb565b60405180910390fd5b6103236000610942565b565b6000546001600160a01b0316331461034f5760405162461bcd60e51b8152600401610310906113fb565b60005b8181101561039b5761038983838381811061036f5761036f6113b7565b905060200201602081019061038491906110b4565b610992565b6103946001826113e3565b9050610352565b505050565b600181815481106103b057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146103f45760405162461bcd60e51b8152600401610310906113fb565b61040d6001600160a01b03821662f7235960e21b6109ee565b6104595760405162461bcd60e51b815260206004820152601b60248201527f4e6f742076616c6964204f70656e4e4654732054656d706c61746500000000006044820152606401610310565b61039b838383610a13565b6000546001600160a01b0316331461048e5760405162461bcd60e51b8152600401610310906113fb565b6001600160a01b0381166104f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610310565b6104fc81610942565b50565b600061051261050d83610ac1565b610b62565b905061051d81610992565b919050565b61052a610e69565b60408051600580825260c082019092526000916020820160a080368337505081519192506380ac58cd60e01b91839150600090610569576105696113b7565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b90829060019081106105a0576105a06113b7565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b90829060029081106105d7576105d76113b7565b6001600160e01b03199092166020928302919091019091015280516307f5828d60e41b908290600390811061060e5761060e6113b7565b6001600160e01b031990921660209283029190910190910152600061063c6001600160a01b03861683610bfa565b905080600060ff1681518110610654576106546113b7565b60200260200101511561093a576001600160a01b038581168085526040516370a0823160e01b81529186166004830152906370a082319060240160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190611430565b60208401528051819060019081106106f8576106f86113b7565b6020026020010151156107fd57846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561073e57600080fd5b505afa158015610752573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077a9190810190611449565b8360600181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156107bb57600080fd5b505afa1580156107cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f79190810190611449565b60808401525b80600260ff1681518110610813576108136113b7565b60200260200101511561089757846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085957600080fd5b505afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108919190611430565b60a08401525b80600360ff16815181106108ad576108ad6113b7565b60200260200101511561093a57846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906114c0565b6001600160a01b031660408401525b505092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109ac6001600160a01b0382166380ac58cd60e01b6109ee565b6109e55760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524337323160b01b6044820152606401610310565b6104fc81610cbd565b60006109f983610d4d565b8015610a0a5750610a0a8383610d80565b90505b92915050565b6000546001600160a01b03163314610a3d5760405162461bcd60e51b8152600401610310906113fb565b8060028484604051610a509291906114dd565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905590821690610a8c90859085906114dd565b604051908190038120907f2e5d1f3ab97987d0ad3ab02a382994c388a94ba99ecd499e395c29e20775ab6690600090a3505050565b6000806001600160a01b0316600283604051610add91906114ed565b908152604051908190036020019020546001600160a01b03161415610b335760405162461bcd60e51b815260206004820152600c60248201526b4261642054656d706c61746560a01b6044820152606401610310565b600282604051610b4391906114ed565b908152604051908190036020019020546001600160a01b031692915050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661051d5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610310565b60606000825167ffffffffffffffff811115610c1857610c18610eb1565b604051908082528060200260200182016040528015610c41578160200160208202803683370190505b509050610c4d84610d4d565b15610a0a5760005b8351811015610cb557610c8185858381518110610c7457610c746113b7565b6020026020010151610d80565b828281518110610c9357610c936113b7565b9115156020928302919091019091015280610cad81611509565b915050610c55565b509392505050565b60018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038416908117909155815433927fe1fd48e37080a338bebd722213e17521b8a454ab4f0ef1b1a487025d5191e7a191610d399190611524565b60405190815260200160405180910390a350565b6000610d60826301ffc9a760e01b610d80565b8015610a0d5750610d79826001600160e01b0319610d80565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090610de79086906114ed565b6000604051808303818686fa925050503d8060008114610e23576040519150601f19603f3d011682016040523d82523d6000602084013e610e28565b606091505b5091509150602081511015610e435760009350505050610a0d565b818015610e5f575080806020019051810190610e5f919061153b565b9695505050505050565b6040518060c0016040528060006001600160a01b031681526020016000815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ef057610ef0610eb1565b604052919050565b600067ffffffffffffffff821115610f1257610f12610eb1565b50601f01601f191660200190565b600082601f830112610f3157600080fd5b8135610f44610f3f82610ef8565b610ec7565b818152846020838601011115610f5957600080fd5b816020850160208301376000918101602001919091529392505050565b80151581146104fc57600080fd5b60008060008060808587031215610f9a57600080fd5b843567ffffffffffffffff80821115610fb257600080fd5b610fbe88838901610f20565b9550602091508187013581811115610fd557600080fd5b610fe189828a01610f20565b955050604087013581811115610ff657600080fd5b61100289828a01610f20565b94505060608701358181111561101757600080fd5b8701601f8101891361102857600080fd5b80358281111561103a5761103a610eb1565b8060051b925061104b848401610ec7565b818152928201840192848101908b85111561106557600080fd5b928501925b8484101561108f578335925061107f83610f76565b828252928501929085019061106a565b989b979a50959850505050505050565b6001600160a01b03811681146104fc57600080fd5b6000602082840312156110c657600080fd5b8135610a0a8161109f565b60005b838110156110ec5781810151838201526020016110d4565b838111156110fb576000848401525b50505050565b600081518084526111198160208601602086016110d1565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156111e057888303603f19018552815180516001600160a01b039081168552888201518986015287820151168785015260608082015160c082870181905291906111a383880182611101565b92505050608080830151868303828801526111be8382611101565b60a0948501519790940196909652505094870194925090860190600101611154565b509098975050505050505050565b6000806020838503121561120157600080fd5b823567ffffffffffffffff8082111561121957600080fd5b818501915085601f83011261122d57600080fd5b81358181111561123c57600080fd5b8660208260051b850101111561125157600080fd5b60209290920196919550909350505050565b60006020828403121561127557600080fd5b5035919050565b60006020828403121561128e57600080fd5b813567ffffffffffffffff8111156112a557600080fd5b6112b184828501610f20565b949350505050565b6000806000604084860312156112ce57600080fd5b833567ffffffffffffffff808211156112e657600080fd5b818601915086601f8301126112fa57600080fd5b81358181111561130957600080fd5b87602082850101111561131b57600080fd5b602092830195509350508401356113318161109f565b809150509250925092565b60808152600061134f6080830187611101565b6020838203818501526113628288611101565b6001600160a01b03871660408601528481036060860152855180825282870193509082019060005b818110156113a857845115158352938301939183019160010161138a565b50909998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156113f6576113f66113cd565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561144257600080fd5b5051919050565b60006020828403121561145b57600080fd5b815167ffffffffffffffff81111561147257600080fd5b8201601f8101841361148357600080fd5b8051611491610f3f82610ef8565b8181528560208385010111156114a657600080fd5b6114b78260208301602086016110d1565b95945050505050565b6000602082840312156114d257600080fd5b8151610a0a8161109f565b8183823760009101908152919050565b600082516114ff8184602087016110d1565b9190910192915050565b600060001982141561151d5761151d6113cd565b5060010190565b600082821015611536576115366113cd565b500390565b60006020828403121561154d57600080fd5b8151610a0a81610f7656fea26469706673582212208695522e52deb53242014b8eeb13c7e3f14bc04da53be99d5128f3519cc8d31d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b14610123578063b22beeda14610134578063ba6da05014610168578063c17bae4f1461017b578063f2fde38b1461018c57600080fd5b80631b6740dd146100a35780636392a51f146100d3578063715018a6146100f357806382a1db39146100fd578063845affc814610110575b600080fd5b6100b66100b1366004610f84565b61019f565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e13660046110b4565b610219565b6040516100ca919061112d565b6100fb6102e6565b005b6100fb61010b3660046111ee565b610325565b6100b661011e366004611263565b6103a0565b6000546001600160a01b03166100b6565b6100b661014236600461127c565b80516020818301810180516002825292820191909301209152546001600160a01b031681565b6100fb6101763660046112b9565b6103ca565b6001546040519081526020016100ca565b6100fb61019a3660046110b4565b610464565b60006101aa836104ff565b604051630a9c216960e31b81529091506001600160a01b038216906354e10b48906101df90889088903390889060040161133c565b600060405180830381600087803b1580156101f957600080fd5b505af115801561020d573d6000803e3d6000fd5b50505050949350505050565b60015460609067ffffffffffffffff81111561023757610237610eb1565b60405190808252806020026020018201604052801561027057816020015b61025d610e69565b8152602001906001900390816102555790505b50905060005b6001548110156102e0576102b160018281548110610296576102966113b7565b6000918252602090912001546001600160a01b031684610522565b8282815181106102c3576102c36113b7565b60209081029190910101526102d96001826113e3565b9050610276565b50919050565b6000546001600160a01b031633146103195760405162461bcd60e51b8152600401610310906113fb565b60405180910390fd5b6103236000610942565b565b6000546001600160a01b0316331461034f5760405162461bcd60e51b8152600401610310906113fb565b60005b8181101561039b5761038983838381811061036f5761036f6113b7565b905060200201602081019061038491906110b4565b610992565b6103946001826113e3565b9050610352565b505050565b600181815481106103b057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146103f45760405162461bcd60e51b8152600401610310906113fb565b61040d6001600160a01b03821662f7235960e21b6109ee565b6104595760405162461bcd60e51b815260206004820152601b60248201527f4e6f742076616c6964204f70656e4e4654732054656d706c61746500000000006044820152606401610310565b61039b838383610a13565b6000546001600160a01b0316331461048e5760405162461bcd60e51b8152600401610310906113fb565b6001600160a01b0381166104f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610310565b6104fc81610942565b50565b600061051261050d83610ac1565b610b62565b905061051d81610992565b919050565b61052a610e69565b60408051600580825260c082019092526000916020820160a080368337505081519192506380ac58cd60e01b91839150600090610569576105696113b7565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b90829060019081106105a0576105a06113b7565b6001600160e01b031990921660209283029190910190910152805163780e9d6360e01b90829060029081106105d7576105d76113b7565b6001600160e01b03199092166020928302919091019091015280516307f5828d60e41b908290600390811061060e5761060e6113b7565b6001600160e01b031990921660209283029190910190910152600061063c6001600160a01b03861683610bfa565b905080600060ff1681518110610654576106546113b7565b60200260200101511561093a576001600160a01b038581168085526040516370a0823160e01b81529186166004830152906370a082319060240160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190611430565b60208401528051819060019081106106f8576106f86113b7565b6020026020010151156107fd57846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561073e57600080fd5b505afa158015610752573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261077a9190810190611449565b8360600181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156107bb57600080fd5b505afa1580156107cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f79190810190611449565b60808401525b80600260ff1681518110610813576108136113b7565b60200260200101511561089757846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085957600080fd5b505afa15801561086d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108919190611430565b60a08401525b80600360ff16815181106108ad576108ad6113b7565b60200260200101511561093a57846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906114c0565b6001600160a01b031660408401525b505092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109ac6001600160a01b0382166380ac58cd60e01b6109ee565b6109e55760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524337323160b01b6044820152606401610310565b6104fc81610cbd565b60006109f983610d4d565b8015610a0a5750610a0a8383610d80565b90505b92915050565b6000546001600160a01b03163314610a3d5760405162461bcd60e51b8152600401610310906113fb565b8060028484604051610a509291906114dd565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905590821690610a8c90859085906114dd565b604051908190038120907f2e5d1f3ab97987d0ad3ab02a382994c388a94ba99ecd499e395c29e20775ab6690600090a3505050565b6000806001600160a01b0316600283604051610add91906114ed565b908152604051908190036020019020546001600160a01b03161415610b335760405162461bcd60e51b815260206004820152600c60248201526b4261642054656d706c61746560a01b6044820152606401610310565b600282604051610b4391906114ed565b908152604051908190036020019020546001600160a01b031692915050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661051d5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610310565b60606000825167ffffffffffffffff811115610c1857610c18610eb1565b604051908082528060200260200182016040528015610c41578160200160208202803683370190505b509050610c4d84610d4d565b15610a0a5760005b8351811015610cb557610c8185858381518110610c7457610c746113b7565b6020026020010151610d80565b828281518110610c9357610c936113b7565b9115156020928302919091019091015280610cad81611509565b915050610c55565b509392505050565b60018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038416908117909155815433927fe1fd48e37080a338bebd722213e17521b8a454ab4f0ef1b1a487025d5191e7a191610d399190611524565b60405190815260200160405180910390a350565b6000610d60826301ffc9a760e01b610d80565b8015610a0d5750610d79826001600160e01b0319610d80565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090610de79086906114ed565b6000604051808303818686fa925050503d8060008114610e23576040519150601f19603f3d011682016040523d82523d6000602084013e610e28565b606091505b5091509150602081511015610e435760009350505050610a0d565b818015610e5f575080806020019051810190610e5f919061153b565b9695505050505050565b6040518060c0016040528060006001600160a01b031681526020016000815260200160006001600160a01b031681526020016060815260200160608152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ef057610ef0610eb1565b604052919050565b600067ffffffffffffffff821115610f1257610f12610eb1565b50601f01601f191660200190565b600082601f830112610f3157600080fd5b8135610f44610f3f82610ef8565b610ec7565b818152846020838601011115610f5957600080fd5b816020850160208301376000918101602001919091529392505050565b80151581146104fc57600080fd5b60008060008060808587031215610f9a57600080fd5b843567ffffffffffffffff80821115610fb257600080fd5b610fbe88838901610f20565b9550602091508187013581811115610fd557600080fd5b610fe189828a01610f20565b955050604087013581811115610ff657600080fd5b61100289828a01610f20565b94505060608701358181111561101757600080fd5b8701601f8101891361102857600080fd5b80358281111561103a5761103a610eb1565b8060051b925061104b848401610ec7565b818152928201840192848101908b85111561106557600080fd5b928501925b8484101561108f578335925061107f83610f76565b828252928501929085019061106a565b989b979a50959850505050505050565b6001600160a01b03811681146104fc57600080fd5b6000602082840312156110c657600080fd5b8135610a0a8161109f565b60005b838110156110ec5781810151838201526020016110d4565b838111156110fb576000848401525b50505050565b600081518084526111198160208601602086016110d1565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156111e057888303603f19018552815180516001600160a01b039081168552888201518986015287820151168785015260608082015160c082870181905291906111a383880182611101565b92505050608080830151868303828801526111be8382611101565b60a0948501519790940196909652505094870194925090860190600101611154565b509098975050505050505050565b6000806020838503121561120157600080fd5b823567ffffffffffffffff8082111561121957600080fd5b818501915085601f83011261122d57600080fd5b81358181111561123c57600080fd5b8660208260051b850101111561125157600080fd5b60209290920196919550909350505050565b60006020828403121561127557600080fd5b5035919050565b60006020828403121561128e57600080fd5b813567ffffffffffffffff8111156112a557600080fd5b6112b184828501610f20565b949350505050565b6000806000604084860312156112ce57600080fd5b833567ffffffffffffffff808211156112e657600080fd5b818601915086601f8301126112fa57600080fd5b81358181111561130957600080fd5b87602082850101111561131b57600080fd5b602092830195509350508401356113318161109f565b809150509250925092565b60808152600061134f6080830187611101565b6020838203818501526113628288611101565b6001600160a01b03871660408601528481036060860152855180825282870193509082019060005b818110156113a857845115158352938301939183019160010161138a565b50909998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156113f6576113f66113cd565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561144257600080fd5b5051919050565b60006020828403121561145b57600080fd5b815167ffffffffffffffff81111561147257600080fd5b8201601f8101841361148357600080fd5b8051611491610f3f82610ef8565b8181528560208385010111156114a657600080fd5b6114b78260208301602086016110d1565b95945050505050565b6000602082840312156114d257600080fd5b8151610a0a8161109f565b8183823760009101908152919050565b600082516114ff8184602087016110d1565b9190910192915050565b600060001982141561151d5761151d6113cd565b5060010190565b600082821015611536576115366113cd565b500390565b60006020828403121561154d57600080fd5b8151610a0a81610f7656fea26469706673582212208695522e52deb53242014b8eeb13c7e3f14bc04da53be99d5128f3519cc8d31d64736f6c63430008090033",
  "devdoc": {
    "details": "is CloneFactory",
    "kind": "dev",
    "methods": {
      "balancesOf(address)": {
        "params": {
          "addr": "address of account"
        },
        "returns": {
          "nftData": "Array of nftData balances"
        }
      },
      "clone(string,string,string,bool[])": {
        "params": {
          "name": "name of Clone collection",
          "symbol": "symbol of Clone collection"
        },
        "returns": {
          "clone_": "Address of Clone collection"
        }
      },
      "implementationsAdd(address[])": {
        "params": {
          "implementationsToAdd": ": new implementations addresses"
        }
      },
      "implementationsCount()": {
        "returns": {
          "_0": "count : number of implementations"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "templateSet(string,address)": {
        "params": {
          "template": "Address of the template",
          "templateName": "Name of the template"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NFTsFactory smartcontract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ImplementationNew(address,address,uint256)": {
        "notice": "New Implementation Event"
      },
      "TemplateSet(string,address)": {
        "notice": "Set Template Event"
      }
    },
    "kind": "user",
    "methods": {
      "balancesOf(address)": {
        "notice": "balancesOf address for each implementations"
      },
      "clone(string,string,string,bool[])": {
        "notice": "clone template"
      },
      "implementations(uint256)": {
        "notice": "Implementations addresses"
      },
      "implementationsAdd(address[])": {
        "notice": "Add Implementations, public onlyOwner"
      },
      "implementationsCount()": {
        "notice": "Implementations count"
      },
      "templateSet(string,address)": {
        "notice": "Set Template, overrides generic CloneFactory"
      },
      "templates(string)": {
        "notice": "Named Templates"
      }
    },
    "notice": "Templates are OPEN_NFTS contractsImplementations are ERC721 contracts (including OPEN_NFTS clones)Factory can clone OPEN_NFTs templates to implementationsFactory can also add ERC721 contracts to implementations",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2480,
        "contract": "contracts/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6711,
        "contract": "contracts/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "implementations",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6716,
        "contract": "contracts/NFTsFactoryV2.sol:NFTsFactoryV2",
        "label": "templates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}