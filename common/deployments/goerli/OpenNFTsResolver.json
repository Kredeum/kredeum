{
  "address": "0xAeDBbFd9A6D366f77640d4AE9715e639e1Cd091a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        }
      ],
      "name": "checkErcInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "ercInterfacesChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartcontract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "erc",
          "type": "bool"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecks",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countAddresses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "getCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "erc721Metadata",
          "type": "bool"
        }
      ],
      "name": "getNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            }
          ],
          "internalType": "struct IERC721Infos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIDs",
          "type": "uint256[]"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            }
          ],
          "internalType": "struct IERC721Infos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getNftsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            }
          ],
          "internalType": "struct IERC721Infos.NftInfos[]",
          "name": "nftsInfos",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos",
          "name": "collectionInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos",
          "name": "openNTFscollectionInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getOpenNFTsCollectionsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "supported",
              "type": "bool[]"
            }
          ],
          "internalType": "struct IERC721Infos.CollectionInfos[]",
          "name": "collectionsInfos",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "template",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]",
          "name": "openNFTsCollectionsInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getOpenNFTsNftInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address"
            }
          ],
          "internalType": "struct IERC721Infos.NftInfos",
          "name": "nftInfos",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "fraction",
              "type": "uint96"
            }
          ],
          "internalType": "struct IOpenNFTsInfos.OpenNFTsNftInfos",
          "name": "openNTFsNftInfos",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "isCollection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registerer_",
          "type": "address"
        }
      ],
      "name": "setRegisterer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9b3ffa29291e31f7c385032313fc7e2b41ce2b9fdff63973b7b033433244085",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xAeDBbFd9A6D366f77640d4AE9715e639e1Cd091a",
    "transactionIndex": 0,
    "gasUsed": "2867087",
    "logsBloom": "0x
    "blockHash": "0xc10c19d52fa7865e4878d8953b9fb51595588a59df6fa3af2e7e5588d9a84311",
    "transactionHash": "0xc9b3ffa29291e31f7c385032313fc7e2b41ce2b9fdff63973b7b033433244085",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7493335,
        "transactionHash": "0xc9b3ffa29291e31f7c385032313fc7e2b41ce2b9fdff63973b7b033433244085",
        "address": "0xAeDBbFd9A6D366f77640d4AE9715e639e1Cd091a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc10c19d52fa7865e4878d8953b9fb51595588a59df6fa3af2e7e5588d9a84311"
      }
    ],
    "blockNumber": 7493335,
    "cumulativeGasUsed": "2867087",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "0x6c79aC3f7090AE502B1509b4991cfcF8269b9ae3"
  ],
  "numDeployments": 8,
  "solcInputHash": "e1fc463563f4bb2ecb30754176c23462",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"}],\"name\":\"checkErcInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"ercInterfacesChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartcontract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"erc\",\"type\":\"bool\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecks\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"erc721Metadata\",\"type\":\"bool\"}],\"name\":\"getNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Infos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Infos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getNftsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Infos.NftInfos[]\",\"name\":\"nftsInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos\",\"name\":\"collectionInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos\",\"name\":\"openNTFscollectionInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOpenNFTsCollectionsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"}],\"internalType\":\"struct IERC721Infos.CollectionInfos[]\",\"name\":\"collectionsInfos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"template\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsCollectionInfos[]\",\"name\":\"openNFTsCollectionsInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getOpenNFTsNftInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"internalType\":\"struct IERC721Infos.NftInfos\",\"name\":\"nftInfos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fraction\",\"type\":\"uint96\"}],\"internalType\":\"struct IOpenNFTsInfos.OpenNFTsNftInfos\",\"name\":\"openNTFsNftInfos\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"isCollection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registerer_\",\"type\":\"address\"}],\"name\":\"setRegisterer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/next/OpenNFTsResolver.sol\":\"OpenNFTsResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x81871e2ef1c2b73b0de3701981d67e65b9b3f0c9c0f9b203b6efdf5cc0d46c3b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    /// _ercInterfaceIds : ERC interfacesIds\\n    /// 0xffffffff :  O Invalid\\n    /// 0x01ffc9a7 :  1 ERC165\\n    /// 0x80ac58cd :  2 ERC721\\n    /// 0x5b5e139f :  3 ERC721Metadata\\n    /// 0x780e9d63 :  4 ERC721Enumerable\\n    /// 0x150b7a02 :  5 ERC721TokenReceiver\\n    /// 0xd9b67a26 :  6 ERC1155\\n    /// 0x0e89341c :  7 ERC1155MetadataURI\\n    /// 0x4e2312e0 :  8 ERC1155TokenReceiver\\n    /// 0x7f5828d0 :  9 ERC173\\n    /// 0x2a55205a : 10 ERC2981\\n    bytes4[] private _ercInterfaceIds = [\\n        bytes4(0xffffffff),\\n        bytes4(0x01ffc9a7),\\n        bytes4(0x80ac58cd),\\n        bytes4(0x5b5e139f),\\n        bytes4(0x780e9d63),\\n        bytes4(0x150b7a02),\\n        bytes4(0xd9b67a26),\\n        bytes4(0x0e89341c),\\n        bytes4(0x4e2312e0),\\n        bytes4(0x7f5828d0),\\n        bytes4(0x2a55205a)\\n    ];\\n\\n    function isCollection(address collection) public view override(IOpenChecker) returns (bool) {\\n        bool[] memory checks = checkErcInterfaces(collection);\\n\\n        return !checks[0] && checks[1] && (checks[2] || checks[6]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function checkErcInterfaces(address smartcontract)\\n        public\\n        view\\n        override(IOpenChecker)\\n        returns (bool[] memory ercInterfacesChecks)\\n    {\\n        ercInterfacesChecks = checkSupportedInterfaces(smartcontract, true, new bytes4[](0));\\n    }\\n\\n    function checkSupportedInterfaces(\\n        address smartcontract,\\n        bool erc,\\n        bytes4[] memory interfaceIds\\n    ) public view override(IOpenChecker) returns (bool[] memory interfaceIdsChecks) {\\n        uint256 i;\\n        uint256 len = (erc ? _ercInterfaceIds.length : 0) + interfaceIds.length;\\n\\n        interfaceIdsChecks = new bool[](len);\\n\\n        if (erc) {\\n            for (uint256 j = 0; j < _ercInterfaceIds.length; j++) {\\n                interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(_ercInterfaceIds[j]);\\n            }\\n        }\\n        for (uint256 k = 0; k < interfaceIds.length; k++) {\\n            interfaceIdsChecks[i++] = IERC165(smartcontract).supportsInterface(interfaceIds[k]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1ab7728042567e59df1e79aafcff29a9f0fbf31ad00503a7623fe5e5f718125b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenChecker\\n//        |\\n//  OpenGetter \\u2014\\u2014 IOpenGetter\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenGetter is IOpenGetter, OpenChecker {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenChecker) returns (bool) {\\n        return interfaceId == type(IOpenGetter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionInfos(address collection)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (\\n            // override(IOpenGetter)\\n            CollectionInfos memory collectionInfos\\n        )\\n    {\\n        collectionInfos = _getCollectionInfos(collection, msg.sender, new bytes4[](0));\\n    }\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs)\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (NftInfos[] memory nftsInfos)\\n    {\\n        bool supported = IERC165(collection).supportsInterface(0x5b5e139f); // check ERC721Metadata\\n\\n        nftsInfos = new NftInfos[](tokenIDs.length);\\n        for (uint256 i; i < tokenIDs.length; i++) {\\n            nftsInfos[i] = getNftInfos(collection, tokenIDs[i], supported);\\n        }\\n    }\\n\\n    function getNftsInfos(\\n        address collection,\\n        address account,\\n        uint256 limit,\\n        uint256 offset\\n    )\\n        public\\n        view\\n        override(IOpenGetter)\\n        returns (\\n            NftInfos[] memory nftsInfos,\\n            uint256 count,\\n            uint256 total\\n        )\\n    {\\n        bool[] memory supported = checkErcInterfaces(collection);\\n\\n        // IF ERC721 & ERC721Enumerable supported\\n        if (supported[2] && supported[4]) {\\n            if (account == address(0)) {\\n                total = IERC721Enumerable(collection).totalSupply();\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = getNftInfos(\\n                        collection,\\n                        IERC721Enumerable(collection).tokenByIndex(offset + i),\\n                        supported[3]\\n                    );\\n                }\\n            } else {\\n                total = IERC721(collection).balanceOf(account);\\n\\n                require(offset <= total, \\\"Invalid offset\\\");\\n                count = (offset + limit <= total) ? limit : total - offset;\\n\\n                nftsInfos = new NftInfos[](count);\\n                for (uint256 i; i < count; i++) {\\n                    nftsInfos[i] = getNftInfos(\\n                        collection,\\n                        IERC721Enumerable(collection).tokenOfOwnerByIndex(account, offset + i),\\n                        supported[3]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function getNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        bool erc721Metadata\\n    ) public view override(IOpenGetter) returns (NftInfos memory nftInfos) {\\n        nftInfos.tokenID = tokenID;\\n        nftInfos.approved = IERC721(collection).getApproved(tokenID);\\n        nftInfos.owner = IERC721(collection).ownerOf(tokenID);\\n\\n        // IF ERC721Metadata supported\\n        if (erc721Metadata) {\\n            nftInfos.tokenURI = IERC721Metadata(collection).tokenURI(tokenID);\\n        }\\n    }\\n\\n    function _getCollectionInfos(\\n        address collection,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (CollectionInfos memory collectionInfos) {\\n        require(collection.code.length != 0, \\\"Not smartcontract\\\");\\n\\n        bool[] memory supported = checkSupportedInterfaces(collection, true, interfaceIds);\\n        collectionInfos.supported = supported;\\n\\n        // ERC165 must be supported\\n        require(!supported[0] && supported[1], \\\"Not ERC165\\\");\\n\\n        // ERC721 or ERC1155 must be supported\\n        require(supported[2] || supported[6], \\\"Not NFT smartcontract\\\");\\n\\n        collectionInfos.collection = collection;\\n\\n        // IF ERC173 supported\\n        if (supported[9]) {\\n            collectionInfos.owner = IERC173(collection).owner();\\n        }\\n\\n        // IF ERC721 supported\\n        if (supported[2]) {\\n            // IF ERC721Metadata supported\\n            if (supported[3]) {\\n                collectionInfos.name = IERC721Metadata(collection).name();\\n                collectionInfos.symbol = IERC721Metadata(collection).symbol();\\n            }\\n\\n            // IF ERC721Enumerable supported\\n            if (supported[4]) {\\n                collectionInfos.totalSupply = IERC721Enumerable(collection).totalSupply();\\n            }\\n\\n            if (account != address(0)) {\\n                collectionInfos.balanceOf = IERC721(collection).balanceOf(account);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cc77e761fb2b60ecfcb91439b211c2d70223871f55d0fc9a22d227b02d13dbb\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenRegistry \\u2014\\u2014 IOpenRegistry\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\\\";\\nimport \\\"forge-std/console.sol\\\";\\n\\nabstract contract OpenRegistry is IOpenRegistry, OpenERC173 {\\n    mapping(address => uint256) private _numAddress;\\n    address[] private _addresses;\\n    address public registerer;\\n\\n    /// @notice onlyRegisterer, by default owner is registerer and can add addresses, can be overriden\\n    modifier onlyRegisterer() virtual {\\n        require(msg.sender == owner() || msg.sender == registerer, \\\"Not registerer nor owner\\\");\\n        _;\\n    }\\n\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address) virtual {\\n        _;\\n    }\\n\\n    function setRegisterer(address registerer_) external override(IOpenRegistry) onlyOwner {\\n        _setRegisterer(registerer_);\\n    }\\n\\n    function addAddresses(address[] memory addrs) external override(IOpenRegistry) {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            _addAddress(addrs[i]);\\n        }\\n    }\\n\\n    function addAddress(address addr) external override(IOpenRegistry) {\\n        _addAddress(addr);\\n    }\\n\\n    function removeAddress(address addr) external override(IOpenRegistry) {\\n        _removeAddress(addr);\\n    }\\n\\n    function countAddresses() external view override(IOpenRegistry) returns (uint256) {\\n        return _addresses.length;\\n    }\\n\\n    function isRegistered(address addr) public view returns (bool) {\\n        return _numAddress[addr] >= 1;\\n    }\\n\\n    function getAddresses() public view override(IOpenRegistry) returns (address[] memory) {\\n        return _addresses;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenRegistry).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setRegisterer(address registerer_) internal {\\n        registerer = registerer_;\\n    }\\n\\n    function _addAddress(address addr) private onlyRegisterer onlyValid(addr) {\\n        if (!isRegistered(addr)) {\\n            _addresses.push(addr);\\n            _numAddress[addr] = _addresses.length;\\n        }\\n    }\\n\\n    function _removeAddress(address addr) private onlyRegisterer {\\n        require(isRegistered(addr), \\\"Not registered\\\");\\n\\n        uint256 num = _numAddress[addr];\\n        if (num != _addresses.length) {\\n            address addrLast = _addresses[_addresses.length - 1];\\n            _addresses[num - 1] = addrLast;\\n            _numAddress[addrLast] = num;\\n        }\\n\\n        delete (_numAddress[addr]);\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xd589c31f2d808765f38014497f0f6ad1607001dd8572c562f0c4bb66225ad616\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |              |\\n//   OpenChecker     OpenERC173\\n//        |              |\\n//    OpenGetter    OpenRegistry\\n//        |              |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenResolver \\u2014\\u2014 IOpenResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenRegistry.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenGetter.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\\\";\\n\\nabstract contract OpenResolver is IOpenResolver, OpenRegistry, OpenGetter {\\n    /// @notice isValid, by default all addresses valid\\n    modifier onlyValid(address addr) override(OpenRegistry) {\\n        require(isCollection(addr), \\\"Not Collection\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenRegistry, OpenGetter)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) public view override(IOpenResolver) returns (CollectionInfos[] memory collectionsInfos) {\\n        collectionsInfos = new CollectionInfos[](collections.length);\\n        for (uint256 i = 0; i < collections.length; i++) {\\n            collectionsInfos[i] = _getCollectionInfos(collections[i], account, interfaceIds);\\n        }\\n    }\\n\\n    function _getCollectionsInfos(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos)\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, interfaceIds);\\n\\n        uint256 len;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) len++;\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](len);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account)\\n                collectionsInfos[j++] = collectionsInfosAll[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0930efb779586fd1834c362247cb37b2a4827c767a288564c9678cb4f10b4515\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155 {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9eab118d391a2e33e6cb8b4bfc66036a234dd8440f7835439e7383f24f7e146d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155METADATAURI.sol)\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155MetadataURI {\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x700fed5a217b4de5451650010fba8b418d7eaba14b1ba972b9832a6f9e45f8ed\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155TokenReceiver.sol)\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155TokenReceiver {\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external returns (bytes4);\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x954e6550df028d8ef8d217bb5aa0705ec2c09effdbd6bdcc48bcbf031938160b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x713ae97b817d1538f7bd64cf91f5e80cb841ebc296d0e1b3a85ebb10c221bd3f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xfc768e62494276e5b66e370450ffd3f49e2fe59ff574110358b053187b48e2d1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfc39c64f036a9b3fce06ec1cf98922667a256b7c4cc190a9cdd63ec71566321a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Events {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x3b5a8abec7e4e26b63335ddf6c74facfad639ffa72093567d41cb24dfc6f67c1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Infos {\\n    struct CollectionInfos {\\n        address collection;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n        uint256 balanceOf;\\n        bool[] supported;\\n    }\\n\\n    struct NftInfos {\\n        uint256 tokenID;\\n        string tokenURI;\\n        address owner;\\n        address approved;\\n    }\\n}\\n\",\"keccak256\":\"0x1daa227a837df9b103007d35ae2450eb5ed678a88419f6d46da749eae21b30b7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenChecker {\\n    function checkErcInterfaces(address smartcontract) external view returns (bool[] memory interfaceIdsChecks);\\n\\n    function checkSupportedInterfaces(\\n        address smartcontract,\\n        bool erc,\\n        bytes4[] memory interfaceIds\\n    ) external view returns (bool[] memory interfaceIdsChecks);\\n\\n    function isCollection(address collection) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1b16e6b28d13502e4ec9909e49e7ad5e5b85151e499e2360c9f5d6f56cb72ed5\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function initialized() external view returns (bool);\\n\\n    function template() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60960fce3f83de59f194ea6c52cf1328df07f00bb26ef5e8046de87d1b07e69f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\n\\ninterface IOpenGetter is IERC721Infos {\\n    function getCollectionInfos(address collection) external view returns (CollectionInfos memory collectionInfos);\\n\\n    function getNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        bool erc721Metadata\\n    ) external view returns (NftInfos memory nftInfos);\\n\\n    function getNftsInfos(\\n        address collection,\\n        address account,\\n        uint256 limit,\\n        uint256 offset\\n    )\\n        external\\n        view\\n        returns (\\n            NftInfos[] memory nftsInfos,\\n            uint256 count,\\n            uint256 total\\n        );\\n\\n    function getNftsInfos(address collection, uint256[] memory tokenIDs)\\n        external\\n        view\\n        returns (NftInfos[] memory nftsInfos);\\n}\\n\",\"keccak256\":\"0xfcb0371e80285cfe36fb0dc391d2798b755f4b8a2fd8ebc7c34c2aa482ec5ef8\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(uint256 tokenID, uint256 price, address payer, address payee);\\n\\n    receive() external payable;\\n\\n    function defaultPrice() external view returns (uint256 defPrice);\\n\\n    function tokenPrice(uint256 tokenID) external view returns (uint256 price);\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n\\n    function getDefaultRoyaltyInfo() external view returns (address receiver, uint96 fraction);\\n\\n    function getTokenRoyaltyInfo(uint256 tokenID) external view returns (address receiver, uint96 fraction);\\n}\\n\",\"keccak256\":\"0x32f4fea296614b0add2754e30df3efdc28bd1660f8a05c510eefd3e05c8753f2\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function withdraw(address token) external;\\n}\\n\",\"keccak256\":\"0xd6db9618029d25ceb6fe3d8d2fa5823502c336b25316f148b912c3f716a67a53\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenRegistry {\\n    function setRegisterer(address registerer) external;\\n\\n    function removeAddress(address addr) external;\\n\\n    function addAddress(address addr) external;\\n\\n    function addAddresses(address[] memory addrs) external;\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function registerer() external view returns (address);\\n\\n    function countAddresses() external view returns (uint256);\\n\\n    function isRegistered(address addr) external view returns (bool registered);\\n}\\n\",\"keccak256\":\"0x8a78be9f520772a327dfe7a1984f41536e9e878a8d59a292dd934ffd130e6087\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\n\\ninterface IOpenResolver is IERC721Infos {\\n    function getCollectionsInfos(\\n        address[] memory collections,\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) external view returns (CollectionInfos[] memory collectionsInfos);\\n}\\n\",\"keccak256\":\"0x583d36d1d26947f7f2be3011aa496bc6e862a07559487e4ff207cb0196dc55dd\",\"license\":\"MIT\"},\"contracts/interfaces/IAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Events.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155MetadataURI.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nimport \\\"./ICloneFactory.sol\\\";\\nimport \\\"./ICloneFactoryV2.sol\\\";\\nimport \\\"./INFTsFactory.sol\\\";\\nimport \\\"./INFTsFactoryV2.sol\\\";\\nimport \\\"./IOpenNFTsFactoryV3.sol\\\";\\n\\nimport \\\"./IOpenNFTsV0.sol\\\";\\nimport \\\"./IOpenNFTsV1.sol\\\";\\nimport \\\"./IOpenNFTsV2.sol\\\";\\nimport \\\"./IOpenNFTsV3.sol\\\";\\nimport \\\"./IOpenNFTsV4.sol\\\";\\nimport \\\"./IOpenBound.sol\\\";\\n\",\"keccak256\":\"0x206584af05cf94fa8d286effa911d50d4f9e1198352cfcf6107b02e210175345\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactory {\\n    function addImplementation(address implementation_) external;\\n\\n    function setDefaultTemplate(address defaultTemplate_) external;\\n\\n    function setContractProbe(address contractProbe_) external;\\n\\n    function template() external view returns (address template_);\\n\\n    function implementations(uint256 index) external view returns (address implementation_);\\n\\n    function implementationsCount() external view returns (uint256 implementationsCount_);\\n}\\n\",\"keccak256\":\"0x1e8aa9d32ce6e91ad12269195265637a48bf6608011f878b31acb13f7228d7a8\",\"license\":\"MIT\"},\"contracts/interfaces/ICloneFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICloneFactoryV2 {\\n    /// @notice New Implementation Event\\n    /// @param implementation Address of the implementation\\n    /// @param creator Address of the creator\\n    /// @return index Index inside implementations array (starts at 0)\\n    event ImplementationNew(address indexed implementation, address indexed creator, uint256 index);\\n\\n    /// @notice Set Template Event\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    event TemplateSet(string indexed templateName, address indexed template);\\n\\n    /// @notice Set Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templateSet(string calldata templateName, address template) external;\\n\\n    /// @notice Add Implementation\\n    /// @param implementationToAdd Addresses of implementations to add\\n    function implementationsAdd(address[] calldata implementationToAdd) external;\\n\\n    /// @notice Get Template\\n    /// @param templateName Name of the template\\n    /// @param template Address of the template\\n    function templates(string calldata templateName) external view returns (address template);\\n\\n    /// @notice Count Implementations\\n    /// @return count Number of implementations\\n    function implementationsCount() external view returns (uint256 count);\\n\\n    /// @notice Get Implementation from Implementations array\\n    /// @param index Index of implementation\\n    /// @return implementation Address of implementation\\n    function implementations(uint256 index) external view returns (address implementation);\\n}\\n\",\"keccak256\":\"0x35d10451fed638bd375b4b1c5ce204672a60bc88c02e2e05bddd1a390fd24dba\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactory {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function withdrawEther() external;\\n\\n    function clone(string memory name, string memory symbol) external returns (address clone_);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory nftDatas_);\\n\\n    function balanceOf(address nft, address owner) external view returns (NftData memory nftData_);\\n}\\n\",\"keccak256\":\"0x46e466f2a11b8c8379abb6b32c4aabe5695d09c2c2c610078af3709c483b5e0a\",\"license\":\"MIT\"},\"contracts/interfaces/INFTsFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFTsFactoryV2 {\\n    struct NftData {\\n        address nft;\\n        uint256 balanceOf;\\n        address owner;\\n        string name;\\n        string symbol;\\n        uint256 totalSupply;\\n    }\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function balancesOf(address owner) external view returns (NftData[] memory);\\n}\\n\",\"keccak256\":\"0x47eb8674dd1aca360ae359cfe5352c5d668743c8facb8f014fa86163e8f4b222\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenBound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenBound {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 maxSupply\\n    ) external;\\n\\n    function mint(uint256 tokenID) external returns (uint256);\\n\\n    function claim(uint256 tokenID, uint256 cid) external;\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function getMyTokenID(uint256 cid) external view returns (uint256);\\n\\n    function getTokenID(address addr, uint256 cid) external view returns (uint256 tokenID);\\n\\n    function getCID(uint256 tokenID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32589afb6590b5214f04bba67d1ee4b5dba7b83261504067789e2b278fb5f395\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsFactoryV3 {\\n    event Clone(string indexed templateName, address indexed clone, string indexed name, string symbol, bool[] options);\\n\\n    event SetResolver(address indexed resolver);\\n\\n    event SetTemplate(string indexed templateName, address indexed template, uint256 index);\\n\\n    function setResolver(address resolver) external;\\n\\n    function setTemplate(string memory templateName, address template) external;\\n\\n    function clone(\\n        string memory name,\\n        string memory symbol,\\n        string memory templateName,\\n        bool[] memory options\\n    ) external returns (address);\\n\\n    function template(string memory templateName) external view returns (address);\\n\\n    function templates(uint256 num) external view returns (address);\\n\\n    function countTemplates() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5723b9a7a4b514e9468c84b5180f3c0921c9db2e636f330bf7b71679d1f61fc6\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Infos.sol\\\";\\n\\ninterface IOpenNFTsInfos is IERC721Infos {\\n    struct OpenNFTsCollectionInfos {\\n        uint256 version;\\n        string template;\\n        bool open;\\n        uint256 price;\\n        address receiver;\\n        uint96 fraction;\\n    }\\n    struct OpenNFTsNftInfos {\\n        uint256 price;\\n        address receiver;\\n        uint96 fraction;\\n    }\\n}\\n\",\"keccak256\":\"0xe8226900d4445a9017831882a8adc1d3191e2206adf03d1022fef44e0eca4a86\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IOpenNFTsInfos.sol\\\";\\n\\ninterface IOpenNFTsResolver is IOpenNFTsInfos {\\n    function getOpenNFTsNftInfos(address collection, uint256 tokenID)\\n        external\\n        view\\n        returns (NftInfos memory nftInfos, OpenNFTsNftInfos memory openNTFsnftInfos);\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        returns (CollectionInfos[] memory collectionsInfos, OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos);\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos);\\n}\\n\",\"keccak256\":\"0x56b1482c3845b5162df2d46f523e8093213d3bc973211934bd6bd22cb378a0ac\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV0 {\\n    function addUser(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xe409f8641290b1e34b3e748b1b83fb35e9a061302332353a8d096d8d20fa8fbe\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV1 {\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n}\\n\",\"keccak256\":\"0xc2298aa6c7becd112e6af3a96913fbfda48ff6fffe8ae938b25070e2e3d1a208\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV2 {\\n    function transferOwnership(address newOwner) external;\\n\\n    function initialize(string memory name, string memory symbol) external;\\n\\n    function mintNFT(address minter, string memory jsonURI) external returns (uint256 tokenID_);\\n\\n    function owner() external view returns (address owner_);\\n}\\n\",\"keccak256\":\"0x80f5c8bb99040e627368daefd93db5e81fd7c9847121abebe99413136c54bfa2\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTsV3 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n\\n    function open() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9aad4d4b8e93a3fa770afe4d158fa3dd78ba714c964192918c49e3225e3eea28\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        uint256 defaultPrice,\\n        address receiver,\\n        uint96 fee,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 price,\\n        address receiver,\\n        uint96 fee\\n    ) external payable returns (uint256 tokenID);\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function parent() external view returns (address);\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e43e18f3338f0e49664e6cff3dd76476c1a9437fdb8fc72506212931dbce5e6\",\"license\":\"MIT\"},\"contracts/next/OpenNFTsResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//    OpenERC165\\n//        |\\n//  OpenResolver\\n//        |\\n//  OpenNFTsResolver \\u2014\\u2014 IOpenNFTsResolver\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenResolver.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsResolver.sol\\\";\\nimport \\\"../interfaces/IAll.sol\\\";\\n\\ncontract OpenNFTsResolver is IOpenNFTsResolver, OpenResolver {\\n    bytes4[] private _interfaceIds = new bytes4[](11);\\n\\n    constructor(address owner_, address registerer_) {\\n        OpenERC173._initialize(owner_);\\n        OpenRegistry._setRegisterer(registerer_);\\n\\n        _interfaceIds[0] = type(IOpenNFTs).interfaceId; //       11+0  = 11\\n        _interfaceIds[1] = type(IOpenChecker).interfaceId; //    11+1  = 12\\n        _interfaceIds[2] = type(IOpenCloneable).interfaceId; //  11+2  = 13\\n        _interfaceIds[3] = type(IOpenMarketable).interfaceId; // 11+3  = 14\\n        _interfaceIds[4] = type(IOpenPauseable).interfaceId; //  11+4  = 15\\n\\n        _interfaceIds[5] = type(IOpenNFTsV0).interfaceId; //     11+5  = 16\\n        _interfaceIds[6] = type(IOpenNFTsV1).interfaceId; //     11+6  = 17\\n        _interfaceIds[7] = type(IOpenNFTsV2).interfaceId; //     11+7  = 18\\n        _interfaceIds[8] = type(IOpenNFTsV3).interfaceId; //     11+8  = 19\\n        _interfaceIds[9] = type(IOpenNFTsV4).interfaceId; //     11+9  = 20\\n        _interfaceIds[10] = type(IOpenBound).interfaceId; //     11+10 = 21\\n    }\\n\\n    function getOpenNFTsNftInfos(address collection, uint256 tokenID)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (NftInfos memory nftInfos, OpenNFTsNftInfos memory openNTFsNftInfos)\\n    {\\n        CollectionInfos memory collectionInfos = OpenGetter._getCollectionInfos(collection, address(0), _interfaceIds);\\n\\n        nftInfos = OpenGetter.getNftInfos(collection, tokenID, collectionInfos.supported[3]);\\n        openNTFsNftInfos = _getOpenNFTsNftInfos(collection, tokenID, collectionInfos.supported);\\n    }\\n\\n    function getOpenNFTsCollectionsInfos(address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (CollectionInfos[] memory collectionsInfos, OpenNFTsCollectionInfos[] memory openNFTsCollectionsInfos)\\n    {\\n        CollectionInfos[] memory collectionsInfosAll = getCollectionsInfos(getAddresses(), account, _interfaceIds);\\n\\n        uint256 len;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) len++;\\n        }\\n\\n        collectionsInfos = new CollectionInfos[](len);\\n        openNFTsCollectionsInfos = new OpenNFTsCollectionInfos[](len);\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < collectionsInfosAll.length; i++) {\\n            if (collectionsInfosAll[i].balanceOf > 0 || collectionsInfosAll[i].owner == account) {\\n                collectionsInfos[j] = collectionsInfosAll[i];\\n                openNFTsCollectionsInfos[j] = _getOpenNFTsCollectionInfos(\\n                    collectionsInfosAll[i].collection,\\n                    collectionsInfosAll[i].supported\\n                );\\n                j++;\\n            }\\n        }\\n    }\\n\\n    function getOpenNFTsCollectionInfos(address collection, address account)\\n        external\\n        view\\n        override(IOpenNFTsResolver)\\n        returns (CollectionInfos memory collectionInfos, OpenNFTsCollectionInfos memory openNTFscollectionInfos)\\n    {\\n        collectionInfos = OpenGetter._getCollectionInfos(collection, account, _interfaceIds);\\n        openNTFscollectionInfos = _getOpenNFTsCollectionInfos(collection, collectionInfos.supported);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(OpenResolver) returns (bool) {\\n        return interfaceId == type(IOpenNFTsResolver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getOpenNFTsNftInfos(\\n        address collection,\\n        uint256 tokenID,\\n        bool[] memory supported\\n    ) internal view returns (OpenNFTsNftInfos memory nftInfos) {\\n        if (supported[10]) {\\n            // ERC2981\\n            (nftInfos.receiver, nftInfos.fraction) = IOpenMarketable(payable(collection)).getTokenRoyaltyInfo(tokenID);\\n        }\\n        if (supported[14]) {\\n            // OpenMarketable\\n            nftInfos.price = IOpenMarketable(payable(collection)).tokenPrice(tokenID);\\n        }\\n    }\\n\\n    function _getOpenNFTsCollectionInfos(address collection, bool[] memory supported)\\n        internal\\n        view\\n        returns (OpenNFTsCollectionInfos memory collInfos)\\n    {\\n        if (supported[13]) {\\n            // OpenCloneable\\n            collInfos.version = IOpenCloneable(collection).version(); // 4\\n            collInfos.template = IOpenCloneable(collection).template(); // OpenNFTsV4 or OpenBound\\n            collInfos.open = IOpenNFTsV4(collection).open();\\n        } else if (supported[19]) {\\n            // OpenNFTsV3\\n            collInfos.version = 3;\\n            collInfos.template = \\\"OpenNFTsV3\\\";\\n            collInfos.open = IOpenNFTsV3(collection).open();\\n        } else if (supported[18]) {\\n            // OpenNFTsV2\\n            collInfos.version = 2;\\n        } else if (supported[17]) {\\n            // OpenNFTsV1\\n            collInfos.version = 1;\\n        } else if (supported[16]) {\\n            // OpenNFTsV0\\n            collInfos.version = 0;\\n        }\\n\\n        if (supported[10]) {\\n            // ERC2981\\n            (collInfos.receiver, collInfos.fraction) = IOpenMarketable(payable(collection)).getDefaultRoyaltyInfo();\\n        }\\n        if (supported[14]) {\\n            // OpenMarketable\\n            collInfos.price = IOpenMarketable(payable(collection)).defaultPrice();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde27707a998e36ca004e94a4e5fb31b31f4707328794169ce373c9c9fcd559ff\",\"license\":\"MIT\"},\"forge-std/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040526001600160e01b031960809081526301ffc9a760e01b60a0526380ac58cd60e01b60c052635b5e139f60e01b60e05263780e9d6360e01b61010052630a85bd0160e11b61012052636cdb3d1360e11b610140526303a24d0760e21b61016052630271189760e51b610180526307f5828d60e41b6101a05263152a902d60e11b6101c0526200009890600490600b62000578565b5060408051600b808252610180820190925290602082016101608036833750508151620000cd92600592506020019062000578565b50348015620000db57600080fd5b506040516200359438038062003594833981016040819052620000fe916200065f565b62000114826200049660201b620015041760201c565b6200012a81620004fd60201b620015611760201c565b630c38761960e41b600560008154811062000149576200014962000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550631fea36bd60e21b600560018154811062000198576200019862000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550632e5e69fd60e01b6005600281548110620001e757620001e762000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550632e103c0560e11b600560038154811062000236576200023662000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506398396bd360e01b600560048154811062000285576200028562000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550634b68d43160e01b60058081548110620002d357620002d362000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550633ab2af8560e21b600560068154811062000322576200032262000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550636ca50ed960e11b600560078154811062000371576200037162000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c0217905550635f5f00ef60e01b6005600881548110620003c057620003c062000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506330323f1960e01b60056009815481106200040f576200040f62000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055506317812f2360e11b6005600a815481106200045e576200045e62000697565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505050620006ad565b60005460ff1615620004e25760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b604482015260640160405180910390fd5b6000805460ff19166001179055620004fa816200051f565b50565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b82805482825590600052602060002090600701600890048101928215620006195791602002820160005b83821115620005e557835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302620005a2565b8015620006175782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620005e5565b505b50620006279291506200062b565b5090565b5b808211156200062757600081556001016200062c565b80516001600160a01b03811681146200065a57600080fd5b919050565b600080604083850312156200067357600080fd5b6200067e8362000642565b91506200068e6020840162000642565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b612ed780620006bd6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063690682a4116100b8578063c3c5a5471161007c578063c3c5a547146102f6578063cdaafcd614610324578063db668ce014610346578063dceba60414610367578063ec530de614610388578063f2fde38b1461039957600080fd5b8063690682a4146102715780637600c24c146102845780638da5cb5b146102a4578063a39fac12146102ce578063a8e719ce146102e357600080fd5b80634ba79dfe1161010a5780634ba79dfe146101d757806350da677b146101ea5780635d564a681461020a5780635ee9a1d21461022a5780635fa15ebb1461023d5780636049365c1461025057600080fd5b806301ffc9a7146101475780631178e9941461016f5780633628731c1461018f57806338eada1c146101a4578063490f06eb146101b7575b600080fd5b61015a610155366004612488565b6103ac565b60405190151581526020015b60405180910390f35b61018261017d3660046124c6565b6103d7565b60405161016691906125b1565b6101a261019d3660046126a1565b610578565b005b6101a26101b23660046126dd565b6105bc565b6101ca6101c53660046126dd565b6105c8565b60405161016691906126fa565b6101a26101e53660046126dd565b610601565b6101fd6101f83660046127a2565b61060a565b6040516101669190612918565b61021d61021836600461292b565b6106c9565b6040516101669190612a18565b6101a26102383660046126dd565b61080c565b61015a61024b3660046126dd565b610865565b61026361025e366004612a2b565b6108fc565b604051610166929190612a57565b6101ca61027f366004612a9f565b6109f2565b6102976102923660046126dd565b610c68565b6040516101669190612af6565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610166565b6102d6610c8c565b6040516101669190612b09565b6003546102b6906001600160a01b031681565b61015a6103043660046126dd565b6001600160a01b0316600090815260016020819052604090912054101590565b610337610332366004612b4a565b610cee565b60405161016693929190612b90565b6103596103543660046126dd565b611127565b604051610166929190612c1b565b61037a610375366004612c8d565b611420565b604051610166929190612cc6565b600254604051908152602001610166565b6101a26103a73660046126dd565b6114b0565b60006001600160e01b03198216630cf8839760e31b14806103d157506103d182611583565b92915050565b6103df612398565b82815260405163020604bf60e21b8152600481018490526001600160a01b0385169063081812fc9060240160206040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190612cf4565b6001600160a01b0390811660608301526040516331a9108f60e11b81526004810185905290851690636352211e9060240160206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190612cf4565b6001600160a01b0316604082015281156105715760405163c87b56dd60e01b8152600481018490526001600160a01b0385169063c87b56dd9060240160006040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056b9190810190612d11565b60208201525b9392505050565b60005b81518110156105b8576105a682828151811061059957610599612da4565b60200260200101516115a8565b806105b081612dd0565b91505061057b565b5050565b6105c5816115a8565b50565b60606103d182600160006040519080825280602002602001820160405280156105fb578160200160208202803683370190505b506109f2565b6105c5816116f4565b606083516001600160401b03811115610625576106256125c4565b60405190808252806020026020018201604052801561065e57816020015b61064b6123d2565b8152602001906001900390816106435790505b50905060005b84518110156106c15761069185828151811061068257610682612da4565b602002602001015185856118d6565b8282815181106106a3576106a3612da4565b602002602001018190525080806106b990612dd0565b915050610664565b509392505050565b6040516301ffc9a760e01b8152635b5e139f60e01b60048201526060906000906001600160a01b038516906301ffc9a79060240160206040518083038186803b15801561071557600080fd5b505afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190612deb565b905082516001600160401b03811115610768576107686125c4565b6040519080825280602002602001820160405280156107a157816020015b61078e612398565b8152602001906001900390816107865790505b50915060005b8351811015610804576107d4858583815181106107c6576107c6612da4565b6020026020010151846103d7565b8382815181106107e6576107e6612da4565b602002602001018190525080806107fc90612dd0565b9150506107a7565b505092915050565b60005461010090046001600160a01b0316331461085c5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6105c581611561565b600080610871836105c8565b90508060008151811061088657610886612da4565b60200260200101511580156108b25750806001815181106108a9576108a9612da4565b60200260200101515b80156105715750806002815181106108cc576108cc612da4565b6020026020010151806105715750806006815181106108ed576108ed612da4565b60200260200101519392505050565b610904612398565b604080516060810182526000808252602082018190529181019190915260006109ac85600060058054806020026020016040519081016040528092919081815260200182805480156109a257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109645790505b50505050506118d6565b90506109d785858360c001516003815181106109ca576109ca612da4565b60200260200101516103d7565b92506109e885858360c00151611d4d565b9150509250929050565b6060600080835185610a05576000610a09565b6004545b610a139190612e08565b9050806001600160401b03811115610a2d57610a2d6125c4565b604051908082528060200260200182016040528015610a56578160200160208202803683370190505b5092508415610b6e5760005b600454811015610b6c57866001600160a01b03166301ffc9a760048381548110610a8e57610a8e612da4565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b8152600401610add91906001600160e01b031991909116815260200190565b60206040518083038186803b158015610af557600080fd5b505afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190612deb565b8484610b3881612dd0565b955081518110610b4a57610b4a612da4565b9115156020928302919091019091015280610b6481612dd0565b915050610a62565b505b60005b8451811015610c5e57866001600160a01b03166301ffc9a7868381518110610b9b57610b9b612da4565b60200260200101516040518263ffffffff1660e01b8152600401610bcf91906001600160e01b031991909116815260200190565b60206040518083038186803b158015610be757600080fd5b505afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f9190612deb565b8484610c2a81612dd0565b955081518110610c3c57610c3c612da4565b9115156020928302919091019091015280610c5681612dd0565b915050610b71565b5050509392505050565b610c706123d2565b6040805160008152602081019091526103d190839033906118d6565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cc6575b5050505050905090565b60606000806000610cfe886105c8565b905080600281518110610d1357610d13612da4565b60200260200101518015610d3e575080600481518110610d3557610d35612da4565b60200260200101515b1561111c576001600160a01b038716610f5c57876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190612e20565b915081851115610e055760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610853565b81610e108787612e08565b1115610e2557610e208583612e39565b610e27565b855b9250826001600160401b03811115610e4157610e416125c4565b604051908082528060200260200182016040528015610e7a57816020015b610e67612398565b815260200190600190039081610e5f5790505b50935060005b83811015610f5657610f26896001600160a01b038116634f6ccce7610ea5858b612e08565b6040518263ffffffff1660e01b8152600401610ec391815260200190565b60206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f139190612e20565b846003815181106109ca576109ca612da4565b858281518110610f3857610f38612da4565b60200260200101819052508080610f4e90612dd0565b915050610e80565b5061111c565b6040516370a0823160e01b81526001600160a01b0388811660048301528916906370a082319060240160206040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612e20565b9150818511156110185760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610853565b816110238787612e08565b1115611038576110338583612e39565b61103a565b855b9250826001600160401b03811115611054576110546125c4565b60405190808252806020026020018201604052801561108d57816020015b61107a612398565b8152602001906001900390816110725790505b50935060005b8381101561111a576110ea896001600160a01b038116632f745c598b6110b9868c612e08565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610ec3565b8582815181106110fc576110fc612da4565b6020026020010181905250808061111290612dd0565b915050611093565b505b509450945094915050565b60608060006111bb611137610c8c565b8560058054806020026020016040519081016040528092919081815260200182805480156111b157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116111735790505b505050505061060a565b90506000805b82518110156112495760008382815181106111de576111de612da4565b602002602001015160a0015111806112245750856001600160a01b031683828151811061120d5761120d612da4565b6020026020010151602001516001600160a01b0316145b15611237578161123381612dd0565b9250505b8061124181612dd0565b9150506111c1565b50806001600160401b03811115611262576112626125c4565b60405190808252806020026020018201604052801561129b57816020015b6112886123d2565b8152602001906001900390816112805790505b509350806001600160401b038111156112b6576112b66125c4565b6040519080825280602002602001820160405280156112ef57816020015b6112dc612421565b8152602001906001900390816112d45790505b5092506000805b835181101561141757600084828151811061131357611313612da4565b602002602001015160a0015111806113595750866001600160a01b031684828151811061134257611342612da4565b6020026020010151602001516001600160a01b0316145b156114055783818151811061137057611370612da4565b602002602001015186838151811061138a5761138a612da4565b60200260200101819052506113d98482815181106113aa576113aa612da4565b6020026020010151600001518583815181106113c8576113c8612da4565b602002602001015160c00151611ebf565b8583815181106113eb576113eb612da4565b6020026020010181905250818061140190612dd0565b9250505b8061140f81612dd0565b9150506112f6565b50505050915091565b6114286123d2565b611430612421565b611497848460058054806020026020016040519081016040528092919081815260200182805480156109a2576000918252602091829020805460e01b6001600160e01b031916845290820283019290916004910180841161096457905050505050506118d6565b91506114a7848360c00151611ebf565b90509250929050565b60005461010090046001600160a01b031633146114fb5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610853565b6105c5816122aa565b60005460ff161561154b5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b6044820152606401610853565b6000805460ff191660011790556105c5816122aa565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166350da677b60e01b14806103d157506103d182612303565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b031614806115e257506003546001600160a01b031633145b6116295760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610853565b8061163381610865565b6116705760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b6044820152606401610853565b6001600160a01b03821660009081526001602081905260409091205410156105b8575060028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b0394909416938417905590546000928352602091909152604090912055565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061172e57506003546001600160a01b031633145b6117755760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610853565b6001600160a01b03811660009081526001602081905260409091205410156117d05760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610853565b6001600160a01b038116600090815260016020526040902054600254811461188657600280546000919061180690600190612e39565b8154811061181657611816612da4565b6000918252602090912001546001600160a01b0316905080600261183b600185612e39565b8154811061184b5761184b612da4565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b03821660009081526001602052604081205560028054806118b0576118b0612e50565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6118de6123d2565b6001600160a01b0384163b6119295760405162461bcd60e51b8152602060048201526011602482015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b6044820152606401610853565b6000611937856001856109f2565b9050808260c001819052508060008151811061195557611955612da4565b602002602001015115801561198157508060018151811061197857611978612da4565b60200260200101515b6119ba5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b6044820152606401610853565b806002815181106119cd576119cd612da4565b6020026020010151806119f75750806006815181106119ee576119ee612da4565b60200260200101515b611a3b5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b6044820152606401610853565b6001600160a01b0385168252805181906009908110611a5c57611a5c612da4565b602002602001015115611ae957846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190612cf4565b6001600160a01b031660208301525b80600281518110611afc57611afc612da4565b6020026020010151156106c15780600381518110611b1c57611b1c612da4565b602002602001015115611c2157846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b9e9190810190612d11565b8260400181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611bdf57600080fd5b505afa158015611bf3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c1b9190810190612d11565b60608301525b80600481518110611c3457611c34612da4565b602002602001015115611cb857846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb29190612e20565b60808301525b6001600160a01b038416156106c1576040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d409190612e20565b60a0830152509392505050565b604080516060810182526000808252602082018190529181019190915281600a81518110611d7d57611d7d612da4565b602002602001015115611e1e5760405163369f695560e11b8152600481018490526001600160a01b03851690636d3ed2aa90602401604080518083038186803b158015611dc957600080fd5b505afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e019190612e66565b6001600160601b031660408301526001600160a01b031660208201525b81600e81518110611e3157611e31612da4565b60200260200101511561057157604051636a6ee74560e11b8152600481018490526001600160a01b0385169063d4ddce8a9060240160206040518083038186803b158015611e7e57600080fd5b505afa158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190612e20565b81529392505050565b611ec7612421565b81600d81518110611eda57611eda612da4565b60200260200101511561205b57826001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2057600080fd5b505afa158015611f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f589190612e20565b816000018181525050826001600160a01b0316636f2ddd936040518163ffffffff1660e01b815260040160006040518083038186803b158015611f9a57600080fd5b505afa158015611fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fd69190810190612d11565b8160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201757600080fd5b505afa15801561202b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204f9190612deb565b15156040820152612161565b8160138151811061206e5761206e612da4565b6020026020010151156120ea5760038160000181815250506040518060400160405280600a8152602001694f70656e4e465473563360b01b8152508160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201757600080fd5b816012815181106120fd576120fd612da4565b6020026020010151156121135760028152612161565b8160118151811061212657612126612da4565b60200260200101511561213c5760018152612161565b8160108151811061214f5761214f612da4565b60200260200101511561216157600081525b81600a8151811061217457612174612da4565b60200260200101511561220e57826001600160a01b031663b24f2d396040518163ffffffff1660e01b8152600401604080518083038186803b1580156121b957600080fd5b505afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f19190612e66565b6001600160601b031660a08301526001600160a01b031660808201525b81600e8151811061222157612221612da4565b6020026020010151156103d157826001600160a01b031663e69e04b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f9190612e20565b606082015292915050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216637bc24eb360e11b14806103d157506103d18260006001600160e01b03198216631fea36bd60e21b14806103d157506103d18260006001600160e01b03198216633f62885160e01b14806103d157506103d18260006307f5828d60e41b6001600160e01b0319831614806103d157506001600160e01b031982166301ffc9a760e01b146103d1565b6040518060800160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001606081525090565b6040518060c0016040528060008152602001606081526020016000151581526020016000815260200160006001600160a01b0316815260200160006001600160601b031681525090565b80356001600160e01b03198116811461248357600080fd5b919050565b60006020828403121561249a57600080fd5b6105718261246b565b6001600160a01b03811681146105c557600080fd5b80151581146105c557600080fd5b6000806000606084860312156124db57600080fd5b83356124e6816124a3565b92506020840135915060408401356124fd816124b8565b809150509250925092565b60005b8381101561252357818101518382015260200161250b565b83811115612532576000848401525b50505050565b60008151808452612550816020860160208601612508565b601f01601f19169290920160200192915050565b8051825260006020820151608060208501526125836080850182612538565b6040848101516001600160a01b03908116918701919091526060948501511693909401929092525090919050565b6020815260006105716020830184612564565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612602576126026125c4565b604052919050565b60006001600160401b03821115612623576126236125c4565b5060051b60200190565b600082601f83011261263e57600080fd5b8135602061265361264e8361260a565b6125da565b82815260059290921b8401810191818101908684111561267257600080fd5b8286015b84811015612696578035612689816124a3565b8352918301918301612676565b509695505050505050565b6000602082840312156126b357600080fd5b81356001600160401b038111156126c957600080fd5b6126d58482850161262d565b949350505050565b6000602082840312156126ef57600080fd5b8135610571816124a3565b6020808252825182820181905260009190848201906040850190845b81811015612734578351151583529284019291840191600101612716565b50909695505050505050565b600082601f83011261275157600080fd5b8135602061276161264e8361260a565b82815260059290921b8401810191818101908684111561278057600080fd5b8286015b84811015612696576127958161246b565b8352918301918301612784565b6000806000606084860312156127b757600080fd5b83356001600160401b03808211156127ce57600080fd5b6127da8783880161262d565b9450602086013591506127ec826124a3565b9092506040850135908082111561280257600080fd5b5061280f86828701612740565b9150509250925092565b600060018060a01b038083511684526020818185015116818601526040840151915060e0604086015261284f60e0860183612538565b9150606084015185830360608701526128688382612538565b9250506080840151608086015260a084015160a086015260c084015185830360c087015282815180855283850191508383019450600092505b80831015612696578451151582529383019360019290920191908301906128a1565b600081518084526020808501808196508360051b8101915082860160005b8581101561290b5782840389526128f9848351612819565b988501989350908401906001016128e1565b5091979650505050505050565b60208152600061057160208301846128c3565b6000806040838503121561293e57600080fd5b8235612949816124a3565b91506020838101356001600160401b0381111561296557600080fd5b8401601f8101861361297657600080fd5b803561298461264e8261260a565b81815260059190911b820183019083810190888311156129a357600080fd5b928401925b828410156129c1578335825292840192908401906129a8565b80955050505050509250929050565b600081518084526020808501808196508360051b8101915082860160005b8581101561290b578284038952612a06848351612564565b988501989350908401906001016129ee565b60208152600061057160208301846129d0565b60008060408385031215612a3e57600080fd5b8235612a49816124a3565b946020939093013593505050565b608081526000612a6a6080830185612564565b90508251602083015260018060a01b0360208401511660408301526001600160601b0360408401511660608301529392505050565b600080600060608486031215612ab457600080fd5b8335612abf816124a3565b92506020840135612acf816124b8565b915060408401356001600160401b03811115612aea57600080fd5b61280f86828701612740565b6020815260006105716020830184612819565b6020808252825182820181905260009190848201906040850190845b818110156127345783516001600160a01b031683529284019291840191600101612b25565b60008060008060808587031215612b6057600080fd5b8435612b6b816124a3565b93506020850135612b7b816124a3565b93969395505050506040820135916060013590565b606081526000612ba360608301866129d0565b60208301949094525060400152919050565b805182526000602082015160c06020850152612bd460c0850182612538565b604084810151151590860152606080850151908601526080808501516001600160a01b03169086015260a0938401516001600160601b031693909401929092525090919050565b604081526000612c2e60408301856128c3565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015612c7e57601f19878403018552612c6c838351612bb5565b94860194925090850190600101612c50565b50909998505050505050505050565b60008060408385031215612ca057600080fd5b8235612cab816124a3565b91506020830135612cbb816124a3565b809150509250929050565b604081526000612cd96040830185612819565b8281036020840152612ceb8185612bb5565b95945050505050565b600060208284031215612d0657600080fd5b8151610571816124a3565b600060208284031215612d2357600080fd5b81516001600160401b0380821115612d3a57600080fd5b818401915084601f830112612d4e57600080fd5b815181811115612d6057612d606125c4565b612d73601f8201601f19166020016125da565b9150808252856020828501011115612d8a57600080fd5b612d9b816020840160208601612508565b50949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612de457612de4612dba565b5060010190565b600060208284031215612dfd57600080fd5b8151610571816124b8565b60008219821115612e1b57612e1b612dba565b500190565b600060208284031215612e3257600080fd5b5051919050565b600082821015612e4b57612e4b612dba565b500390565b634e487b7160e01b600052603160045260246000fd5b60008060408385031215612e7957600080fd5b8251612e84816124a3565b60208401519092506001600160601b0381168114612cbb57600080fdfea2646970667358221220df6b7967e2c62fddc5c9df22c76c377d004d3e6380c832c0a0a6d34615b44f8664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063690682a4116100b8578063c3c5a5471161007c578063c3c5a547146102f6578063cdaafcd614610324578063db668ce014610346578063dceba60414610367578063ec530de614610388578063f2fde38b1461039957600080fd5b8063690682a4146102715780637600c24c146102845780638da5cb5b146102a4578063a39fac12146102ce578063a8e719ce146102e357600080fd5b80634ba79dfe1161010a5780634ba79dfe146101d757806350da677b146101ea5780635d564a681461020a5780635ee9a1d21461022a5780635fa15ebb1461023d5780636049365c1461025057600080fd5b806301ffc9a7146101475780631178e9941461016f5780633628731c1461018f57806338eada1c146101a4578063490f06eb146101b7575b600080fd5b61015a610155366004612488565b6103ac565b60405190151581526020015b60405180910390f35b61018261017d3660046124c6565b6103d7565b60405161016691906125b1565b6101a261019d3660046126a1565b610578565b005b6101a26101b23660046126dd565b6105bc565b6101ca6101c53660046126dd565b6105c8565b60405161016691906126fa565b6101a26101e53660046126dd565b610601565b6101fd6101f83660046127a2565b61060a565b6040516101669190612918565b61021d61021836600461292b565b6106c9565b6040516101669190612a18565b6101a26102383660046126dd565b61080c565b61015a61024b3660046126dd565b610865565b61026361025e366004612a2b565b6108fc565b604051610166929190612a57565b6101ca61027f366004612a9f565b6109f2565b6102976102923660046126dd565b610c68565b6040516101669190612af6565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610166565b6102d6610c8c565b6040516101669190612b09565b6003546102b6906001600160a01b031681565b61015a6103043660046126dd565b6001600160a01b0316600090815260016020819052604090912054101590565b610337610332366004612b4a565b610cee565b60405161016693929190612b90565b6103596103543660046126dd565b611127565b604051610166929190612c1b565b61037a610375366004612c8d565b611420565b604051610166929190612cc6565b600254604051908152602001610166565b6101a26103a73660046126dd565b6114b0565b60006001600160e01b03198216630cf8839760e31b14806103d157506103d182611583565b92915050565b6103df612398565b82815260405163020604bf60e21b8152600481018490526001600160a01b0385169063081812fc9060240160206040518083038186803b15801561042257600080fd5b505afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a9190612cf4565b6001600160a01b0390811660608301526040516331a9108f60e11b81526004810185905290851690636352211e9060240160206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190612cf4565b6001600160a01b0316604082015281156105715760405163c87b56dd60e01b8152600481018490526001600160a01b0385169063c87b56dd9060240160006040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261056b9190810190612d11565b60208201525b9392505050565b60005b81518110156105b8576105a682828151811061059957610599612da4565b60200260200101516115a8565b806105b081612dd0565b91505061057b565b5050565b6105c5816115a8565b50565b60606103d182600160006040519080825280602002602001820160405280156105fb578160200160208202803683370190505b506109f2565b6105c5816116f4565b606083516001600160401b03811115610625576106256125c4565b60405190808252806020026020018201604052801561065e57816020015b61064b6123d2565b8152602001906001900390816106435790505b50905060005b84518110156106c15761069185828151811061068257610682612da4565b602002602001015185856118d6565b8282815181106106a3576106a3612da4565b602002602001018190525080806106b990612dd0565b915050610664565b509392505050565b6040516301ffc9a760e01b8152635b5e139f60e01b60048201526060906000906001600160a01b038516906301ffc9a79060240160206040518083038186803b15801561071557600080fd5b505afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d9190612deb565b905082516001600160401b03811115610768576107686125c4565b6040519080825280602002602001820160405280156107a157816020015b61078e612398565b8152602001906001900390816107865790505b50915060005b8351811015610804576107d4858583815181106107c6576107c6612da4565b6020026020010151846103d7565b8382815181106107e6576107e6612da4565b602002602001018190525080806107fc90612dd0565b9150506107a7565b505092915050565b60005461010090046001600160a01b0316331461085c5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6105c581611561565b600080610871836105c8565b90508060008151811061088657610886612da4565b60200260200101511580156108b25750806001815181106108a9576108a9612da4565b60200260200101515b80156105715750806002815181106108cc576108cc612da4565b6020026020010151806105715750806006815181106108ed576108ed612da4565b60200260200101519392505050565b610904612398565b604080516060810182526000808252602082018190529181019190915260006109ac85600060058054806020026020016040519081016040528092919081815260200182805480156109a257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116109645790505b50505050506118d6565b90506109d785858360c001516003815181106109ca576109ca612da4565b60200260200101516103d7565b92506109e885858360c00151611d4d565b9150509250929050565b6060600080835185610a05576000610a09565b6004545b610a139190612e08565b9050806001600160401b03811115610a2d57610a2d6125c4565b604051908082528060200260200182016040528015610a56578160200160208202803683370190505b5092508415610b6e5760005b600454811015610b6c57866001600160a01b03166301ffc9a760048381548110610a8e57610a8e612da4565b90600052602060002090600891828204019190066004029054906101000a900460e01b6040518263ffffffff1660e01b8152600401610add91906001600160e01b031991909116815260200190565b60206040518083038186803b158015610af557600080fd5b505afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190612deb565b8484610b3881612dd0565b955081518110610b4a57610b4a612da4565b9115156020928302919091019091015280610b6481612dd0565b915050610a62565b505b60005b8451811015610c5e57866001600160a01b03166301ffc9a7868381518110610b9b57610b9b612da4565b60200260200101516040518263ffffffff1660e01b8152600401610bcf91906001600160e01b031991909116815260200190565b60206040518083038186803b158015610be757600080fd5b505afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1f9190612deb565b8484610c2a81612dd0565b955081518110610c3c57610c3c612da4565b9115156020928302919091019091015280610c5681612dd0565b915050610b71565b5050509392505050565b610c706123d2565b6040805160008152602081019091526103d190839033906118d6565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cc6575b5050505050905090565b60606000806000610cfe886105c8565b905080600281518110610d1357610d13612da4565b60200260200101518015610d3e575080600481518110610d3557610d35612da4565b60200260200101515b1561111c576001600160a01b038716610f5c57876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc29190612e20565b915081851115610e055760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610853565b81610e108787612e08565b1115610e2557610e208583612e39565b610e27565b855b9250826001600160401b03811115610e4157610e416125c4565b604051908082528060200260200182016040528015610e7a57816020015b610e67612398565b815260200190600190039081610e5f5790505b50935060005b83811015610f5657610f26896001600160a01b038116634f6ccce7610ea5858b612e08565b6040518263ffffffff1660e01b8152600401610ec391815260200190565b60206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f139190612e20565b846003815181106109ca576109ca612da4565b858281518110610f3857610f38612da4565b60200260200101819052508080610f4e90612dd0565b915050610e80565b5061111c565b6040516370a0823160e01b81526001600160a01b0388811660048301528916906370a082319060240160206040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612e20565b9150818511156110185760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081bd9999cd95d60921b6044820152606401610853565b816110238787612e08565b1115611038576110338583612e39565b61103a565b855b9250826001600160401b03811115611054576110546125c4565b60405190808252806020026020018201604052801561108d57816020015b61107a612398565b8152602001906001900390816110725790505b50935060005b8381101561111a576110ea896001600160a01b038116632f745c598b6110b9868c612e08565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610ec3565b8582815181106110fc576110fc612da4565b6020026020010181905250808061111290612dd0565b915050611093565b505b509450945094915050565b60608060006111bb611137610c8c565b8560058054806020026020016040519081016040528092919081815260200182805480156111b157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116111735790505b505050505061060a565b90506000805b82518110156112495760008382815181106111de576111de612da4565b602002602001015160a0015111806112245750856001600160a01b031683828151811061120d5761120d612da4565b6020026020010151602001516001600160a01b0316145b15611237578161123381612dd0565b9250505b8061124181612dd0565b9150506111c1565b50806001600160401b03811115611262576112626125c4565b60405190808252806020026020018201604052801561129b57816020015b6112886123d2565b8152602001906001900390816112805790505b509350806001600160401b038111156112b6576112b66125c4565b6040519080825280602002602001820160405280156112ef57816020015b6112dc612421565b8152602001906001900390816112d45790505b5092506000805b835181101561141757600084828151811061131357611313612da4565b602002602001015160a0015111806113595750866001600160a01b031684828151811061134257611342612da4565b6020026020010151602001516001600160a01b0316145b156114055783818151811061137057611370612da4565b602002602001015186838151811061138a5761138a612da4565b60200260200101819052506113d98482815181106113aa576113aa612da4565b6020026020010151600001518583815181106113c8576113c8612da4565b602002602001015160c00151611ebf565b8583815181106113eb576113eb612da4565b6020026020010181905250818061140190612dd0565b9250505b8061140f81612dd0565b9150506112f6565b50505050915091565b6114286123d2565b611430612421565b611497848460058054806020026020016040519081016040528092919081815260200182805480156109a2576000918252602091829020805460e01b6001600160e01b031916845290820283019290916004910180841161096457905050505050506118d6565b91506114a7848360c00151611ebf565b90509250929050565b60005461010090046001600160a01b031633146114fb5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610853565b6105c5816122aa565b60005460ff161561154b5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b6044820152606401610853565b6000805460ff191660011790556105c5816122aa565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b031982166350da677b60e01b14806103d157506103d182612303565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b031614806115e257506003546001600160a01b031633145b6116295760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610853565b8061163381610865565b6116705760405162461bcd60e51b815260206004820152600e60248201526d2737ba1021b7b63632b1ba34b7b760911b6044820152606401610853565b6001600160a01b03821660009081526001602081905260409091205410156105b8575060028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b0319166001600160a01b0394909416938417905590546000928352602091909152604090912055565b60005461010090046001600160a01b03166001600160a01b0316336001600160a01b0316148061172e57506003546001600160a01b031633145b6117755760405162461bcd60e51b81526020600482015260186024820152772737ba103932b3b4b9ba32b932b9103737b91037bbb732b960411b6044820152606401610853565b6001600160a01b03811660009081526001602081905260409091205410156117d05760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152606401610853565b6001600160a01b038116600090815260016020526040902054600254811461188657600280546000919061180690600190612e39565b8154811061181657611816612da4565b6000918252602090912001546001600160a01b0316905080600261183b600185612e39565b8154811061184b5761184b612da4565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559290911681526001909152604090208190555b6001600160a01b03821660009081526001602052604081205560028054806118b0576118b0612e50565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6118de6123d2565b6001600160a01b0384163b6119295760405162461bcd60e51b8152602060048201526011602482015270139bdd081cdb585c9d18dbdb9d1c9858dd607a1b6044820152606401610853565b6000611937856001856109f2565b9050808260c001819052508060008151811061195557611955612da4565b602002602001015115801561198157508060018151811061197857611978612da4565b60200260200101515b6119ba5760405162461bcd60e51b815260206004820152600a6024820152694e6f742045524331363560b01b6044820152606401610853565b806002815181106119cd576119cd612da4565b6020026020010151806119f75750806006815181106119ee576119ee612da4565b60200260200101515b611a3b5760405162461bcd60e51b8152602060048201526015602482015274139bdd08139195081cdb585c9d18dbdb9d1c9858dd605a1b6044820152606401610853565b6001600160a01b0385168252805181906009908110611a5c57611a5c612da4565b602002602001015115611ae957846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190612cf4565b6001600160a01b031660208301525b80600281518110611afc57611afc612da4565b6020026020010151156106c15780600381518110611b1c57611b1c612da4565b602002602001015115611c2157846001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b9e9190810190612d11565b8260400181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611bdf57600080fd5b505afa158015611bf3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c1b9190810190612d11565b60608301525b80600481518110611c3457611c34612da4565b602002602001015115611cb857846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb29190612e20565b60808301525b6001600160a01b038416156106c1576040516370a0823160e01b81526001600160a01b0385811660048301528616906370a082319060240160206040518083038186803b158015611d0857600080fd5b505afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d409190612e20565b60a0830152509392505050565b604080516060810182526000808252602082018190529181019190915281600a81518110611d7d57611d7d612da4565b602002602001015115611e1e5760405163369f695560e11b8152600481018490526001600160a01b03851690636d3ed2aa90602401604080518083038186803b158015611dc957600080fd5b505afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e019190612e66565b6001600160601b031660408301526001600160a01b031660208201525b81600e81518110611e3157611e31612da4565b60200260200101511561057157604051636a6ee74560e11b8152600481018490526001600160a01b0385169063d4ddce8a9060240160206040518083038186803b158015611e7e57600080fd5b505afa158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190612e20565b81529392505050565b611ec7612421565b81600d81518110611eda57611eda612da4565b60200260200101511561205b57826001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2057600080fd5b505afa158015611f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f589190612e20565b816000018181525050826001600160a01b0316636f2ddd936040518163ffffffff1660e01b815260040160006040518083038186803b158015611f9a57600080fd5b505afa158015611fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fd69190810190612d11565b8160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201757600080fd5b505afa15801561202b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204f9190612deb565b15156040820152612161565b8160138151811061206e5761206e612da4565b6020026020010151156120ea5760038160000181815250506040518060400160405280600a8152602001694f70656e4e465473563360b01b8152508160200181905250826001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561201757600080fd5b816012815181106120fd576120fd612da4565b6020026020010151156121135760028152612161565b8160118151811061212657612126612da4565b60200260200101511561213c5760018152612161565b8160108151811061214f5761214f612da4565b60200260200101511561216157600081525b81600a8151811061217457612174612da4565b60200260200101511561220e57826001600160a01b031663b24f2d396040518163ffffffff1660e01b8152600401604080518083038186803b1580156121b957600080fd5b505afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f19190612e66565b6001600160601b031660a08301526001600160a01b031660808201525b81600e8151811061222157612221612da4565b6020026020010151156103d157826001600160a01b031663e69e04b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f9190612e20565b606082015292915050565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006001600160e01b03198216637bc24eb360e11b14806103d157506103d18260006001600160e01b03198216631fea36bd60e21b14806103d157506103d18260006001600160e01b03198216633f62885160e01b14806103d157506103d18260006307f5828d60e41b6001600160e01b0319831614806103d157506001600160e01b031982166301ffc9a760e01b146103d1565b6040518060800160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001606081525090565b6040518060c0016040528060008152602001606081526020016000151581526020016000815260200160006001600160a01b0316815260200160006001600160601b031681525090565b80356001600160e01b03198116811461248357600080fd5b919050565b60006020828403121561249a57600080fd5b6105718261246b565b6001600160a01b03811681146105c557600080fd5b80151581146105c557600080fd5b6000806000606084860312156124db57600080fd5b83356124e6816124a3565b92506020840135915060408401356124fd816124b8565b809150509250925092565b60005b8381101561252357818101518382015260200161250b565b83811115612532576000848401525b50505050565b60008151808452612550816020860160208601612508565b601f01601f19169290920160200192915050565b8051825260006020820151608060208501526125836080850182612538565b6040848101516001600160a01b03908116918701919091526060948501511693909401929092525090919050565b6020815260006105716020830184612564565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612602576126026125c4565b604052919050565b60006001600160401b03821115612623576126236125c4565b5060051b60200190565b600082601f83011261263e57600080fd5b8135602061265361264e8361260a565b6125da565b82815260059290921b8401810191818101908684111561267257600080fd5b8286015b84811015612696578035612689816124a3565b8352918301918301612676565b509695505050505050565b6000602082840312156126b357600080fd5b81356001600160401b038111156126c957600080fd5b6126d58482850161262d565b949350505050565b6000602082840312156126ef57600080fd5b8135610571816124a3565b6020808252825182820181905260009190848201906040850190845b81811015612734578351151583529284019291840191600101612716565b50909695505050505050565b600082601f83011261275157600080fd5b8135602061276161264e8361260a565b82815260059290921b8401810191818101908684111561278057600080fd5b8286015b84811015612696576127958161246b565b8352918301918301612784565b6000806000606084860312156127b757600080fd5b83356001600160401b03808211156127ce57600080fd5b6127da8783880161262d565b9450602086013591506127ec826124a3565b9092506040850135908082111561280257600080fd5b5061280f86828701612740565b9150509250925092565b600060018060a01b038083511684526020818185015116818601526040840151915060e0604086015261284f60e0860183612538565b9150606084015185830360608701526128688382612538565b9250506080840151608086015260a084015160a086015260c084015185830360c087015282815180855283850191508383019450600092505b80831015612696578451151582529383019360019290920191908301906128a1565b600081518084526020808501808196508360051b8101915082860160005b8581101561290b5782840389526128f9848351612819565b988501989350908401906001016128e1565b5091979650505050505050565b60208152600061057160208301846128c3565b6000806040838503121561293e57600080fd5b8235612949816124a3565b91506020838101356001600160401b0381111561296557600080fd5b8401601f8101861361297657600080fd5b803561298461264e8261260a565b81815260059190911b820183019083810190888311156129a357600080fd5b928401925b828410156129c1578335825292840192908401906129a8565b80955050505050509250929050565b600081518084526020808501808196508360051b8101915082860160005b8581101561290b578284038952612a06848351612564565b988501989350908401906001016129ee565b60208152600061057160208301846129d0565b60008060408385031215612a3e57600080fd5b8235612a49816124a3565b946020939093013593505050565b608081526000612a6a6080830185612564565b90508251602083015260018060a01b0360208401511660408301526001600160601b0360408401511660608301529392505050565b600080600060608486031215612ab457600080fd5b8335612abf816124a3565b92506020840135612acf816124b8565b915060408401356001600160401b03811115612aea57600080fd5b61280f86828701612740565b6020815260006105716020830184612819565b6020808252825182820181905260009190848201906040850190845b818110156127345783516001600160a01b031683529284019291840191600101612b25565b60008060008060808587031215612b6057600080fd5b8435612b6b816124a3565b93506020850135612b7b816124a3565b93969395505050506040820135916060013590565b606081526000612ba360608301866129d0565b60208301949094525060400152919050565b805182526000602082015160c06020850152612bd460c0850182612538565b604084810151151590860152606080850151908601526080808501516001600160a01b03169086015260a0938401516001600160601b031693909401929092525090919050565b604081526000612c2e60408301856128c3565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015612c7e57601f19878403018552612c6c838351612bb5565b94860194925090850190600101612c50565b50909998505050505050505050565b60008060408385031215612ca057600080fd5b8235612cab816124a3565b91506020830135612cbb816124a3565b809150509250929050565b604081526000612cd96040830185612819565b8281036020840152612ceb8185612bb5565b95945050505050565b600060208284031215612d0657600080fd5b8151610571816124a3565b600060208284031215612d2357600080fd5b81516001600160401b0380821115612d3a57600080fd5b818401915084601f830112612d4e57600080fd5b815181811115612d6057612d606125c4565b612d73601f8201601f19166020016125da565b9150808252856020828501011115612d8a57600080fd5b612d9b816020840160208601612508565b50949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612de457612de4612dba565b5060010190565b600060208284031215612dfd57600080fd5b8151610571816124b8565b60008219821115612e1b57612e1b612dba565b500190565b600060208284031215612e3257600080fd5b5051919050565b600082821015612e4b57612e4b612dba565b500390565b634e487b7160e01b600052603160045260246000fd5b60008060408385031215612e7957600080fd5b8251612e84816124a3565b60208401519092506001600160601b0381168114612cbb57600080fdfea2646970667358221220df6b7967e2c62fddc5c9df22c76c377d004d3e6380c832c0a0a6d34615b44f8664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6531,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6533,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9499,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_numAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9502,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9504,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "registerer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8797,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_ercInterfaceIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes4)dyn_storage"
      },
      {
        "astId": 20377,
        "contract": "contracts/next/OpenNFTsResolver.sol:OpenNFTsResolver",
        "label": "_interfaceIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes4)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}