{
  "address": "0xEFE3076F84dd6C1e0c73980CFa7c4498f317541F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bool[]",
          "name": "options",
          "type": "bool[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "jsonURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "jsonURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDefaultPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaaa6c370dc46781662982c047d59bf362916f655a3d37ef3e917a5ecb8176d99",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xEFE3076F84dd6C1e0c73980CFa7c4498f317541F",
    "transactionIndex": 9,
    "gasUsed": "2474677",
    "logsBloom": "0x
    "blockHash": "0x71f6f087b747e8d31fcb46b728471a0edda74618e625d75a549b73c6abdca3e0",
    "transactionHash": "0xaaa6c370dc46781662982c047d59bf362916f655a3d37ef3e917a5ecb8176d99",
    "logs": [],
    "blockNumber": 7288678,
    "cumulativeGasUsed": "8239974",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "ee0c301fcce9b7a705c621c909f3418c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bool[]\",\"name\":\"options\",\"type\":\"bool[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"jsonURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"jsonURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}},\"initialize(string,string,address,bool[])\":{\"params\":{\"name_\":\"name of the NFT Collection\",\"options\":\"select minting open to everyone or only owner\",\"owner_\":\"owner of the NFT Collection\",\"symbol_\":\"symbol of the NFT Collection\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId to test\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"initialize(string,string,address,bool[])\":{\"notice\":\"initialize\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty configuration\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty configuration\"},\"supportsInterface(bytes4)\":{\"notice\":\"test if this interface is supported\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/OpenNFTsV4.sol\":\"OpenNFTsV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe47c8fecd9882074475a668c4cafa10bde93d2fdbe6f92bd6e570736a6e00212\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xfc768e62494276e5b66e370450ffd3f49e2fe59ff574110358b053187b48e2d1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa39e9770ae9ec18032ae66aed65dbbc82b733f15a56b8208cfaf69d16ea28bfd\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function getTemplate() external view returns (string memory);\\n\\n    function getVersion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x152901133233a3b58d7f9391a4c9fe920b899d1b720f473f8b9bc04790fb760d\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    function tokenPrice(uint256 tokenID) external returns (uint256 price);\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n}\\n\",\"keccak256\":\"0xd66ee5ea5a1d06abbbfaadea6416c24faf549244753292b3c6f4f2e245d57fa1\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function mint(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function withdraw(address to) external;\\n\\n    function withdrawErc20(address token) external;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa482b5a21f8349fed50815687b84aa0fe763cf5c8cdec94bce69baf1ac3429f3\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"contracts/open/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IOpenCloneable.sol\\\";\\nimport \\\"./OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool private _once;\\n    string private _template;\\n    uint256 private _version;\\n\\n    function getTemplate() external view override(IOpenCloneable) returns (string memory) {\\n        return _template;\\n    }\\n\\n    function getVersion() external view override(IOpenCloneable) returns (uint256) {\\n        return _version;\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(_once == false, \\\"Only once!\\\");\\n        _once = true;\\n\\n        _template = template_;\\n        _version = version_;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0816c409d158848e778501a685af4c180ab93baab9881c654f6a5e644f9b310e\",\"license\":\"MIT\"},\"contracts/open/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//                OpenERC165\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7;\\n    }\\n}\\n\",\"keccak256\":\"0x54c433b2c810d2639739d9507ffc4d8bc14bf4d08191aaa8f2ecf2945ec69c72\",\"license\":\"MIT\"},\"contracts/open/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC721.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC721 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC721) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _setOwner(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x77f775626a4c1521cba23d4d72e881d652c86720dd22741ee2a52519e7f3cdf8\",\"license\":\"MIT\"},\"contracts/open/OpenERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/common/ERC2981.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//                     |\\n//                OpenERC2981\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC173.sol\\\";\\nimport \\\"../interfaces/IERC2981.sol\\\";\\n\\nabstract contract OpenERC2981 is IERC2981, OpenERC173 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 fraction;\\n    }\\n\\n    RoyaltyInfo internal _royaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) internal _tokenRoyaltyInfo;\\n\\n    uint96 internal constant _MAX_FEE = 10000;\\n\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        public\\n        view\\n        override(IERC2981)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        /// otherwise may overflow\\n        require(salePrice < 2**128, \\\"Too expensive\\\");\\n\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenID];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _royaltyInfo;\\n        }\\n\\n        royaltyAmount = (salePrice * royalty.fraction) / _MAX_FEE;\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x103d6951e46401d4bf31e64382a94fb0cd4c92a957b5bf13a0ae4a4eca7ddce4\",\"license\":\"MIT\"},\"contracts/open/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC165.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    function approve(address spender, uint256 tokenID) external override(IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override(IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external override(IERC721) {\\n        safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) public override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return\\n            interfaceId == 0x80ac58cd || // = type(IERC721).interfaceId\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override(IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Zero address not valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID) public view override(IERC721) returns (address owner) {\\n        require((owner = _owners[tokenID]) != address(0), \\\"Invalid token ID\\\");\\n    }\\n\\n    function getApproved(uint256 tokenID) public view override(IERC721) returns (address) {\\n        require(_exists(tokenID), \\\"Invalid token ID\\\");\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mintNft(address to, uint256 tokenID) internal {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(!_exists(tokenID), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burnNft(uint256 tokenID) internal {\\n        address owner = ownerOf(tokenID);\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal onlyTokenOwnerOrApproved(tokenID) {\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual;\\n\\n    function _exists(uint256 tokenID) internal view returns (bool) {\\n        return _owners[tokenID] != address(0);\\n    }\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID) internal view virtual returns (bool) {\\n        address owner = ownerOf(tokenID);\\n        return (owner == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID) internal view returns (bool) {\\n        return (_isOwnerOrOperator(spender, tokenID) || getApproved(tokenID) == spender);\\n    }\\n\\n    function _isERC721Receiver(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private returns (bool) {\\n        return\\n            to.code.length == 0 ||\\n            IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data) ==\\n            IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xff97949778ef85fcc2649a2f9d92378888d257dd19f16ee0f64c5790e7143816\",\"license\":\"MIT\"},\"contracts/open/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//            OpenERC721Enumerable\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC721.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override(IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index) external view override(IERC721Enumerable) returns (uint256) {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC721) returns (bool) {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mintEnumerable(address to, uint256 tokenID) internal {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n    }\\n\\n    function _burnEnumerable(uint256 tokenID) internal {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual override(OpenERC721) {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0x1e44f5306d45527bbee265d8c8e777e0df7110e0998d3e0e6491549dea3a9b78\",\"license\":\"MIT\"},\"contracts/open/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//            OpenERC721Metadata\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC721.sol\\\";\\nimport \\\"../interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID) external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC721) returns (bool) {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Only once!\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mintMetadata(uint256 tokenID, string memory newTokenURI) internal {\\n        _tokenURIs[tokenID] = newTokenURI;\\n    }\\n\\n    function _burnMetadata(uint256 tokenID) internal {\\n        delete _tokenURIs[tokenID];\\n    }\\n}\\n\",\"keccak256\":\"0x18d4f81db0b5b43ee1cd4f18a86114f330b47f549b1cfd2236d366ccc842617b\",\"license\":\"MIT\"},\"contracts/open/OpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//\\n//\\n//                OpenERC165 (supports)\\n//                     |\\n//                OpenERC721 (NFT)\\n//                     |\\n//                OpenERC173 (Ownable)\\n//                     |\\n//                OpenERC2981 (RoyaltyInfo)\\n//                     |\\n//               OpenMarketable\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC2981.sol\\\";\\nimport \\\"./OpenPauseable.sol\\\";\\nimport \\\"../interfaces/IOpenMarketable.sol\\\";\\n\\nabstract contract OpenMarketable is IOpenMarketable, OpenERC2981, OpenPauseable {\\n    mapping(uint256 => uint256) public tokenPrice;\\n    uint256 public defaultPrice;\\n\\n    modifier notTooExpensive(uint256 price) {\\n        /// otherwise may overflow\\n        require(price < 2**128, \\\"Too expensive\\\");\\n        _;\\n    }\\n\\n    modifier lessThanMaxFee(uint256 fee) {\\n        require(fee <= _MAX_FEE, \\\"Royalty fee exceed price\\\");\\n        _;\\n    }\\n\\n    /// @notice SET default royalty configuration\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setDefaultRoyalty(address receiver, uint96 fee)\\n        external\\n        override(IOpenMarketable)\\n        onlyOwner\\n        lessThanMaxFee(fee)\\n    {\\n        _royaltyInfo = RoyaltyInfo(receiver, fee);\\n        emit SetDefaultRoyalty(receiver, fee);\\n    }\\n\\n    /// @notice SET token royalty configuration\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) external override(IOpenMarketable) onlyTokenOwnerOrApproved(tokenID) lessThanMaxFee(fee) {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function setDefaultPrice(uint256 price) external override(IOpenMarketable) onlyOwner notTooExpensive(price) {\\n        defaultPrice = price;\\n    }\\n\\n    function setTokenPrice(uint256 tokenID) external override(IOpenMarketable) {\\n        setTokenPrice(tokenID, defaultPrice);\\n    }\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price)\\n        public\\n        override(IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n        notTooExpensive(price)\\n    {\\n        _setTokenPrice(tokenID, price);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC2981, OpenPauseable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenMarketable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) internal {\\n        _tokenRoyaltyInfo[tokenID] = RoyaltyInfo(receiver, fee);\\n        emit SetTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function _setTokenPrice(uint256 tokenID, uint256 price) internal {\\n        tokenPrice[tokenID] = price;\\n    }\\n\\n    function _mintPriceable(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee,\\n        uint256 price\\n    ) internal {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n        _setTokenPrice(tokenID, price);\\n    }\\n\\n    function _burnPriceable(uint256 tokenID) internal {\\n        delete _tokenRoyaltyInfo[tokenID];\\n        delete tokenPrice[tokenID];\\n    }\\n}\\n\",\"keccak256\":\"0xfb16e7c415b81d5950fea80b65b4bfcaceab4b34b1c28a49b44fa9561813a8b9\",\"license\":\"MIT\"},\"contracts/open/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//\\n//\\n//                OpenERC165\\n//                     |\\n//                OpenERC721\\n//                     |\\n//                OpenERC173\\n//                     |\\n//               OpenPauseable\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./OpenERC173.sol\\\";\\nimport \\\"../interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override(IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override(IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb4b4fd2fa4a5a9df9a73dbfc27f2c66c30ec145eaf894a8f88a0278cdb42975d\",\"license\":\"MIT\"},\"contracts/templates/OpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//       ___           ___           ___          _____          ___           ___           ___\\n//      /__/|         /  /\\\\         /  /\\\\        /  /::\\\\        /  /\\\\         /__/\\\\         /__/\\\\\\n//     |  |:|        /  /::\\\\       /  /:/_      /  /:/\\\\:\\\\      /  /:/_        \\\\  \\\\:\\\\       |  |::\\\\\\n//     |  |:|       /  /:/\\\\:\\\\     /  /:/ /\\\\    /  /:/  \\\\:\\\\    /  /:/ /\\\\        \\\\  \\\\:\\\\      |  |:|:\\\\\\n//   __|  |:|      /  /:/~/:/    /  /:/ /:/_  /__/:/ \\\\__\\\\:|  /  /:/ /:/_   ___  \\\\  \\\\:\\\\   __|__|:|\\\\:\\\\\\n//  /__/\\\\_|:|____ /__/:/ /:/___ /__/:/ /:/ /\\\\ \\\\  \\\\:\\\\ /  /:/ /__/:/ /:/ /\\\\ /__/\\\\  \\\\__\\\\:\\\\ /__/::::| \\\\:\\\\\\n//  \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:::::/ \\\\  \\\\:\\\\/:/ /:/  \\\\  \\\\:\\\\  /:/  \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\~~\\\\__\\\\/\\n//   \\\\  \\\\::/~~~~   \\\\  \\\\::/~~~~   \\\\  \\\\::/ /:/    \\\\  \\\\:\\\\/:/    \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  /:/   \\\\  \\\\:\\\\\\n//    \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\:\\\\/:/      \\\\  \\\\::/      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\\\n//     \\\\  \\\\:\\\\        \\\\  \\\\:\\\\        \\\\  \\\\::/        \\\\__\\\\/        \\\\  \\\\::/       \\\\  \\\\::/       \\\\  \\\\:\\\\\\n//      \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/                       \\\\__\\\\/         \\\\__\\\\/         \\\\__\\\\/\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//                         OpenERC165 (supports)\\n//                             |\\n//                             \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//                             |                                                  |\\n//                         OpenERC721 (NFT)                                 OpenCloneable\\n//                             |                                                  |\\n//                     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014             |\\n//                     |                       |                    |             |\\n//                OpenERC173          OpenERC721Metadata  OpenERC721Enumerable    |\\n//                 (Ownable)                   |                    |             |\\n//                     |                       |                    |             |\\n//              \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014               |                    |             |\\n//              |              |               |                    |             |\\n//         OpenERC2981   OpenPauseable         |                    |             |\\n//        (RoyaltyInfo)        |               |                    |             |\\n//              |              |               |                    |             |\\n//              \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014               |                    |             |\\n//                     |                       |                    |             |\\n//               OpenMarketable                |                    |             |\\n//                     |                       |                    |             |\\n//                     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014|\\n//                              |                                                  |\\n//                         OpenNFTsV4 --- IOpenNFTsV4\\n//\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../open/OpenCloneable.sol\\\";\\nimport \\\"../open/OpenMarketable.sol\\\";\\nimport \\\"../open/OpenERC721Enumerable.sol\\\";\\nimport \\\"../open/OpenERC721Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IOpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV4.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC2981.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenNFTsV4 is IOpenNFTsV4, OpenCloneable, OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable {\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext = 1;\\n\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyOpenOrOwner() {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    /// @notice initialize\\n    /// @param name_ name of the NFT Collection\\n    /// @param symbol_ symbol of the NFT Collection\\n    /// @param owner_ owner of the NFT Collection\\n    /// @param options select minting open to everyone or only owner\\n    // solhint-disable-next-line comprehensive-interface\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        bool[] memory options\\n    ) public {\\n        OpenCloneable._initialize(\\\"OpenNFTs\\\", 4);\\n\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n        open = options[0];\\n    }\\n\\n    function mint(string memory jsonURI)\\n        external\\n        override(IOpenNFTsV4)\\n        onlyOpenOrOwner\\n        onlyWhenNotPaused\\n        returns (uint256)\\n    {\\n        return _mint(msg.sender, jsonURI);\\n    }\\n\\n    function mint(address to, string memory jsonURI) external override(IOpenNFTsV4) onlyOwner returns (uint256) {\\n        return _mint(to, jsonURI);\\n    }\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID) external override(IOpenNFTsV4) onlyTokenOwnerOrApproved(tokenID) {\\n        _burn(tokenID);\\n    }\\n\\n    function withdraw(address to) external override(IOpenNFTsV4) onlyOwner {\\n        require(to != address(0), \\\"Don't throw your money !\\\");\\n        payable(to).transfer(address(this).balance);\\n    }\\n\\n    function withdrawErc20(address token) external override(IOpenNFTsV4) onlyOwner {\\n        require(IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this))), \\\"Withdraw failed\\\");\\n    }\\n\\n    function buy(uint256 tokenID) external payable override(IOpenNFTsV4) {\\n        /// Get token price\\n        uint256 price = tokenPrice[tokenID];\\n\\n        /// Require price defined\\n        require(price > 0, \\\"Not to sell\\\");\\n\\n        /// Require enough value sent\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n\\n        /// Get previous token owner\\n        address from = ownerOf(tokenID);\\n        assert(from != address(0));\\n        require(from != msg.sender, \\\"Already token owner!\\\");\\n\\n        /// Reset token price (to be eventualy defined by new owner)\\n        delete tokenPrice[tokenID];\\n\\n        /// Transfer token\\n        this.safeTransferFrom(from, msg.sender, tokenID);\\n\\n        (address receiver, uint256 royalties) = royaltyInfo(tokenID, price);\\n\\n        assert(price >= royalties);\\n        uint256 paid = price - royalties;\\n        uint256 unspent = msg.value - price;\\n        assert(paid + royalties + unspent == msg.value);\\n\\n        /// Transfer amount to previous owner\\n        payable(from).transfer(paid);\\n\\n        /// Transfer royalties to receiver\\n        if (royalties > 0) payable(receiver).transfer(royalties);\\n\\n        /// Transfer back unspent funds to sender\\n        if (unspent > 0) payable(msg.sender).transfer(unspent);\\n    }\\n\\n    /// @notice test if this interface is supported\\n    /// @param interfaceId interfaceId to test\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(OpenMarketable, OpenERC721Metadata, OpenERC721Enumerable, OpenCloneable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOpenNFTs).interfaceId ||\\n            interfaceId == type(IOpenNFTsV4).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice _mint\\n    /// @param minter address of minter\\n    /// @param jsonURI json URI of NFT metadata\\n    function _mint(address minter, string memory jsonURI) internal returns (uint256 tokenID) {\\n        tokenID = tokenIdNext++;\\n\\n        _mintMetadata(tokenID, jsonURI);\\n        _mintEnumerable(minter, tokenID);\\n        _mintNft(minter, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal {\\n        _burnPriceable(tokenID);\\n        _burnMetadata(tokenID);\\n        _burnEnumerable(tokenID);\\n        _burnNft(tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal override(OpenERC721, OpenERC721Enumerable) {\\n        OpenERC721Enumerable._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0xa49a19db6b5cc156496a652256c4c8bddc89492b105edd7e6bde85a9aada6d12\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160155534801561001557600080fd5b50612b69806100256000396000f3fe6080604052600436106102305760003560e01c80636a61e5fc1161012e578063c87b56dd116100ab578063e69e04b31161006f578063e69e04b314610689578063e985e9c51461069f578063eb685c47146106e8578063f2fde38b14610708578063fcfff16f1461072857600080fd5b8063c87b56dd146105e9578063d0def52114610609578063d4ddce8a14610629578063d85d3d2714610656578063d96a094a1461067657600080fd5b806395d89b41116100f257806395d89b411461055f578063a22cb46514610574578063b88d4fde14610594578063c4ae3168146105b4578063c7e42b1b146105c957600080fd5b80636a61e5fc146104c65780636d3c7ec5146104e657806370a08231146105065780638bbf58b3146105265780638da5cb5b1461053c57600080fd5b80632f745c59116101bc57806351cff8d91161018057806351cff8d91461042e57806354e10b481461044e5780635944c7531461046e5780635c975abb1461048e5780636352211e146104a657600080fd5b80632f745c5914610399578063321c48f2146103b957806342842e0e146103ce57806342966c68146103ee5780634f6ccce71461040e57600080fd5b8063095ea7b311610203578063095ea7b3146102e65780630d8e6e2c1461030657806318160ddd1461032557806323b872dd1461033a5780632a55205a1461035a57600080fd5b806301ffc9a71461023557806304634d8d1461026a57806306fdde031461028c578063081812fc146102ae575b600080fd5b34801561024157600080fd5b506102556102503660046123f9565b610742565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028a610285366004612444565b610787565b005b34801561029857600080fd5b506102a1610887565b60405161026191906124c4565b3480156102ba57600080fd5b506102ce6102c93660046124d7565b610919565b6040516001600160a01b039091168152602001610261565b3480156102f257600080fd5b5061028a6103013660046124f0565b61098c565b34801561031257600080fd5b506002545b604051908152602001610261565b34801561033157600080fd5b50600754610317565b34801561034657600080fd5b5061028a61035536600461251a565b610a50565b34801561036657600080fd5b5061037a610375366004612556565b610a60565b604080516001600160a01b039093168352602083019190915201610261565b3480156103a557600080fd5b506103176103b43660046124f0565b610b2c565b3480156103c557600080fd5b506102a1610bb3565b3480156103da57600080fd5b5061028a6103e936600461251a565b610bc2565b3480156103fa57600080fd5b5061028a6104093660046124d7565b610bdd565b34801561041a57600080fd5b506103176104293660046124d7565b610c11565b34801561043a57600080fd5b5061028a610449366004612578565b610c7b565b34801561045a57600080fd5b5061028a610469366004612660565b610d35565b34801561047a57600080fd5b5061028a610489366004612768565b610dad565b34801561049a57600080fd5b5060125460ff16610255565b3480156104b257600080fd5b506102ce6104c13660046124d7565b610e3d565b3480156104d257600080fd5b5061028a6104e13660046124d7565b610e9a565b3480156104f257600080fd5b5061028a6105013660046124d7565b610ea9565b34801561051257600080fd5b50610317610521366004612578565b610f02565b34801561053257600080fd5b5061031760155481565b34801561054857600080fd5b50600f5461010090046001600160a01b03166102ce565b34801561056b57600080fd5b506102a1610f76565b34801561058057600080fd5b5061028a61058f3660046127a4565b610f85565b3480156105a057600080fd5b5061028a6105af3660046127db565b610ff1565b3480156105c057600080fd5b5061028a61104f565b3480156105d557600080fd5b5061028a6105e4366004612578565b611090565b3480156105f557600080fd5b506102a16106043660046124d7565b6111fc565b34801561061557600080fd5b50610317610624366004612857565b61129e565b34801561063557600080fd5b506103176106443660046124d7565b60136020526000908152604090205481565b34801561066257600080fd5b506103176106713660046128a5565b6112e1565b61028a6106843660046124d7565b611385565b34801561069557600080fd5b5061031760145481565b3480156106ab57600080fd5b506102556106ba3660046128da565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156106f457600080fd5b5061028a610703366004612556565b61160f565b34801561071457600080fd5b5061028a610723366004612578565b611670565b34801561073457600080fd5b506016546102559060ff1681565b60006001600160e01b0319821662f7235960e21b148061077257506001600160e01b0319821663ad4a84c160e01b145b806107815750610781826116a8565b92915050565b600f5461010090046001600160a01b031633146107bf5760405162461bcd60e51b81526004016107b690612904565b60405180910390fd5b6001600160601b0381166127108111156108165760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016107b6565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b810282176010558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b6060600c805461089690612927565b80601f01602080910402602001604051908101604052809291908181526020018280546108c290612927565b801561090f5780601f106108e45761010080835404028352916020019161090f565b820191906000526020600020905b8154815290600101906020018083116108f257829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166109705760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064016107b6565b506000908152600560205260409020546001600160a01b031690565b61099633826116cd565b6109e25760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016107b6565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a1782610e3d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610a5b838383611728565b505050565b600080600160801b8310610a865760405162461bcd60e51b81526004016107b690612962565b6000848152601160209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610afa5750604080518082019091526010546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015161271090610b16906001600160601b03168661299f565b610b2091906129be565b90519590945092505050565b6000610b3783610f02565b8210610b765760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016107b6565b6001600160a01b0383166000908152600860205260409020805483908110610ba057610ba06129e0565b9060005260206000200154905092915050565b60606001805461089690612927565b610a5b83838360405180602001604052806000815250610ff1565b80610be8338261195a565b610c045760405162461bcd60e51b81526004016107b6906129f6565b610c0d82611990565b5050565b6007546000908210610c565760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016107b6565b60078281548110610c6957610c696129e0565b90600052602060002001549050919050565b600f5461010090046001600160a01b03163314610caa5760405162461bcd60e51b81526004016107b690612904565b6001600160a01b038116610d005760405162461bcd60e51b815260206004820152601860248201527f446f6e2774207468726f7720796f7572206d6f6e65792021000000000000000060448201526064016107b6565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610c0d573d6000803e3d6000fd5b610d60604051806040016040528060088152602001674f70656e4e46547360c01b81525060046119c7565b610d6a8484611a2f565b610d7382611aa3565b80600081518110610d8657610d866129e0565b6020026020010151601660006101000a81548160ff02191690831515021790555050505050565b82610db8338261195a565b610dd45760405162461bcd60e51b81526004016107b6906129f6565b6001600160601b038216612710811115610e2b5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016107b6565b610e36858585611b00565b5050505050565b6000818152600360205260409020546001600160a01b031680610e955760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064016107b6565b919050565b610ea68160145461160f565b50565b600f5461010090046001600160a01b03163314610ed85760405162461bcd60e51b81526004016107b690612904565b80600160801b8110610efc5760405162461bcd60e51b81526004016107b690612962565b50601455565b60006001600160a01b038216610f5a5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2061646472657373206e6f742076616c6964206f776e65720000000060448201526064016107b6565b506001600160a01b031660009081526004602052604090205490565b6060600d805461089690612927565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ffc848484611728565b61100884848484611b85565b6110495760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016107b6565b50505050565b600f5461010090046001600160a01b0316331461107e5760405162461bcd60e51b81526004016107b690612904565b60125461108e9060ff1615611c34565b565b600f5461010090046001600160a01b031633146110bf5760405162461bcd60e51b81526004016107b690612904565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190612a2d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190612a46565b610ea65760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016107b6565b6000818152600e6020526040902080546060919061121990612927565b80601f016020809104026020016040519081016040528092919081815260200182805461124590612927565b80156112925780601f1061126757610100808354040283529160200191611292565b820191906000526020600020905b81548152906001019060200180831161127557829003601f168201915b50505050509050919050565b600f5460009061010090046001600160a01b031633146112d05760405162461bcd60e51b81526004016107b690612904565b6112da8383611c79565b9392505050565b60165460009060ff16806113055750600f546001600160a01b036101009091041633145b61133e5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016107b6565b60125460ff161561137b5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016107b6565b6107813383611c79565b600081815260136020526040902054806113cf5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016107b6565b803410156114125760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016107b6565b600061141d83610e3d565b90506001600160a01b03811661143557611435612a63565b6001600160a01b0381163314156114855760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016107b6565b6000838152601360205260408082209190915551632142170760e11b81526001600160a01b03821660048201523360248201526044810184905230906342842e0e90606401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b505050506000806115098585610a60565b915091508084101561151d5761151d612a63565b60006115298286612a79565b905060006115378634612a79565b905034816115458585612a90565b61154f9190612a90565b1461155c5761155c612a63565b6040516001600160a01b0386169083156108fc029084906000818181858888f19350505050158015611592573d6000803e3d6000fd5b5082156115d1576040516001600160a01b0385169084156108fc029085906000818181858888f193505050501580156115cf573d6000803e3d6000fd5b505b801561160657604051339082156108fc029083906000818181858888f19350505050158015611604573d6000803e3d6000fd5b505b50505050505050565b8161161a338261195a565b6116365760405162461bcd60e51b81526004016107b6906129f6565b81600160801b811061165a5760405162461bcd60e51b81526004016107b690612962565b6000848152601360205260409020839055611049565b600f5461010090046001600160a01b0316331461169f5760405162461bcd60e51b81526004016107b690612904565b610ea681611cae565b60006001600160e01b031982166332e7c19560e11b1480610781575061078182611d08565b6000806116d983610e3d565b9050836001600160a01b0316816001600160a01b0316148061172057506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b80611733338261195a565b61174f5760405162461bcd60e51b81526004016107b6906129f6565b61175882610e3d565b6001600160a01b0316846001600160a01b0316146117a95760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016107b6565b6001600160a01b0384166117ff5760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016107b6565b6001600160a01b0383166118555760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016107b6565b611860848484611d2d565b600082815260056020526040902080546001600160a01b03191690556001600160a01b0384811690841614611913576001600160a01b03841660009081526004602052604081208054600192906118b8908490612a79565b90915550506001600160a01b03831660009081526004602052604081208054600192906118e6908490612a90565b9091555050600082815260036020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600061196683836116cd565b806112da5750826001600160a01b031661197f83610919565b6001600160a01b0316149392505050565b600081815260116020908152604080832083905560139091528120556119b581611d38565b6119be81611d4f565b610ea681611e18565b60005460ff1615611a075760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b60448201526064016107b6565b6000805460ff191660019081179091558251611a2891906020850190612314565b5060025550565b600b5460ff1615611a6f5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b60448201526064016107b6565b600b805460ff191660011790558151611a8f90600c906020850190612314565b508051610a5b90600d906020840190612314565b600f5460ff1615611aea5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b60448201526064016107b6565b600f805460ff19166001179055610ea681611cae565b6040805180820182526001600160a01b038481168083526001600160601b03858116602080860182815260008b81526011835288902096519051909316600160a01b029290941691909117909355835187815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600161087a565b60006001600160a01b0384163b1580611c2b5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611bcd9033908a9089908990600401612aa8565b602060405180830381600087803b158015611be757600080fd5b505af1158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f9190612ae5565b6001600160e01b031916145b95945050505050565b6012805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b6015805460009182611c8a83612b02565b919050559050611c9a8183611ee3565b611ca48382611f02565b6107818382611f51565b600f80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b031982166398396bd360e01b14806107815750610781826120da565b610a5b8383836120ff565b6000818152600e60205260408120610ea691612398565b6000611d5a82610e3d565b9050611d668183612113565b6000828152600a6020526040812054600754909190611d8790600190612a79565b9050600060078281548110611d9e57611d9e6129e0565b6000918252602080832090910154808352600a909152604080832086905587835282209190915560078054919250829185908110611dde57611dde6129e0565b6000918252602090912001556007805480611dfb57611dfb612b1d565b600190038181906000526020600020016000905590555050505050565b6000611e2382610e3d565b6001600160a01b038116600090815260046020526040902054909150611e4b57611e4b612a63565b6001600160a01b0381166000908152600460205260408120805460019290611e74908490612a79565b9091555050600082815260056020908152604080832080546001600160a01b031990811690915560039092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000828152600e602090815260409091208251610a5b92840190612314565b611f0c8282612221565b600780546000838152600a60205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015550565b6001600160a01b038216611f9e5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016107b6565b6000818152600360205260409020546001600160a01b031615611ffa5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016107b6565b6001600160a01b0382166000908152600460205260408120805460019290612023908490612a90565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46120996000838360405180602001604052806000815250611b85565b610c0d5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016107b6565b600063152a902d60e11b6001600160e01b03198316148061078157506107818261225f565b6121098382612113565b610a5b8282612221565b60008181526009602052604081205490600161212e85610f02565b6121389190612a79565b90508082146121cf576001600160a01b038416600090815260086020526040812080548390811061216b5761216b6129e0565b906000526020600020015490508060086000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106121af576121af6129e0565b600091825260208083209091019290925591825260099052604090208290555b60008381526009602090815260408083208390556001600160a01b03871683526008909152902080548061220557612205612b1d565b6001900381819060005260206000200160009055905550505050565b6001600160a01b0390911660009081526008602081815260408084208054868652600984529185208290559282526001810183559183529091200155565b60006307f5828d60e41b6001600160e01b0319831614806107815750610781826000635b5e139f60e01b6001600160e01b031983161480610781575061078182600063780e9d6360e01b6001600160e01b03198316148061078157506107818260006380ac58cd60e01b6001600160e01b03198316148061078157506107818260006001600160e01b03198216631fc9136f60e11b148061078157506001600160e01b031982166301ffc9a760e01b14610781565b82805461232090612927565b90600052602060002090601f0160209004810192826123425760008555612388565b82601f1061235b57805160ff1916838001178555612388565b82800160010185558215612388579182015b8281111561238857825182559160200191906001019061236d565b506123949291506123ce565b5090565b5080546123a490612927565b6000825580601f106123b4575050565b601f016020900490600052602060002090810190610ea691905b5b8082111561239457600081556001016123cf565b6001600160e01b031981168114610ea657600080fd5b60006020828403121561240b57600080fd5b81356112da816123e3565b80356001600160a01b0381168114610e9557600080fd5b80356001600160601b0381168114610e9557600080fd5b6000806040838503121561245757600080fd5b61246083612416565b915061246e6020840161242d565b90509250929050565b6000815180845260005b8181101561249d57602081850181015186830182015201612481565b818111156124af576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006112da6020830184612477565b6000602082840312156124e957600080fd5b5035919050565b6000806040838503121561250357600080fd5b61250c83612416565b946020939093013593505050565b60008060006060848603121561252f57600080fd5b61253884612416565b925061254660208501612416565b9150604084013590509250925092565b6000806040838503121561256957600080fd5b50508035926020909101359150565b60006020828403121561258a57600080fd5b6112da82612416565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125d2576125d2612593565b604052919050565b600067ffffffffffffffff8311156125f4576125f4612593565b612607601f8401601f19166020016125a9565b905082815283838301111561261b57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261264357600080fd5b6112da838335602085016125da565b8015158114610ea657600080fd5b6000806000806080858703121561267657600080fd5b843567ffffffffffffffff8082111561268e57600080fd5b61269a88838901612632565b95506020915081870135818111156126b157600080fd5b6126bd89828a01612632565b9550506126cc60408801612416565b93506060870135818111156126e057600080fd5b8701601f810189136126f157600080fd5b80358281111561270357612703612593565b8060051b92506127148484016125a9565b818152928201840192848101908b85111561272e57600080fd5b928501925b84841015612758578335925061274883612652565b8282529285019290850190612733565b989b979a50959850505050505050565b60008060006060848603121561277d57600080fd5b8335925061278d60208501612416565b915061279b6040850161242d565b90509250925092565b600080604083850312156127b757600080fd5b6127c083612416565b915060208301356127d081612652565b809150509250929050565b600080600080608085870312156127f157600080fd5b6127fa85612416565b935061280860208601612416565b925060408501359150606085013567ffffffffffffffff81111561282b57600080fd5b8501601f8101871361283c57600080fd5b61284b878235602084016125da565b91505092959194509250565b6000806040838503121561286a57600080fd5b61287383612416565b9150602083013567ffffffffffffffff81111561288f57600080fd5b61289b85828601612632565b9150509250929050565b6000602082840312156128b757600080fd5b813567ffffffffffffffff8111156128ce57600080fd5b61172084828501612632565b600080604083850312156128ed57600080fd5b6128f683612416565b915061246e60208401612416565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c9082168061293b57607f821691505b6020821081141561295c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156129b9576129b9612989565b500290565b6000826129db57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b600060208284031215612a3f57600080fd5b5051919050565b600060208284031215612a5857600080fd5b81516112da81612652565b634e487b7160e01b600052600160045260246000fd5b600082821015612a8b57612a8b612989565b500390565b60008219821115612aa357612aa3612989565b500190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612adb90830184612477565b9695505050505050565b600060208284031215612af757600080fd5b81516112da816123e3565b6000600019821415612b1657612b16612989565b5060010190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205281eb97189f2c7c5575121e27e84689bfe402602ef831e87c97158e3cb0fc6964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80636a61e5fc1161012e578063c87b56dd116100ab578063e69e04b31161006f578063e69e04b314610689578063e985e9c51461069f578063eb685c47146106e8578063f2fde38b14610708578063fcfff16f1461072857600080fd5b8063c87b56dd146105e9578063d0def52114610609578063d4ddce8a14610629578063d85d3d2714610656578063d96a094a1461067657600080fd5b806395d89b41116100f257806395d89b411461055f578063a22cb46514610574578063b88d4fde14610594578063c4ae3168146105b4578063c7e42b1b146105c957600080fd5b80636a61e5fc146104c65780636d3c7ec5146104e657806370a08231146105065780638bbf58b3146105265780638da5cb5b1461053c57600080fd5b80632f745c59116101bc57806351cff8d91161018057806351cff8d91461042e57806354e10b481461044e5780635944c7531461046e5780635c975abb1461048e5780636352211e146104a657600080fd5b80632f745c5914610399578063321c48f2146103b957806342842e0e146103ce57806342966c68146103ee5780634f6ccce71461040e57600080fd5b8063095ea7b311610203578063095ea7b3146102e65780630d8e6e2c1461030657806318160ddd1461032557806323b872dd1461033a5780632a55205a1461035a57600080fd5b806301ffc9a71461023557806304634d8d1461026a57806306fdde031461028c578063081812fc146102ae575b600080fd5b34801561024157600080fd5b506102556102503660046123f9565b610742565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028a610285366004612444565b610787565b005b34801561029857600080fd5b506102a1610887565b60405161026191906124c4565b3480156102ba57600080fd5b506102ce6102c93660046124d7565b610919565b6040516001600160a01b039091168152602001610261565b3480156102f257600080fd5b5061028a6103013660046124f0565b61098c565b34801561031257600080fd5b506002545b604051908152602001610261565b34801561033157600080fd5b50600754610317565b34801561034657600080fd5b5061028a61035536600461251a565b610a50565b34801561036657600080fd5b5061037a610375366004612556565b610a60565b604080516001600160a01b039093168352602083019190915201610261565b3480156103a557600080fd5b506103176103b43660046124f0565b610b2c565b3480156103c557600080fd5b506102a1610bb3565b3480156103da57600080fd5b5061028a6103e936600461251a565b610bc2565b3480156103fa57600080fd5b5061028a6104093660046124d7565b610bdd565b34801561041a57600080fd5b506103176104293660046124d7565b610c11565b34801561043a57600080fd5b5061028a610449366004612578565b610c7b565b34801561045a57600080fd5b5061028a610469366004612660565b610d35565b34801561047a57600080fd5b5061028a610489366004612768565b610dad565b34801561049a57600080fd5b5060125460ff16610255565b3480156104b257600080fd5b506102ce6104c13660046124d7565b610e3d565b3480156104d257600080fd5b5061028a6104e13660046124d7565b610e9a565b3480156104f257600080fd5b5061028a6105013660046124d7565b610ea9565b34801561051257600080fd5b50610317610521366004612578565b610f02565b34801561053257600080fd5b5061031760155481565b34801561054857600080fd5b50600f5461010090046001600160a01b03166102ce565b34801561056b57600080fd5b506102a1610f76565b34801561058057600080fd5b5061028a61058f3660046127a4565b610f85565b3480156105a057600080fd5b5061028a6105af3660046127db565b610ff1565b3480156105c057600080fd5b5061028a61104f565b3480156105d557600080fd5b5061028a6105e4366004612578565b611090565b3480156105f557600080fd5b506102a16106043660046124d7565b6111fc565b34801561061557600080fd5b50610317610624366004612857565b61129e565b34801561063557600080fd5b506103176106443660046124d7565b60136020526000908152604090205481565b34801561066257600080fd5b506103176106713660046128a5565b6112e1565b61028a6106843660046124d7565b611385565b34801561069557600080fd5b5061031760145481565b3480156106ab57600080fd5b506102556106ba3660046128da565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156106f457600080fd5b5061028a610703366004612556565b61160f565b34801561071457600080fd5b5061028a610723366004612578565b611670565b34801561073457600080fd5b506016546102559060ff1681565b60006001600160e01b0319821662f7235960e21b148061077257506001600160e01b0319821663ad4a84c160e01b145b806107815750610781826116a8565b92915050565b600f5461010090046001600160a01b031633146107bf5760405162461bcd60e51b81526004016107b690612904565b60405180910390fd5b6001600160601b0381166127108111156108165760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016107b6565b6040805180820182526001600160a01b0385168082526001600160601b0385166020928301819052600160a01b810282176010558351918252918101919091527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a1505050565b6060600c805461089690612927565b80601f01602080910402602001604051908101604052809291908181526020018280546108c290612927565b801561090f5780601f106108e45761010080835404028352916020019161090f565b820191906000526020600020905b8154815290600101906020018083116108f257829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b03166109705760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064016107b6565b506000908152600560205260409020546001600160a01b031690565b61099633826116cd565b6109e25760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420746f6b656e206f776e6572206e6f72206f70657261746f720000000060448201526064016107b6565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a1782610e3d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610a5b838383611728565b505050565b600080600160801b8310610a865760405162461bcd60e51b81526004016107b690612962565b6000848152601160209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160601b031691830191909152610afa5750604080518082019091526010546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015161271090610b16906001600160601b03168661299f565b610b2091906129be565b90519590945092505050565b6000610b3783610f02565b8210610b765760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016107b6565b6001600160a01b0383166000908152600860205260409020805483908110610ba057610ba06129e0565b9060005260206000200154905092915050565b60606001805461089690612927565b610a5b83838360405180602001604052806000815250610ff1565b80610be8338261195a565b610c045760405162461bcd60e51b81526004016107b6906129f6565b610c0d82611990565b5050565b6007546000908210610c565760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420696e6465782160901b60448201526064016107b6565b60078281548110610c6957610c696129e0565b90600052602060002001549050919050565b600f5461010090046001600160a01b03163314610caa5760405162461bcd60e51b81526004016107b690612904565b6001600160a01b038116610d005760405162461bcd60e51b815260206004820152601860248201527f446f6e2774207468726f7720796f7572206d6f6e65792021000000000000000060448201526064016107b6565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610c0d573d6000803e3d6000fd5b610d60604051806040016040528060088152602001674f70656e4e46547360c01b81525060046119c7565b610d6a8484611a2f565b610d7382611aa3565b80600081518110610d8657610d866129e0565b6020026020010151601660006101000a81548160ff02191690831515021790555050505050565b82610db8338261195a565b610dd45760405162461bcd60e51b81526004016107b6906129f6565b6001600160601b038216612710811115610e2b5760405162461bcd60e51b8152602060048201526018602482015277526f79616c7479206665652065786365656420707269636560401b60448201526064016107b6565b610e36858585611b00565b5050505050565b6000818152600360205260409020546001600160a01b031680610e955760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064016107b6565b919050565b610ea68160145461160f565b50565b600f5461010090046001600160a01b03163314610ed85760405162461bcd60e51b81526004016107b690612904565b80600160801b8110610efc5760405162461bcd60e51b81526004016107b690612962565b50601455565b60006001600160a01b038216610f5a5760405162461bcd60e51b815260206004820152601c60248201527f5a65726f2061646472657373206e6f742076616c6964206f776e65720000000060448201526064016107b6565b506001600160a01b031660009081526004602052604090205490565b6060600d805461089690612927565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ffc848484611728565b61100884848484611b85565b6110495760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016107b6565b50505050565b600f5461010090046001600160a01b0316331461107e5760405162461bcd60e51b81526004016107b690612904565b60125461108e9060ff1615611c34565b565b600f5461010090046001600160a01b031633146110bf5760405162461bcd60e51b81526004016107b690612904565b6040516370a0823160e01b81523060048201526001600160a01b0382169063a9059cbb90339083906370a082319060240160206040518083038186803b15801561110857600080fd5b505afa15801561111c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111409190612a2d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190612a46565b610ea65760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b60448201526064016107b6565b6000818152600e6020526040902080546060919061121990612927565b80601f016020809104026020016040519081016040528092919081815260200182805461124590612927565b80156112925780601f1061126757610100808354040283529160200191611292565b820191906000526020600020905b81548152906001019060200180831161127557829003601f168201915b50505050509050919050565b600f5460009061010090046001600160a01b031633146112d05760405162461bcd60e51b81526004016107b690612904565b6112da8383611c79565b9392505050565b60165460009060ff16806113055750600f546001600160a01b036101009091041633145b61133e5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b60448201526064016107b6565b60125460ff161561137b5760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016107b6565b6107813383611c79565b600081815260136020526040902054806113cf5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1bc81cd95b1b60aa1b60448201526064016107b6565b803410156114125760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016107b6565b600061141d83610e3d565b90506001600160a01b03811661143557611435612a63565b6001600160a01b0381163314156114855760405162461bcd60e51b8152602060048201526014602482015273416c726561647920746f6b656e206f776e65722160601b60448201526064016107b6565b6000838152601360205260408082209190915551632142170760e11b81526001600160a01b03821660048201523360248201526044810184905230906342842e0e90606401600060405180830381600087803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b505050506000806115098585610a60565b915091508084101561151d5761151d612a63565b60006115298286612a79565b905060006115378634612a79565b905034816115458585612a90565b61154f9190612a90565b1461155c5761155c612a63565b6040516001600160a01b0386169083156108fc029084906000818181858888f19350505050158015611592573d6000803e3d6000fd5b5082156115d1576040516001600160a01b0385169084156108fc029085906000818181858888f193505050501580156115cf573d6000803e3d6000fd5b505b801561160657604051339082156108fc029083906000818181858888f19350505050158015611604573d6000803e3d6000fd5b505b50505050505050565b8161161a338261195a565b6116365760405162461bcd60e51b81526004016107b6906129f6565b81600160801b811061165a5760405162461bcd60e51b81526004016107b690612962565b6000848152601360205260409020839055611049565b600f5461010090046001600160a01b0316331461169f5760405162461bcd60e51b81526004016107b690612904565b610ea681611cae565b60006001600160e01b031982166332e7c19560e11b1480610781575061078182611d08565b6000806116d983610e3d565b9050836001600160a01b0316816001600160a01b0316148061172057506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b80611733338261195a565b61174f5760405162461bcd60e51b81526004016107b6906129f6565b61175882610e3d565b6001600160a01b0316846001600160a01b0316146117a95760405162461bcd60e51b815260206004820152600e60248201526d233937b6903737ba1037bbb732b960911b60448201526064016107b6565b6001600160a01b0384166117ff5760405162461bcd60e51b815260206004820152601a60248201527f5472616e736665722066726f6d207a65726f206164647265737300000000000060448201526064016107b6565b6001600160a01b0383166118555760405162461bcd60e51b815260206004820152601860248201527f5472616e7366657220746f207a65726f2061646472657373000000000000000060448201526064016107b6565b611860848484611d2d565b600082815260056020526040902080546001600160a01b03191690556001600160a01b0384811690841614611913576001600160a01b03841660009081526004602052604081208054600192906118b8908490612a79565b90915550506001600160a01b03831660009081526004602052604081208054600192906118e6908490612a90565b9091555050600082815260036020526040902080546001600160a01b0319166001600160a01b0385161790555b81836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600061196683836116cd565b806112da5750826001600160a01b031661197f83610919565b6001600160a01b0316149392505050565b600081815260116020908152604080832083905560139091528120556119b581611d38565b6119be81611d4f565b610ea681611e18565b60005460ff1615611a075760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b60448201526064016107b6565b6000805460ff191660019081179091558251611a2891906020850190612314565b5060025550565b600b5460ff1615611a6f5760405162461bcd60e51b815260206004820152600a6024820152694f6e6c79206f6e63652160b01b60448201526064016107b6565b600b805460ff191660011790558151611a8f90600c906020850190612314565b508051610a5b90600d906020840190612314565b600f5460ff1615611aea5760405162461bcd60e51b8152602060048201526011602482015270125b9a5d08185b1c9958591e4818d85b1b607a1b60448201526064016107b6565b600f805460ff19166001179055610ea681611cae565b6040805180820182526001600160a01b038481168083526001600160601b03858116602080860182815260008b81526011835288902096519051909316600160a01b029290941691909117909355835187815291820152918201527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619060600161087a565b60006001600160a01b0384163b1580611c2b5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611bcd9033908a9089908990600401612aa8565b602060405180830381600087803b158015611be757600080fd5b505af1158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f9190612ae5565b6001600160e01b031916145b95945050505050565b6012805460ff1916821515908117909155604051339160ff161515907f8b265f737315073a655a642868ed756ba7e3b6c391b06dbbf70370aab7f7f06890600090a350565b6015805460009182611c8a83612b02565b919050559050611c9a8183611ee3565b611ca48382611f02565b6107818382611f51565b600f80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160e01b031982166398396bd360e01b14806107815750610781826120da565b610a5b8383836120ff565b6000818152600e60205260408120610ea691612398565b6000611d5a82610e3d565b9050611d668183612113565b6000828152600a6020526040812054600754909190611d8790600190612a79565b9050600060078281548110611d9e57611d9e6129e0565b6000918252602080832090910154808352600a909152604080832086905587835282209190915560078054919250829185908110611dde57611dde6129e0565b6000918252602090912001556007805480611dfb57611dfb612b1d565b600190038181906000526020600020016000905590555050505050565b6000611e2382610e3d565b6001600160a01b038116600090815260046020526040902054909150611e4b57611e4b612a63565b6001600160a01b0381166000908152600460205260408120805460019290611e74908490612a79565b9091555050600082815260056020908152604080832080546001600160a01b031990811690915560039092528083208054909216909155518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000828152600e602090815260409091208251610a5b92840190612314565b611f0c8282612221565b600780546000838152600a60205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015550565b6001600160a01b038216611f9e5760405162461bcd60e51b81526020600482015260146024820152734d696e7420746f207a65726f206164647265737360601b60448201526064016107b6565b6000818152600360205260409020546001600160a01b031615611ffa5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b5a5b9d195960621b60448201526064016107b6565b6001600160a01b0382166000908152600460205260408120805460019290612023908490612a90565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46120996000838360405180602001604052806000815250611b85565b610c0d5760405162461bcd60e51b8152602060048201526012602482015271139bdd08115490cdcc8c549958d95a5d995960721b60448201526064016107b6565b600063152a902d60e11b6001600160e01b03198316148061078157506107818261225f565b6121098382612113565b610a5b8282612221565b60008181526009602052604081205490600161212e85610f02565b6121389190612a79565b90508082146121cf576001600160a01b038416600090815260086020526040812080548390811061216b5761216b6129e0565b906000526020600020015490508060086000876001600160a01b03166001600160a01b0316815260200190815260200160002084815481106121af576121af6129e0565b600091825260208083209091019290925591825260099052604090208290555b60008381526009602090815260408083208390556001600160a01b03871683526008909152902080548061220557612205612b1d565b6001900381819060005260206000200160009055905550505050565b6001600160a01b0390911660009081526008602081815260408084208054868652600984529185208290559282526001810183559183529091200155565b60006307f5828d60e41b6001600160e01b0319831614806107815750610781826000635b5e139f60e01b6001600160e01b031983161480610781575061078182600063780e9d6360e01b6001600160e01b03198316148061078157506107818260006380ac58cd60e01b6001600160e01b03198316148061078157506107818260006001600160e01b03198216631fc9136f60e11b148061078157506001600160e01b031982166301ffc9a760e01b14610781565b82805461232090612927565b90600052602060002090601f0160209004810192826123425760008555612388565b82601f1061235b57805160ff1916838001178555612388565b82800160010185558215612388579182015b8281111561238857825182559160200191906001019061236d565b506123949291506123ce565b5090565b5080546123a490612927565b6000825580601f106123b4575050565b601f016020900490600052602060002090810190610ea691905b5b8082111561239457600081556001016123cf565b6001600160e01b031981168114610ea657600080fd5b60006020828403121561240b57600080fd5b81356112da816123e3565b80356001600160a01b0381168114610e9557600080fd5b80356001600160601b0381168114610e9557600080fd5b6000806040838503121561245757600080fd5b61246083612416565b915061246e6020840161242d565b90509250929050565b6000815180845260005b8181101561249d57602081850181015186830182015201612481565b818111156124af576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006112da6020830184612477565b6000602082840312156124e957600080fd5b5035919050565b6000806040838503121561250357600080fd5b61250c83612416565b946020939093013593505050565b60008060006060848603121561252f57600080fd5b61253884612416565b925061254660208501612416565b9150604084013590509250925092565b6000806040838503121561256957600080fd5b50508035926020909101359150565b60006020828403121561258a57600080fd5b6112da82612416565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125d2576125d2612593565b604052919050565b600067ffffffffffffffff8311156125f4576125f4612593565b612607601f8401601f19166020016125a9565b905082815283838301111561261b57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261264357600080fd5b6112da838335602085016125da565b8015158114610ea657600080fd5b6000806000806080858703121561267657600080fd5b843567ffffffffffffffff8082111561268e57600080fd5b61269a88838901612632565b95506020915081870135818111156126b157600080fd5b6126bd89828a01612632565b9550506126cc60408801612416565b93506060870135818111156126e057600080fd5b8701601f810189136126f157600080fd5b80358281111561270357612703612593565b8060051b92506127148484016125a9565b818152928201840192848101908b85111561272e57600080fd5b928501925b84841015612758578335925061274883612652565b8282529285019290850190612733565b989b979a50959850505050505050565b60008060006060848603121561277d57600080fd5b8335925061278d60208501612416565b915061279b6040850161242d565b90509250925092565b600080604083850312156127b757600080fd5b6127c083612416565b915060208301356127d081612652565b809150509250929050565b600080600080608085870312156127f157600080fd5b6127fa85612416565b935061280860208601612416565b925060408501359150606085013567ffffffffffffffff81111561282b57600080fd5b8501601f8101871361283c57600080fd5b61284b878235602084016125da565b91505092959194509250565b6000806040838503121561286a57600080fd5b61287383612416565b9150602083013567ffffffffffffffff81111561288f57600080fd5b61289b85828601612632565b9150509250929050565b6000602082840312156128b757600080fd5b813567ffffffffffffffff8111156128ce57600080fd5b61172084828501612632565b600080604083850312156128ed57600080fd5b6128f683612416565b915061246e60208401612416565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b600181811c9082168061293b57607f821691505b6020821081141561295c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c546f6f20657870656e7369766560981b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156129b9576129b9612989565b500290565b6000826129db57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6020808252601c908201527f4e6f7420746f6b656e206f776e6572206e6f7220617070726f76656400000000604082015260600190565b600060208284031215612a3f57600080fd5b5051919050565b600060208284031215612a5857600080fd5b81516112da81612652565b634e487b7160e01b600052600160045260246000fd5b600082821015612a8b57612a8b612989565b500390565b60008219821115612aa357612aa3612989565b500190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612adb90830184612477565b9695505050505050565b600060208284031215612af757600080fd5b81516112da816123e3565b6000600019821415612b1657612b16612989565b5060010190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212205281eb97189f2c7c5575121e27e84689bfe402602ef831e87c97158e3cb0fc6964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      },
      "initialize(string,string,address,bool[])": {
        "params": {
          "name_": "name of the NFT Collection",
          "options": "select minting open to everyone or only owner",
          "owner_": "owner of the NFT Collection",
          "symbol_": "symbol of the NFT Collection"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId to test"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "initialize(string,string,address,bool[])": {
        "notice": "initialize"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty configuration"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty configuration"
      },
      "supportsInterface(bytes4)": {
        "notice": "test if this interface is supported"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11130,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_once",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11132,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_template",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11134,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11445,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11449,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11453,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11459,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 12015,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12020,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 12024,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12028,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12310,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 12312,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_name",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 12314,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_symbol",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 12318,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 11232,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 11234,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owner",
        "offset": 1,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 11346,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_royaltyInfo",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(RoyaltyInfo)11343_storage"
      },
      {
        "astId": 11351,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)11343_storage)"
      },
      {
        "astId": 12726,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_paused",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 12480,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12482,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "defaultPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 13386,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 13389,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "open",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)11343_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)11343_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)11343_storage": {
        "encoding": "inplace",
        "label": "struct OpenERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 11340,
            "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11342,
            "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
            "label": "fraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}