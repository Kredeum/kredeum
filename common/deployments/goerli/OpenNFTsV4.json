{
  "address": "0xEadAE683aa5Eb2e3dAE79d35aA959bfc17100aB7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetDefaultPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "SetPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetTokenPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "checkSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "interfaceIdsChecker",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "bool[]",
          "name": "options",
          "type": "bool[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setDefaultPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fee",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xafed863e755bcbfaf2248ed3ce8c2de6d28596dc4f90c8c6198f9afb09b4f38e",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0xEadAE683aa5Eb2e3dAE79d35aA959bfc17100aB7",
    "transactionIndex": 7,
    "gasUsed": "2736080",
    "logsBloom": "0x
    "blockHash": "0x9142f143300f24287513ea154e07281448a45666ce602503763108d6541157a5",
    "transactionHash": "0xafed863e755bcbfaf2248ed3ce8c2de6d28596dc4f90c8c6198f9afb09b4f38e",
    "logs": [],
    "blockNumber": 7352323,
    "cumulativeGasUsed": "5011985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "f997d8441d9ebfecfbd0af11467bd0ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDefaultPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"checkSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"interfaceIdsChecker\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bool[]\",\"name\":\"options\",\"type\":\"bool[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"tokenID\":\"tokenID of NFT to burn\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"fee\":\": fee Numerator, less than 10000\",\"receiver\":\": address of the royalty receiver, or address(0) to reset\",\"tokenID\":\": token ID\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interfaceId to test\"}}},\"title\":\"OpenNFTs smartcontract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"burn NFT\"},\"open()\":{\"notice\":\"Mint NFT allowed to everyone or only collection owner\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty configuration\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty configuration\"},\"supportsInterface(bytes4)\":{\"notice\":\"test if this interface is supported\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFT\"},\"withdraw(address)\":{\"notice\":\"withdraw token otherwise eth\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/templates/OpenNFTsV4.sol\":\"OpenNFTsV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-165: Standard Interface Detection\\n// https://eips.ethereum.org/EIPS/eip-165\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/utils/introspection/ERC165.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165 \\u2014\\u2014 IERC165\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract OpenERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == 0x01ffc9a7; //  type(IERC165).interfaceId\\n    }\\n}\\n\",\"keccak256\":\"0xf1b8812210275ed77b96c117225cdff6dd3ca5684ed3fe671afda8faf71bac80\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-173: Contract Ownership Standard\\n// https://eips.ethereum.org/EIPS/eip-173\\n//\\n// Derived from OpenZeppelin Contracts (access/Ownable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/access/Ownable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC173 \\u2014\\u2014 IERC173\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC173.sol\\\";\\n\\nabstract contract OpenERC173 is IERC173, OpenERC165 {\\n    bool private _openERC173Initialized;\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external override(IERC173) onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    function owner() public view override(IERC173) returns (address) {\\n        return _owner;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == 0x7f5828d0 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(address owner_) internal {\\n        require(_openERC173Initialized == false, \\\"Init already call\\\");\\n        _openERC173Initialized = true;\\n\\n        _setOwner(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7f8017535a61cc04597eaaf9220812ef3645647418d73ae0880b72a06cddbf36\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-2981: NFT Royalty Standard\\n// https://eips.ethereum.org/EIPS/eip-2981\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/common/ERC2981.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC2981 \\u2014\\u2014 IERC2981\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC2981.sol\\\";\\n\\nabstract contract OpenERC2981 is IERC2981, OpenERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 fraction;\\n    }\\n\\n    RoyaltyInfo internal _royaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) internal _tokenRoyaltyInfo;\\n\\n    uint96 private constant _MAX_FEE = 10000;\\n\\n    modifier notTooExpensive(uint256 price) {\\n        /// otherwise may overflow\\n        require(price < 2**128, \\\"Too expensive\\\");\\n        _;\\n    }\\n\\n    modifier lessThanMaxFee(uint256 fee) {\\n        require(fee <= _MAX_FEE, \\\"Royalty fee exceed price\\\");\\n        _;\\n    }\\n\\n    function royaltyInfo(uint256 tokenID, uint256 price)\\n        public\\n        view\\n        override(IERC2981)\\n        notTooExpensive(price)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenID];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _royaltyInfo;\\n        }\\n\\n        royaltyAmount = (price * royalty.fraction) / _MAX_FEE;\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa365a322b161d67f0da6ca400dc1d9a06e8fd4a8a3b9830d295d060b80ce5d84\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//  OpenERC165\\n//       |\\n//  OpenERC721 \\u2014\\u2014 IERC721\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\nabstract contract OpenERC721 is IERC721, OpenERC165 {\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    modifier onlyTokenOwnerOrApproved(uint256 tokenID) {\\n        require(_isOwnerOrApproved(msg.sender, tokenID), \\\"Not token owner nor approved\\\");\\n        _;\\n    }\\n\\n    function approve(address spender, uint256 tokenID) external payable override(IERC721) {\\n        require(_isOwnerOrOperator(msg.sender, tokenID), \\\"Not token owner nor operator\\\");\\n\\n        _tokenApprovals[tokenID] = spender;\\n        emit Approval(ownerOf(tokenID), spender, tokenID);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external override(IERC721) {\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) external payable override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) external payable override(IERC721) {\\n        _transferFrom(from, to, tokenID);\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) public payable override(IERC721) {\\n        _safeTransferFrom(from, to, tokenID, \\\"\\\");\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return\\n            interfaceId == 0x80ac58cd || // = type(IERC721).interfaceId\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function balanceOf(address owner) public view override(IERC721) returns (uint256) {\\n        require(owner != address(0), \\\"Invalid zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function ownerOf(uint256 tokenID) public view override(IERC721) returns (address owner) {\\n        require((owner = _owners[tokenID]) != address(0), \\\"Invalid token ID\\\");\\n    }\\n\\n    function getApproved(uint256 tokenID) public view override(IERC721) returns (address) {\\n        require(_exists(tokenID), \\\"Invalid token ID\\\");\\n\\n        return _tokenApprovals[tokenID];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view override(IERC721) returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _mint(\\n        address to,\\n        string memory,\\n        uint256 tokenID\\n    ) internal virtual {\\n        require(to != address(0), \\\"Mint to zero address\\\");\\n        require(!_exists(tokenID), \\\"Token already minted\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenID] = to;\\n\\n        emit Transfer(address(0), to, tokenID);\\n        require(_isERC721Receiver(address(0), to, tokenID, \\\"\\\"), \\\"Not ERC721Received\\\");\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual {\\n        address owner = ownerOf(tokenID);\\n        assert(_balances[owner] > 0);\\n\\n        _balances[owner] -= 1;\\n        delete _tokenApprovals[tokenID];\\n        delete _owners[tokenID];\\n\\n        emit Transfer(owner, address(0), tokenID);\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private {\\n        _transferFrom(from, to, tokenID);\\n\\n        require(_isERC721Receiver(from, to, tokenID, data), \\\"Not ERC721Receiver\\\");\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) private onlyTokenOwnerOrApproved(tokenID) {\\n        require(from == ownerOf(tokenID), \\\"From not owner\\\");\\n        require(from != address(0), \\\"Transfer from zero address\\\");\\n        require(to != address(0), \\\"Transfer to zero address\\\");\\n\\n        _transferFromBefore(from, to, tokenID);\\n\\n        delete _tokenApprovals[tokenID];\\n\\n        if (from != to) {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n            _owners[tokenID] = to;\\n        }\\n\\n        emit Transfer(from, to, tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual {}\\n\\n    function _exists(uint256 tokenID) internal view returns (bool exists) {\\n        exists = _owners[tokenID] != address(0);\\n    }\\n\\n    function _isOwnerOrOperator(address spender, uint256 tokenID) internal view virtual returns (bool ownerOrOperator) {\\n        address tokenOwner = ownerOf(tokenID);\\n        ownerOrOperator = (tokenOwner == spender || isApprovedForAll(tokenOwner, spender));\\n    }\\n\\n    function _isOwnerOrApproved(address spender, uint256 tokenID) private view returns (bool ownerOrApproved) {\\n        ownerOrApproved = (_isOwnerOrOperator(spender, tokenID) || (getApproved(tokenID) == spender));\\n    }\\n\\n    function _isERC721Receiver(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        bytes memory data\\n    ) private returns (bool) {\\n        return\\n            to.code.length == 0 ||\\n            IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenID, data) ==\\n            IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xf38de15a653fd61846a17613a8481012e713c43a0efc0864993556a22582cdc1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/extensions/ERC721Enumerable.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/...\\n// ...contracts/token/ERC721/extensions/ERC721Enumerable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//      OpenERC165\\n//           |\\n//      OpenERC721\\n//           |\\n//  OpenERC721Enumerable \\u2014\\u2014 IERC721Enumerable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\nabstract contract OpenERC721Enumerable is IERC721Enumerable, OpenERC721 {\\n    // Array of all tokens ID\\n    uint256[] private _allTokens;\\n\\n    // Mapping from owner to list of token IDs owned\\n    // mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to owned index\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Mapping from token ID to all index\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override(IERC721Enumerable)\\n        returns (uint256)\\n    {\\n        require(index < OpenERC721.balanceOf(owner), \\\"Invalid index!\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function totalSupply() external view override(IERC721Enumerable) returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    function tokenByIndex(uint256 index) external view override(IERC721Enumerable) returns (uint256) {\\n        require(index < _allTokens.length, \\\"Invalid index!\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC721) returns (bool) {\\n        return interfaceId == 0x780e9d63 || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(\\n        address to,\\n        string memory tokenURI,\\n        uint256 tokenID\\n    ) internal virtual override(OpenERC721) {\\n        _addOwnedToken(to, tokenID);\\n\\n        _allTokensIndex[tokenID] = _allTokens.length;\\n        _allTokens.push(tokenID);\\n\\n        super._mint(to, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override(OpenERC721) {\\n        address from = ownerOf(tokenID);\\n\\n        _removeOwnedToken(from, tokenID);\\n\\n        uint256 allBurnIndex = _allTokensIndex[tokenID];\\n        uint256 allLastIndex = _allTokens.length - 1;\\n        uint256 allLastTokenId = _allTokens[allLastIndex];\\n\\n        _allTokensIndex[allLastTokenId] = allBurnIndex;\\n        delete _allTokensIndex[tokenID];\\n\\n        _allTokens[allBurnIndex] = allLastTokenId;\\n        _allTokens.pop();\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual override(OpenERC721) {\\n        _removeOwnedToken(from, tokenID);\\n        _addOwnedToken(to, tokenID);\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _addOwnedToken(address owner, uint256 tokenID) private {\\n        _ownedTokensIndex[tokenID] = _ownedTokens[owner].length;\\n        _ownedTokens[owner].push(tokenID);\\n    }\\n\\n    function _removeOwnedToken(address owner, uint256 tokenID) private {\\n        uint256 burnIndex = _ownedTokensIndex[tokenID];\\n        uint256 lastIndex = OpenERC721.balanceOf(owner) - 1;\\n\\n        if (burnIndex != lastIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastIndex];\\n            _ownedTokens[owner][burnIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = burnIndex;\\n        }\\n\\n        delete _ownedTokensIndex[tokenID];\\n        _ownedTokens[owner].pop();\\n    }\\n}\\n\",\"keccak256\":\"0xe29305b9c7030370645c6bf39845579e8a0aa2191fca1d2f516417ec5b8becfd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// EIP-721: Non-Fungible Token Standard\\n// https://eips.ethereum.org/EIPS/eip-721\\n//\\n// Derived from OpenZeppelin Contracts (token/ERC721/ERC721.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//     OpenERC165\\n//          |\\n//     OpenERC721\\n//          |\\n//  OpenERC721Metadata \\u2014\\u2014 IERC721Metadata\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nabstract contract OpenERC721Metadata is IERC721Metadata, OpenERC721 {\\n    bool private _openERC721MetadataInitialized;\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function name() external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenID) external view virtual override(IERC721Metadata) returns (string memory) {\\n        return _tokenURIs[tokenID];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC721) returns (bool) {\\n        return interfaceId == 0x5b5e139f || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory name_, string memory symbol_) internal {\\n        require(_openERC721MetadataInitialized == false, \\\"Only once!\\\");\\n        _openERC721MetadataInitialized = true;\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _mint(\\n        address to,\\n        string memory newTokenURI,\\n        uint256 tokenID\\n    ) internal virtual override(OpenERC721) {\\n        _tokenURIs[tokenID] = newTokenURI;\\n\\n        super._mint(to, newTokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override(OpenERC721) {\\n        delete _tokenURIs[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0x7a125b91c7648b62b8084b41e90d71383a0a3ced4fb302647b0351e1cbed7244\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenCloneable \\u2014\\u2014 IOpenCloneable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\n\\nabstract contract OpenCloneable is IOpenCloneable, OpenERC165 {\\n    bool private _openCloneableInitialized;\\n    string private _template;\\n    uint256 private _version;\\n\\n    function getTemplate() external view override(IOpenCloneable) returns (string memory) {\\n        return _template;\\n    }\\n\\n    function getVersion() external view override(IOpenCloneable) returns (uint256) {\\n        return _version;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenCloneable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _initialize(string memory template_, uint256 version_) internal {\\n        require(_openCloneableInitialized == false, \\\"Only once!\\\");\\n        _openCloneableInitialized = true;\\n\\n        _template = template_;\\n        _version = version_;\\n    }\\n}\\n\",\"keccak256\":\"0x95319280953990e2d64e9d6be40953ac33996efc97c1e2e0a4e576a63fac682d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//        |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |            |             |\\n//   OpenERC721    OpenERC173   OpenERC2981\\n//      (NFT)      (Ownable)   (RoyaltyInfo)\\n//        |            |             |\\n//        \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//        |\\n//  OpenMarketable \\u2014\\u2014 IOpenMarketable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC2981.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\\\";\\n\\nabstract contract OpenMarketable is IOpenMarketable, OpenERC721, OpenERC173, OpenERC2981 {\\n    mapping(uint256 => uint256) public tokenPrice;\\n    uint256 public defaultPrice;\\n\\n    receive() external payable override(IOpenMarketable) {}\\n\\n    /// @notice SET default royalty configuration\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setDefaultRoyalty(address receiver, uint96 fee)\\n        external\\n        override(IOpenMarketable)\\n        onlyOwner\\n        lessThanMaxFee(fee)\\n    {\\n        _royaltyInfo = RoyaltyInfo(receiver, fee);\\n        emit SetDefaultRoyalty(receiver, fee);\\n    }\\n\\n    /// @notice SET token royalty configuration\\n    /// @param tokenID : token ID\\n    /// @param receiver : address of the royalty receiver, or address(0) to reset\\n    /// @param fee : fee Numerator, less than 10000\\n    function setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) public override(IOpenMarketable) onlyTokenOwnerOrApproved(tokenID) lessThanMaxFee(fee) {\\n        _setTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function setDefaultPrice(uint256 price) external override(IOpenMarketable) onlyOwner notTooExpensive(price) {\\n        defaultPrice = price;\\n\\n        emit SetDefaultPrice(price);\\n    }\\n\\n    function setTokenPrice(uint256 tokenID) external override(IOpenMarketable) {\\n        setTokenPrice(tokenID, defaultPrice);\\n    }\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price)\\n        public\\n        override(IOpenMarketable)\\n        onlyTokenOwnerOrApproved(tokenID)\\n        notTooExpensive(price)\\n    {\\n        _setTokenPrice(tokenID, price);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenERC721, OpenERC173, OpenERC2981)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenMarketable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _mint(\\n        address to,\\n        string memory tokenURI,\\n        uint256 tokenID\\n    ) internal virtual override(OpenERC721) {\\n        super._mint(to, tokenURI, tokenID);\\n\\n        _pay(tokenID, defaultPrice, to, owner());\\n    }\\n\\n    function _burn(uint256 tokenID) internal virtual override(OpenERC721) {\\n        delete _tokenRoyaltyInfo[tokenID];\\n        delete tokenPrice[tokenID];\\n\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal virtual override(OpenERC721) {\\n        /// Transfer: pay token price (including royalties) to previous token owner (and royalty receiver)\\n        _pay(tokenID, tokenPrice[tokenID], to, ownerOf(tokenID));\\n        delete tokenPrice[tokenID];\\n\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n\\n    function _pay(\\n        uint256 tokenID,\\n        uint256 price,\\n        address payer,\\n        address payee\\n    ) private {\\n        uint256 unspent = msg.value;\\n\\n        if (price > 0) {\\n            /// Require enough value sent\\n            require(unspent >= price, \\\"Not enough funds\\\");\\n\\n            (address receiver, uint256 royalties) = royaltyInfo(tokenID, price);\\n\\n            require(royalties <= price, \\\"Invalid royalties\\\");\\n            uint256 paid = price - royalties;\\n\\n            /// Transfer amount to previous payee\\n            if (paid > 0) {\\n                payable(payee).transfer(paid);\\n                unspent = unspent - paid;\\n            }\\n\\n            /// Transfer royalties to receiver\\n            if (royalties > 0) {\\n                payable(receiver).transfer(royalties);\\n                unspent = unspent - royalties;\\n            }\\n\\n            emit Pay(tokenID, price, payer, payee);\\n        }\\n\\n        /// Transfer back unspent funds to payer\\n        if (unspent > 0) payable(payer).transfer(unspent);\\n    }\\n\\n    function _setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) private {\\n        _tokenRoyaltyInfo[tokenID] = RoyaltyInfo(receiver, fee);\\n\\n        emit SetTokenRoyalty(tokenID, receiver, fee);\\n    }\\n\\n    function _setTokenPrice(uint256 tokenID, uint256 price) private {\\n        tokenPrice[tokenID] = price;\\n\\n        emit SetTokenPrice(tokenID, price);\\n    }\\n}\\n\",\"keccak256\":\"0xf361c98a30bd5812d9a1316982ef6a06e86514c417948f1866f8ffe010277c3b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                       |             |             |             |\\n//   OpenERC721                            OpenERC2981    OpenERC173  OpenChecker  OpenCloneable\\n//     (NFT)                              (RoyaltyInfo)    (ownable)         |             |\\n//       |                                        |            |             |             |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014   |     \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014             |             |\\n//       |                        |           |   |     |      |             |             |\\n//  OpenERC721Metadata  OpenERC721Enumerable  |   \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |             |             |\\n//       |                        |           |   |            |             |             |\\n//       |                        |      OpenMarketable   OpenPauseable      |             |\\n//       |                        |             |              |             |             |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs \\u2014\\u2014 IOpenNFTs\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\\\";\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Metadata.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC721Enumerable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenMarketable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenCloneable.sol\\\";\\nimport \\\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenNFTs is\\n    IOpenNFTs,\\n    OpenERC721Metadata,\\n    OpenERC721Enumerable,\\n    OpenMarketable,\\n    OpenPauseable,\\n    OpenChecker,\\n    OpenCloneable\\n{\\n    /// @notice tokenID of next minted NFT\\n    uint256 public tokenIdNext = 1;\\n\\n    /// @notice burn NFT\\n    /// @param tokenID tokenID of NFT to burn\\n    function burn(uint256 tokenID) external override(IOpenNFTs) onlyTokenOwnerOrApproved(tokenID) {\\n        _burn(tokenID);\\n    }\\n\\n    /// @notice withdraw token otherwise eth\\n    function withdraw(address token) external override(IOpenNFTs) onlyOwner {\\n        if ((token.code.length != 0) && (IERC165(token).supportsInterface(type(IERC20).interfaceId))) {\\n            require(IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this))), \\\"Withdraw failed\\\");\\n        } else {\\n            payable(msg.sender).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function mint(address minter, string memory tokenURI) public override(IOpenNFTs) returns (uint256 tokenID) {\\n        tokenID = tokenIdNext++;\\n        _mint(minter, tokenURI, tokenID);\\n    }\\n\\n    /// @notice test if this interface is supported\\n    /// @param interfaceId interfaceId to test\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OpenMarketable, OpenERC721Metadata, OpenERC721Enumerable, OpenCloneable, OpenPauseable, OpenChecker)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOpenNFTs).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice _initialize\\n    /// @param name_ name of the NFT Collection\\n    /// @param symbol_ symbol of the NFT Collection\\n    /// @param owner_ owner of the NFT Collection\\n    // solhint-disable-next-line comprehensive-interface\\n    function _initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_\\n    ) internal {\\n        OpenCloneable._initialize(\\\"OpenNFTs\\\", 4);\\n        OpenERC721Metadata._initialize(name_, symbol_);\\n        OpenERC173._initialize(owner_);\\n    }\\n\\n    /// @notice _mint\\n    /// @param minter address of minter\\n    /// @param tokenURI json URI of NFT metadata\\n    function _mint(\\n        address minter,\\n        string memory tokenURI,\\n        uint256 tokenID\\n    ) internal override(OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable) {\\n        super._mint(minter, tokenURI, tokenID);\\n    }\\n\\n    function _burn(uint256 tokenID) internal override(OpenERC721Enumerable, OpenERC721Metadata, OpenMarketable) {\\n        super._burn(tokenID);\\n    }\\n\\n    function _transferFromBefore(\\n        address from,\\n        address to,\\n        uint256 tokenID\\n    ) internal override(OpenERC721, OpenMarketable, OpenERC721Enumerable) {\\n        super._transferFromBefore(from, to, tokenID);\\n    }\\n}\\n\",\"keccak256\":\"0xa31968d02e7f1c50b87b0db6860199c94f4b852d88b0a4da774b0bcb1bb473cd\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenNFTs/OpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (token/common/ERC2981.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/Pausable.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//   OpenERC173\\n//        |\\n//  OpenPauseable \\u2013\\u2013 IOpenPauseable\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC173.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\\\";\\n\\nabstract contract OpenPauseable is IOpenPauseable, OpenERC173 {\\n    bool private _paused;\\n\\n    modifier onlyWhenNotPaused() {\\n        require(!_paused, \\\"Paused!\\\");\\n        _;\\n    }\\n\\n    function togglePause() external override(IOpenPauseable) onlyOwner {\\n        _setPaused(!_paused);\\n    }\\n\\n    function paused() external view override(IOpenPauseable) returns (bool) {\\n        return _paused;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC173) returns (bool) {\\n        return interfaceId == type(IOpenPauseable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _setPaused(bool paused_) private {\\n        _paused = paused_;\\n        emit SetPaused(_paused, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb4fb38f26ab8ceb546ac9fb91af6f8292a053708fa798076f768c79025e71a1a\",\"license\":\"MIT\"},\"OpenNFTs/contracts/OpenResolver/OpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from OpenZeppelin Contracts (utils/introspection/ERC165Ckecker.sol)\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165Checker.sol\\n//\\n//       ___           ___         ___           ___              ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\            /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\           \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\      _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\    /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/    \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~      \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\           \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/            \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//   OpenERC165\\n//        |\\n//  OpenChecker \\u2014\\u2014 IOpenChecker\\n//\\npragma solidity 0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenERC/OpenERC165.sol\\\";\\nimport \\\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\\\";\\n\\nabstract contract OpenChecker is IOpenChecker, OpenERC165 {\\n    function checkSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        public\\n        view\\n        returns (bool[] memory interfaceIdsChecker)\\n    {\\n        interfaceIdsChecker = new bool[](interfaceIds.length);\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            interfaceIdsChecker[i] = IERC165(account).supportsInterface(interfaceIds[i]);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenERC165) returns (bool) {\\n        return interfaceId == type(IOpenChecker).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa0b683c138c50c8d2ea7604dcb068b02598ad922af31b56e9c6f12782ed019e7\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1f5d5ecf50da8f1522564691408712d64d2a7a05f46b4827cb2782619b652b\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address currentOwner);\\n}\\n\",\"keccak256\":\"0x9716e67fa2bfaabb007ec482cc041d62181c84434d510822dbfa0f4894aaa958\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x713ae97b817d1538f7bd64cf91f5e80cb841ebc296d0e1b3a85ebb10c221bd3f\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC2981 {\\n    function royaltyInfo(uint256 tokenID, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xfc768e62494276e5b66e370450ffd3f49e2fe59ff574110358b053187b48e2d1\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x20b9c6d46e0d1c375cf965480c3ffc6805eb5fa8811a1e755ecddaf150774e40\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Enumerable {\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b3c72bf7439f870efe17f63debea48e71ec7af66594c35fc721ec847b550ce\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb4acce4d48ce2560e8575404ce7a5e5f4465f9ed544964a95bc0771e687eafbc\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4f125eabda2f7ff81126582dd76f41a26464c0a1043ff056ae1876e758e80fdf\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenChecker {\\n    function checkSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        external\\n        view\\n        returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x0ba63f5b22b78e8695bc384ca71cf416e9c1078c3f3a8e329841a1ba7b91e349\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenCloneable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenCloneable {\\n    function getTemplate() external view returns (string memory);\\n\\n    function getVersion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x152901133233a3b58d7f9391a4c9fe920b899d1b720f473f8b9bc04790fb760d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenMarketable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenMarketable {\\n    event SetDefaultRoyalty(address receiver, uint96 fee);\\n\\n    event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 fee);\\n\\n    event SetDefaultPrice(uint256 price);\\n\\n    event SetTokenPrice(uint256 tokenID, uint256 price);\\n\\n    event Pay(uint256 tokenID, uint256 price, address payer, address payee);\\n\\n    receive() external payable;\\n\\n    function defaultPrice() external returns (uint256 defPrice);\\n\\n    function tokenPrice(uint256 tokenID) external returns (uint256 price);\\n\\n    function setDefaultRoyalty(address receiver, uint96 fee) external;\\n\\n    function setTokenRoyalty(\\n        uint256 tokenID,\\n        address receiver,\\n        uint96 fee\\n    ) external;\\n\\n    function setDefaultPrice(uint256 price) external;\\n\\n    function setTokenPrice(uint256 tokenID) external;\\n\\n    function setTokenPrice(uint256 tokenID, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x61d50af2bdb355384e1219561bc0d583d2422d2d757bcf39ca21408084d44b6d\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTs {\\n    function mint(address minter, string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function burn(uint256 tokenID) external;\\n\\n    function withdraw(address token) external;\\n}\\n\",\"keccak256\":\"0xd6db9618029d25ceb6fe3d8d2fa5823502c336b25316f148b912c3f716a67a53\",\"license\":\"MIT\"},\"OpenNFTs/contracts/interfaces/IOpenPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenPauseable {\\n    event SetPaused(bool indexed paused, address indexed account);\\n\\n    function paused() external returns (bool);\\n\\n    function togglePause() external;\\n}\\n\",\"keccak256\":\"0x9bb33ac8ab56cb30ffa8862be0ccdcd1833a7504c990289bec52e53f3faaaf40\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOpenNFTs {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mintOpenNFT(address minter, string memory jsonURI) external returns (uint256 tokenID);\\n\\n    function burnOpenNFT(uint256 tokenID) external;\\n}\\n\",\"keccak256\":\"0x73c2598bd560c15217e3e79bc0424a41eedcddfe2d67bae3507424431f30ba9e\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOpenNFTsV4 {\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        bool[] memory options\\n    ) external;\\n\\n    function mint(string memory tokenURI) external returns (uint256 tokenID);\\n\\n    function buy(uint256 tokenID) external payable;\\n\\n    function open() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe86d49a41144e60cf3fe70484dfc307095380abf748c253fef7bc35c0e6cf6a5\",\"license\":\"MIT\"},\"contracts/templates/OpenNFTsV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// Derived from Kredeum NFTs\\n// https://github.com/Kredeum/kredeum\\n//\\n//       ___           ___         ___           ___                    ___           ___                     ___\\n//      /  /\\\\         /  /\\\\       /  /\\\\         /__/\\\\                  /__/\\\\         /  /\\\\        ___        /  /\\\\\\n//     /  /::\\\\       /  /::\\\\     /  /:/_        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\       /  /:/_      /  /\\\\      /  /:/_\\n//    /  /:/\\\\:\\\\     /  /:/\\\\:\\\\   /  /:/ /\\\\        \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\     /  /:/ /\\\\    /  /:/     /  /:/ /\\\\\\n//   /  /:/  \\\\:\\\\   /  /:/~/:/  /  /:/ /:/_   _____\\\\__\\\\:\\\\            _____\\\\__\\\\:\\\\   /  /:/ /:/   /  /:/     /  /:/ /::\\\\\\n//  /__/:/ \\\\__\\\\:\\\\ /__/:/ /:/  /__/:/ /:/ /\\\\ /__/::::::::\\\\          /__/::::::::\\\\ /__/:/ /:/   /  /::\\\\    /__/:/ /:/\\\\:\\\\\\n//  \\\\  \\\\:\\\\ /  /:/ \\\\  \\\\:\\\\/:/   \\\\  \\\\:\\\\/:/ /:/ \\\\  \\\\:\\\\~~\\\\~~\\\\/          \\\\  \\\\:\\\\~~\\\\~~\\\\/ \\\\  \\\\:\\\\/:/   /__/:/\\\\:\\\\   \\\\  \\\\:\\\\/:/~/:/\\n//   \\\\  \\\\:\\\\  /:/   \\\\  \\\\::/     \\\\  \\\\::/ /:/   \\\\  \\\\:\\\\  ~~~            \\\\  \\\\:\\\\  ~~~   \\\\  \\\\::/    \\\\__\\\\/  \\\\:\\\\   \\\\  \\\\::/ /:/\\n//    \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\      \\\\  \\\\:\\\\/:/     \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\  \\\\:\\\\   \\\\__\\\\/ /:/\\n//     \\\\  \\\\::/       \\\\  \\\\:\\\\      \\\\  \\\\::/       \\\\  \\\\:\\\\                 \\\\  \\\\:\\\\        \\\\  \\\\:\\\\         \\\\__\\\\/     /__/:/\\n//      \\\\__\\\\/         \\\\__\\\\/       \\\\__\\\\/         \\\\__\\\\/                  \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/\\n//\\n//\\n//   OpenERC165\\n//   (supports)\\n//       |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |                                                         |             |             |\\n//   OpenERC721                                               OpenERC173  OpenChecker  OpenCloneable\\n//     (NFT)                                                   (ownable)         |             |\\n//       |                                                         |             |             |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014             |             |\\n//       |                        |                  |      |      |             |             |\\n//  OpenERC721Metadata  OpenERC721Enumerable   OpenERC2981  |      |             |             |\\n//       |                        |           (RoyaltyInfo) |      |             |             |\\n//       |                        |                  |      |      |             |             |\\n//       |                        |                  \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014      |             |             |\\n//       |                        |                  |             |             |             |\\n//       |                        |            OpenMarketable OpenPauseable      |             |\\n//       |                        |                  |             |             |             |\\n//       \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\n//       |\\n//    OpenNFTs\\n//       |\\n//   OpenNFTsV4 \\u2014\\u2014 IOpenNFTsV4\\n//\\npragma solidity ^0.8.9;\\n\\nimport \\\"OpenNFTs/contracts/OpenNFTs/OpenNFTs.sol\\\";\\nimport \\\"../interfaces/IOpenNFTsV4.sol\\\";\\nimport {IOpenNFTs as IOpenNFTsOld} from \\\"../interfaces/IOpenNFTs.sol\\\";\\n\\n/// @title OpenNFTs smartcontract\\ncontract OpenNFTsV4 is IOpenNFTsV4, OpenNFTs {\\n    /// @notice Mint NFT allowed to everyone or only collection owner\\n    bool public open;\\n\\n    /// @notice onlyOpenOrOwner, either everybody in open collection,\\n    /// @notice either only owner in specific collection\\n    modifier onlyOpenOrOwner() {\\n        require(open || (owner() == msg.sender), \\\"Not minter\\\");\\n        _;\\n    }\\n\\n    function buy(uint256 tokenID) external payable override(IOpenNFTsV4) {\\n        require(_exists(tokenID), \\\"NFT doesn't exists\\\");\\n\\n        /// Get token price\\n        uint256 price = tokenPrice[tokenID];\\n\\n        /// Require price defined\\n        require(price > 0, \\\"Not to sell\\\");\\n\\n        /// Require enough value sent\\n        require(msg.value >= price, \\\"Not enough funds\\\");\\n\\n        /// Get previous token owner\\n        address from = ownerOf(tokenID);\\n        assert(from != address(0));\\n        require(from != msg.sender, \\\"Already token owner!\\\");\\n\\n        /// Transfer token\\n        this.safeTransferFrom{value: msg.value}(from, msg.sender, tokenID, \\\"\\\");\\n\\n        /// Reset token price (to be eventualy defined by new owner)\\n        delete tokenPrice[tokenID];\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        bool[] memory options\\n    ) external override(IOpenNFTsV4) {\\n        OpenNFTs._initialize(name_, symbol_, owner_);\\n        open = options[0];\\n    }\\n\\n    function mint(string memory tokenURI)\\n        external\\n        override(IOpenNFTsV4)\\n        onlyOpenOrOwner\\n        onlyWhenNotPaused\\n        returns (uint256)\\n    {\\n        return mint(msg.sender, tokenURI);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OpenNFTs) returns (bool) {\\n        return\\n            interfaceId == type(IOpenNFTsV4).interfaceId ||\\n            interfaceId == type(IOpenNFTsOld).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5c3aca8786fb1eee099a482664d4ac469e938489ce09f3ca6faa295b9cc31957\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "tokenID": "tokenID of NFT to burn"
        }
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "fee": ": fee Numerator, less than 10000",
          "receiver": ": address of the royalty receiver, or address(0) to reset",
          "tokenID": ": token ID"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interfaceId to test"
        }
      }
    },
    "title": "OpenNFTs smartcontract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "burn NFT"
      },
      "open()": {
        "notice": "Mint NFT allowed to everyone or only collection owner"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty configuration"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty configuration"
      },
      "supportsInterface(bytes4)": {
        "notice": "test if this interface is supported"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFT"
      },
      "withdraw(address)": {
        "notice": "withdraw token otherwise eth"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6766,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6770,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6774,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6780,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7697,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC721MetadataInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 7699,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 7701,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 7705,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7374,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7379,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7383,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7387,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6531,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openERC173Initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 6533,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_owner",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 6645,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_royaltyInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(RoyaltyInfo)6642_storage"
      },
      {
        "astId": 6650,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)6642_storage)"
      },
      {
        "astId": 7962,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7964,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "defaultPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 8607,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_paused",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 7870,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_openCloneableInitialized",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 7872,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_template",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 7874,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "_version",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 8373,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 19589,
        "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
        "label": "open",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)6642_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)6642_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)6642_storage": {
        "encoding": "inplace",
        "label": "struct OpenERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 6639,
            "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6641,
            "contract": "contracts/templates/OpenNFTsV4.sol:OpenNFTsV4",
            "label": "fraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}